// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

import ballerina/data.jsondata;
import ballerina/http;
import ballerina/jballerina.java;

function setModule() = @java:Method {'class: "io.ballerina.openapi.client.ModuleUtils"} external;

function init() {
    setModule();
}

type ClientMethodImpl record {|
    string name;
|};

annotation ClientMethodImpl MethodImpl on function;

type ClientMethodInvocationError http:ClientError;

public isolated client class Client {
    final http:StatusCodeClient clientEp;
    # Gets invoked to initialize the `connector`.
    #
    # + config - The configurations to be used when initializing the `connector`
    # + serviceUrl - URL of the target service
    # + return - An error if connector initialization failed
    public isolated function init(ConnectionConfig config =  {}, string serviceUrl = "http://localhost:9090/api") returns error? {
        http:ClientConfiguration httpClientConfig = {httpVersion: config.httpVersion, http1Settings: config.http1Settings, http2Settings: config.http2Settings, timeout: config.timeout, forwarded: config.forwarded, followRedirects: config.followRedirects, poolConfig: config.poolConfig, cache: config.cache, compression: config.compression, circuitBreaker: config.circuitBreaker, retryConfig: config.retryConfig, cookieConfig: config.cookieConfig, responseLimits: config.responseLimits, secureSocket: config.secureSocket, proxy: config.proxy, socketConfig: config.socketConfig, validation: config.validation, laxDataBinding: config.laxDataBinding};
        self.clientEp = check new (serviceUrl, httpClientConfig);
    }

    # + headers - Headers to be sent with the request
    # + return - Ok
    @MethodImpl {name: "getAlbumsIdImpl"}
    remote isolated function getAlbumsId(string id, map<string|string[]> headers = {}, typedesc<AlbumOk|ErrorMessageDefault> targetType = <>) returns targetType|error = @java:Method {'class: "io.ballerina.openapi.client.GeneratedClient", name: "invoke"} external;

    private isolated function getAlbumsIdImpl(string id, map<string|string[]> headers, typedesc<AlbumOk|ErrorMessageDefault> targetType) returns http:StatusCodeResponse|error {
        string resourcePath = string `/albums/${getEncodedUri(id)}`;
        var response = self.clientEp->get(resourcePath, headers, targetType = targetType);
        int[] nonDefaultStatusCodes = [200];
        return getValidatedResponseForDefaultMapping(response, nonDefaultStatusCodes);
    }

    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Ok
    @MethodImpl {name: "getAlbumsImpl"}
    remote isolated function getAlbums(map<string|string[]> headers = {}, typedesc<AlbumArrayOk|ErrorMessageDefault> targetType = <>, *GetAlbumsQueries queries) returns targetType|error = @java:Method {'class: "io.ballerina.openapi.client.GeneratedClient", name: "invoke"} external;

    private isolated function getAlbumsImpl(map<string|string[]> headers, typedesc<AlbumArrayOk|ErrorMessageDefault> targetType, *GetAlbumsQueries queries) returns http:StatusCodeResponse|error {
        string resourcePath = string `/albums`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        var response = self.clientEp->get(resourcePath, headers, targetType = targetType);
        int[] nonDefaultStatusCodes = [200];
        return getValidatedResponseForDefaultMapping(response, nonDefaultStatusCodes);
    }

    # + headers - Headers to be sent with the request
    # + return - Created
    @MethodImpl {name: "postAlbumsImpl"}
    remote isolated function postAlbums(Album payload, map<string|string[]> headers = {}, typedesc<AlbumCreated|ErrorMessageDefault> targetType = <>) returns targetType|error = @java:Method {'class: "io.ballerina.openapi.client.GeneratedClient", name: "invoke"} external;

    private isolated function postAlbumsImpl(Album payload, map<string|string[]> headers, typedesc<AlbumCreated|ErrorMessageDefault> targetType) returns http:StatusCodeResponse|error {
        string resourcePath = string `/albums`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        var response = self.clientEp->post(resourcePath, request, headers, targetType = targetType);
        int[] nonDefaultStatusCodes = [201];
        return getValidatedResponseForDefaultMapping(response, nonDefaultStatusCodes);
    }
}
