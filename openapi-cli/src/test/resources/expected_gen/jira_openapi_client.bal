// AUTO-GENERATED FILE. DO NOT MODIFY.
// This file is auto-generated by the Ballerina OpenAPI tool.

import ballerina/constraint;
import ballerina/data.jsondata;
import ballerina/http;
import ballerina/mime;
import ballerina/url;

# Jira Cloud platform REST API documentation
public isolated client class Client {
    final http:Client clientEp;
    # Gets invoked to initialize the `connector`.
    #
    # + config - The configurations to be used when initializing the `connector`
    # + serviceUrl - URL of the target service
    # + return - An error if connector initialization failed
    public isolated function init(ConnectionConfig config, string serviceUrl = "https://your-domain.atlassian.com") returns error? {
        http:ClientConfiguration httpClientConfig = {auth: config.auth, httpVersion: config.httpVersion, http1Settings: config.http1Settings, http2Settings: config.http2Settings, timeout: config.timeout, forwarded: config.forwarded, followRedirects: config.followRedirects, poolConfig: config.poolConfig, cache: config.cache, compression: config.compression, circuitBreaker: config.circuitBreaker, retryConfig: config.retryConfig, cookieConfig: config.cookieConfig, responseLimits: config.responseLimits, secureSocket: config.secureSocket, proxy: config.proxy, socketConfig: config.socketConfig, validation: config.validation, laxDataBinding: config.laxDataBinding};
        self.clientEp = check new (serviceUrl, httpClientConfig);
    }

    # Update custom field value
    #
    # + fieldIdOrKey - The ID or key of the custom field. For example, `customfield_10010`.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function put rest/api/'2/app/'field/[string fieldIdOrKey]/value(CustomFieldValueUpdateRequest payload, map<string|string[]> headers = {}) returns json|error {
        string resourcePath = string `/rest/api/2/app/field/${getEncodedUri(fieldIdOrKey)}/value`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Get application property
    #
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/application\-properties(map<string|string[]> headers = {}, *GetApplicationPropertyQueries queries) returns ApplicationProperty[]|error {
        string resourcePath = string `/rest/api/2/application-properties`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get advanced settings
    #
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/application\-properties/advanced\-settings(map<string|string[]> headers = {}) returns ApplicationProperty[]|error {
        string resourcePath = string `/rest/api/2/application-properties/advanced-settings`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Set application property
    #
    # + id - The key of the application property to update.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function put rest/api/'2/application\-properties/[string id](SimpleApplicationPropertyBean payload, map<string|string[]> headers = {}) returns ApplicationProperty|error {
        string resourcePath = string `/rest/api/2/application-properties/${getEncodedUri(id)}`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Get all application roles
    #
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/applicationrole(map<string|string[]> headers = {}) returns ApplicationRole[]|error {
        string resourcePath = string `/rest/api/2/applicationrole`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Get application role
    #
    # + 'key - The key of the application role. Use the [Get all application roles](#api-rest-api-2-applicationrole-get) operation to get the key for each application role.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/applicationrole/[string 'key](map<string|string[]> headers = {}) returns ApplicationRole|error {
        string resourcePath = string `/rest/api/2/applicationrole/${getEncodedUri('key)}`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Get Jira attachment settings
    #
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/attachment/meta(map<string|string[]> headers = {}) returns AttachmentSettings|error {
        string resourcePath = string `/rest/api/2/attachment/meta`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Get attachment metadata
    #
    # + id - The ID of the attachment.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/attachment/[string id](map<string|string[]> headers = {}) returns AttachmentMetadata|error {
        string resourcePath = string `/rest/api/2/attachment/${getEncodedUri(id)}`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Delete attachment
    #
    # + id - The ID of the attachment.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function delete rest/api/'2/attachment/[string id](map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/rest/api/2/attachment/${getEncodedUri(id)}`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Get all metadata for an expanded attachment
    #
    # + id - The ID of the attachment.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful. If an empty list is returned in the response, the attachment is empty, corrupt, or not an archive.
    resource isolated function get rest/api/'2/attachment/[string id]/expand/human(map<string|string[]> headers = {}) returns AttachmentArchiveMetadataReadable|error {
        string resourcePath = string `/rest/api/2/attachment/${getEncodedUri(id)}/expand/human`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Get contents metadata for an expanded attachment
    #
    # + id - The ID of the attachment.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful. If an empty list is returned in the response, the attachment is empty, corrupt, or not an archive.
    resource isolated function get rest/api/'2/attachment/[string id]/expand/raw(map<string|string[]> headers = {}) returns AttachmentArchiveImpl|error {
        string resourcePath = string `/rest/api/2/attachment/${getEncodedUri(id)}/expand/raw`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Get audit records
    #
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/auditing/'record(map<string|string[]> headers = {}, *GetAuditRecordsQueries queries) returns AuditRecords|error {
        string resourcePath = string `/rest/api/2/auditing/record`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get system avatars by type
    #
    # + 'type - The avatar type.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/avatar/["issuetype"|"project"|"user" 'type]/system(map<string|string[]> headers = {}) returns SystemAvatars|error {
        string resourcePath = string `/rest/api/2/avatar/${getEncodedUri('type)}/system`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Get comments by IDs
    #
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + payload - The list of comment IDs.
    # + return - Returned if the request is successful.
    resource isolated function post rest/api/'2/comment/list(IssueCommentListRequestBean payload, map<string|string[]> headers = {}, *GetCommentsByIdsQueries queries) returns PageBeanComment|error {
        string resourcePath = string `/rest/api/2/comment/list`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get comment property keys
    #
    # + commentId - The ID of the comment.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/comment/[string commentId]/properties(map<string|string[]> headers = {}) returns PropertyKeys|error {
        string resourcePath = string `/rest/api/2/comment/${getEncodedUri(commentId)}/properties`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Get comment property
    #
    # + commentId - The ID of the comment.
    # + propertyKey - The key of the property.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/comment/[string commentId]/properties/[string propertyKey](map<string|string[]> headers = {}) returns EntityProperty|error {
        string resourcePath = string `/rest/api/2/comment/${getEncodedUri(commentId)}/properties/${getEncodedUri(propertyKey)}`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Set comment property
    #
    # + commentId - The ID of the comment.
    # + propertyKey - The key of the property. The maximum length is 255 characters.
    # + headers - Headers to be sent with the request
    # + return - Returned if the comment property is updated.
    resource isolated function put rest/api/'2/comment/[string commentId]/properties/[string propertyKey](json payload, map<string|string[]> headers = {}) returns json|error {
        string resourcePath = string `/rest/api/2/comment/${getEncodedUri(commentId)}/properties/${getEncodedUri(propertyKey)}`;
        http:Request request = new;
        request.setPayload(payload, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete comment property
    #
    # + commentId - The ID of the comment.
    # + propertyKey - The key of the property.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function delete rest/api/'2/comment/[string commentId]/properties/[string propertyKey](map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/rest/api/2/comment/${getEncodedUri(commentId)}/properties/${getEncodedUri(propertyKey)}`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Create component
    #
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function post rest/api/'2/component(Component payload, map<string|string[]> headers = {}) returns Component|error {
        string resourcePath = string `/rest/api/2/component`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get component
    #
    # + id - The ID of the component.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/component/[string id](map<string|string[]> headers = {}) returns Component|error {
        string resourcePath = string `/rest/api/2/component/${getEncodedUri(id)}`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Update component
    #
    # + id - The ID of the component.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function put rest/api/'2/component/[string id](Component payload, map<string|string[]> headers = {}) returns Component|error {
        string resourcePath = string `/rest/api/2/component/${getEncodedUri(id)}`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete component
    #
    # + id - The ID of the component.
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function delete rest/api/'2/component/[string id](map<string|string[]> headers = {}, *DeleteComponentQueries queries) returns error? {
        string resourcePath = string `/rest/api/2/component/${getEncodedUri(id)}`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Get component issues count
    #
    # + id - The ID of the component.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/component/[string id]/relatedIssueCounts(map<string|string[]> headers = {}) returns ComponentIssuesCount|error {
        string resourcePath = string `/rest/api/2/component/${getEncodedUri(id)}/relatedIssueCounts`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Get global settings
    #
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/configuration(map<string|string[]> headers = {}) returns Configuration|error {
        string resourcePath = string `/rest/api/2/configuration`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Get selected time tracking provider
    #
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful and time tracking is enabled.
    resource isolated function get rest/api/'2/configuration/timetracking(map<string|string[]> headers = {}) returns TimeTrackingProvider|json|error {
        string resourcePath = string `/rest/api/2/configuration/timetracking`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Select time tracking provider
    #
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function put rest/api/'2/configuration/timetracking(TimeTrackingProvider payload, map<string|string[]> headers = {}) returns json|error {
        string resourcePath = string `/rest/api/2/configuration/timetracking`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Get all time tracking providers
    #
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/configuration/timetracking/list(map<string|string[]> headers = {}) returns TimeTrackingProvider[]|error {
        string resourcePath = string `/rest/api/2/configuration/timetracking/list`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Get time tracking settings
    #
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/configuration/timetracking/options(map<string|string[]> headers = {}) returns TimeTrackingConfiguration|error {
        string resourcePath = string `/rest/api/2/configuration/timetracking/options`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Set time tracking settings
    #
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function put rest/api/'2/configuration/timetracking/options(TimeTrackingConfiguration payload, map<string|string[]> headers = {}) returns TimeTrackingConfiguration|error {
        string resourcePath = string `/rest/api/2/configuration/timetracking/options`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Get options for field
    #
    # + fieldId - The ID of the custom field. Note: This is the numeric part of the of the field ID. For example, for a field with the ID *customfield\_10075* use *10075*.
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    #
    # # Deprecated
    @deprecated
    resource isolated function get rest/api/'2/customField/[int fieldId]/option(map<string|string[]> headers = {}, *GetOptionsForFieldQueries queries) returns PageBeanCustomFieldOptionDetails|error {
        string resourcePath = string `/rest/api/2/customField/${getEncodedUri(fieldId)}/option`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update custom field options
    #
    # + fieldId - The ID of the custom field. Note: This is the numeric part of the of the field ID. For example, for a field with the ID *customfield\_10075* use *10075*.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    #
    # # Deprecated
    @deprecated
    resource isolated function put rest/api/'2/customField/[int fieldId]/option(UpdateCustomFieldOption payload, map<string|string[]> headers = {}) returns json|error {
        string resourcePath = string `/rest/api/2/customField/${getEncodedUri(fieldId)}/option`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Create custom field options
    #
    # + fieldId - The ID of the custom field. Note: This is the numeric part of the of the field ID. For example, for a field with the ID *customfield\_10075* use *10075*.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    #
    # # Deprecated
    @deprecated
    resource isolated function post rest/api/'2/customField/[int fieldId]/option(BulkCreateCustomFieldOptionRequest payload, map<string|string[]> headers = {}) returns json|error {
        string resourcePath = string `/rest/api/2/customField/${getEncodedUri(fieldId)}/option`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get custom field option
    #
    # + id - The ID of the custom field option.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    #
    # # Deprecated
    @deprecated
    resource isolated function get rest/api/'2/customFieldOption/[string id](map<string|string[]> headers = {}) returns CustomFieldOption|error {
        string resourcePath = string `/rest/api/2/customFieldOption/${getEncodedUri(id)}`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Get all dashboards
    #
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/dashboard(map<string|string[]> headers = {}, *GetAllDashboardsQueries queries) returns PageOfDashboards|error {
        string resourcePath = string `/rest/api/2/dashboard`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Create dashboard
    #
    # + headers - Headers to be sent with the request
    # + payload - Dashboard details.
    # + return - Returned if the request is successful.
    resource isolated function post rest/api/'2/dashboard(DashboardDetails payload, map<string|string[]> headers = {}) returns Dashboard|error {
        string resourcePath = string `/rest/api/2/dashboard`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Search for dashboards
    #
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/dashboard/search(map<string|string[]> headers = {}, *GetDashboardsPaginatedQueries queries) returns PageBeanDashboard|error {
        string resourcePath = string `/rest/api/2/dashboard/search`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get dashboard item property keys
    #
    # + dashboardId - The ID of the dashboard.
    # + itemId - The ID of the dashboard item.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/dashboard/[string dashboardId]/items/[string itemId]/properties(map<string|string[]> headers = {}) returns PropertyKeys|error {
        string resourcePath = string `/rest/api/2/dashboard/${getEncodedUri(dashboardId)}/items/${getEncodedUri(itemId)}/properties`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Get dashboard item property
    #
    # + dashboardId - The ID of the dashboard.
    # + itemId - The ID of the dashboard item.
    # + propertyKey - The key of the dashboard item property.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/dashboard/[string dashboardId]/items/[string itemId]/properties/[string propertyKey](map<string|string[]> headers = {}) returns EntityProperty|error {
        string resourcePath = string `/rest/api/2/dashboard/${getEncodedUri(dashboardId)}/items/${getEncodedUri(itemId)}/properties/${getEncodedUri(propertyKey)}`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Set dashboard item property
    #
    # + dashboardId - The ID of the dashboard.
    # + itemId - The ID of the dashboard item.
    # + propertyKey - The key of the dashboard item property. The maximum length is 255 characters.
    # + headers - Headers to be sent with the request
    # + return - Returned if the dashboard item property is updated.
    resource isolated function put rest/api/'2/dashboard/[string dashboardId]/items/[string itemId]/properties/[string propertyKey](json payload, map<string|string[]> headers = {}) returns json|error {
        string resourcePath = string `/rest/api/2/dashboard/${getEncodedUri(dashboardId)}/items/${getEncodedUri(itemId)}/properties/${getEncodedUri(propertyKey)}`;
        http:Request request = new;
        request.setPayload(payload, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete dashboard item property
    #
    # + dashboardId - The ID of the dashboard.
    # + itemId - The ID of the dashboard item.
    # + propertyKey - The key of the dashboard item property.
    # + headers - Headers to be sent with the request
    # + return - Returned if the dashboard item property is deleted.
    resource isolated function delete rest/api/'2/dashboard/[string dashboardId]/items/[string itemId]/properties/[string propertyKey](map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/rest/api/2/dashboard/${getEncodedUri(dashboardId)}/items/${getEncodedUri(itemId)}/properties/${getEncodedUri(propertyKey)}`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Get dashboard
    #
    # + id - The ID of the dashboard.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/dashboard/[string id](map<string|string[]> headers = {}) returns Dashboard|error {
        string resourcePath = string `/rest/api/2/dashboard/${getEncodedUri(id)}`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Update dashboard
    #
    # + id - The ID of the dashboard to update.
    # + headers - Headers to be sent with the request
    # + payload - Replacement dashboard details.
    # + return - Returned if the request is successful.
    resource isolated function put rest/api/'2/dashboard/[string id](DashboardDetails payload, map<string|string[]> headers = {}) returns Dashboard|error {
        string resourcePath = string `/rest/api/2/dashboard/${getEncodedUri(id)}`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete dashboard
    #
    # + id - The ID of the dashboard.
    # + headers - Headers to be sent with the request
    # + return - Returned if the dashboard is deleted.
    resource isolated function delete rest/api/'2/dashboard/[string id](map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/rest/api/2/dashboard/${getEncodedUri(id)}`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Copy dashboard
    #
    # + headers - Headers to be sent with the request
    # + payload - Dashboard details.
    # + return - Returned if the request is successful.
    resource isolated function post rest/api/'2/dashboard/[string id]/copy(DashboardDetails payload, map<string|string[]> headers = {}) returns Dashboard|error {
        string resourcePath = string `/rest/api/2/dashboard/${getEncodedUri(id)}/copy`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Analyse Jira expression
    #
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + payload - The Jira expressions to analyse.
    # + return - Returned if the request is successful.
    resource isolated function post rest/api/'2/expression/analyse(JiraExpressionForAnalysis payload, map<string|string[]> headers = {}, *AnalyseExpressionQueries queries) returns JiraExpressionsAnalysis|error {
        string resourcePath = string `/rest/api/2/expression/analyse`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Evaluate Jira expression
    #
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + payload - The Jira expression and the evaluation context.
    # + return - Returned if the evaluation results in a value. The result is a JSON primitive value, list, or object.
    resource isolated function post rest/api/'2/expression/eval(JiraExpressionEvalRequestBean payload, map<string|string[]> headers = {}, *EvaluateJiraExpressionQueries queries) returns JiraExpressionResult|error {
        string resourcePath = string `/rest/api/2/expression/eval`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get fields
    #
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/'field(map<string|string[]> headers = {}) returns FieldDetails[]|error {
        string resourcePath = string `/rest/api/2/field`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Create custom field
    #
    # + headers - Headers to be sent with the request
    # + payload - Definition of the custom field to be created
    # + return - Returned if the custom field is created.
    resource isolated function post rest/api/'2/'field(CustomFieldDefinitionJsonBean payload, map<string|string[]> headers = {}) returns FieldDetails|error {
        string resourcePath = string `/rest/api/2/field`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get fields paginated
    #
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/'field/search(map<string|string[]> headers = {}, *GetFieldsPaginatedQueries queries) returns PageBeanField|error {
        string resourcePath = string `/rest/api/2/field/search`;
        map<Encoding> queryParamEncoding = {"type": {style: FORM, explode: true}, "id": {style: FORM, explode: true}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update custom field
    #
    # + fieldId - The ID of the custom field.
    # + headers - Headers to be sent with the request
    # + payload - The custom field update details.
    # + return - Returned if the request is successful.
    resource isolated function put rest/api/'2/'field/[string fieldId](UpdateCustomFieldDetails payload, map<string|string[]> headers = {}) returns json|error {
        string resourcePath = string `/rest/api/2/field/${getEncodedUri(fieldId)}`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Get custom field contexts
    #
    # + fieldId - The ID of the custom field.
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/'field/[string fieldId]/context(map<string|string[]> headers = {}, *GetContextsForFieldQueries queries) returns PageBeanCustomFieldContext|error {
        string resourcePath = string `/rest/api/2/field/${getEncodedUri(fieldId)}/context`;
        map<Encoding> queryParamEncoding = {"contextId": {style: FORM, explode: true}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Create custom field context
    #
    # + fieldId - The ID of the custom field.
    # + headers - Headers to be sent with the request
    # + return - Returned if the custom field context is created.
    resource isolated function post rest/api/'2/'field/[string fieldId]/context(CreateCustomFieldContext payload, map<string|string[]> headers = {}) returns CreateCustomFieldContext|error {
        string resourcePath = string `/rest/api/2/field/${getEncodedUri(fieldId)}/context`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get custom field contexts default values
    #
    # + fieldId - The ID of the custom field.
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/'field/[string fieldId]/context/defaultValue(map<string|string[]> headers = {}, *GetDefaultValuesQueries queries) returns PageBeanCustomFieldContextDefaultValue|error {
        string resourcePath = string `/rest/api/2/field/${getEncodedUri(fieldId)}/context/defaultValue`;
        map<Encoding> queryParamEncoding = {"contextId": {style: FORM, explode: true}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Set custom field contexts default values
    #
    # + fieldId - The ID of the custom field.
    # + headers - Headers to be sent with the request
    # + return - Returned if operation is successful.
    resource isolated function put rest/api/'2/'field/[string fieldId]/context/defaultValue(CustomFieldContextDefaultValueUpdate payload, map<string|string[]> headers = {}) returns json|error {
        string resourcePath = string `/rest/api/2/field/${getEncodedUri(fieldId)}/context/defaultValue`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Get issue types for custom field context
    #
    # + fieldId - The ID of the custom field.
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if operation is successful.
    resource isolated function get rest/api/'2/'field/[string fieldId]/context/issuetypemapping(map<string|string[]> headers = {}, *GetIssueTypeMappingsForContextsQueries queries) returns PageBeanIssueTypeToContextMapping|error {
        string resourcePath = string `/rest/api/2/field/${getEncodedUri(fieldId)}/context/issuetypemapping`;
        map<Encoding> queryParamEncoding = {"contextId": {style: FORM, explode: true}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get custom field contexts for projects and issue types
    #
    # + fieldId - The ID of the custom field.
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + payload - The list of project and issue type mappings.
    # + return - Returned if the request is successful.
    resource isolated function post rest/api/'2/'field/[string fieldId]/context/mapping(ProjectIssueTypeMappings payload, map<string|string[]> headers = {}, *GetCustomFieldContextsForProjectsAndIssueTypesQueries queries) returns PageBeanContextForProjectAndIssueType|error {
        string resourcePath = string `/rest/api/2/field/${getEncodedUri(fieldId)}/context/mapping`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get project mappings for custom field context
    #
    # + fieldId - The ID of the custom field.
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/'field/[string fieldId]/context/projectmapping(map<string|string[]> headers = {}, *GetProjectContextMappingQueries queries) returns PageBeanCustomFieldContextProjectMapping|error {
        string resourcePath = string `/rest/api/2/field/${getEncodedUri(fieldId)}/context/projectmapping`;
        map<Encoding> queryParamEncoding = {"contextId": {style: FORM, explode: true}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update custom field context
    #
    # + fieldId - The ID of the custom field.
    # + contextId - The ID of the context.
    # + headers - Headers to be sent with the request
    # + return - Returned if the context is updated.
    resource isolated function put rest/api/'2/'field/[string fieldId]/context/[int contextId](CustomFieldContextUpdateDetails payload, map<string|string[]> headers = {}) returns json|error {
        string resourcePath = string `/rest/api/2/field/${getEncodedUri(fieldId)}/context/${getEncodedUri(contextId)}`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete custom field context
    #
    # + fieldId - The ID of the custom field.
    # + contextId - The ID of the context.
    # + headers - Headers to be sent with the request
    # + return - Returned if the context is deleted.
    resource isolated function delete rest/api/'2/'field/[string fieldId]/context/[int contextId](map<string|string[]> headers = {}) returns json|error {
        string resourcePath = string `/rest/api/2/field/${getEncodedUri(fieldId)}/context/${getEncodedUri(contextId)}`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Add issue types to context
    #
    # + fieldId - The ID of the custom field.
    # + contextId - The ID of the context.
    # + headers - Headers to be sent with the request
    # + return - Returned if operation is successful.
    resource isolated function put rest/api/'2/'field/[string fieldId]/context/[int contextId]/issuetype(IssueTypeIds payload, map<string|string[]> headers = {}) returns json|error {
        string resourcePath = string `/rest/api/2/field/${getEncodedUri(fieldId)}/context/${getEncodedUri(contextId)}/issuetype`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Remove issue types from context
    #
    # + fieldId - The ID of the custom field.
    # + contextId - The ID of the context.
    # + headers - Headers to be sent with the request
    # + return - Returned if operation is successful.
    resource isolated function post rest/api/'2/'field/[string fieldId]/context/[int contextId]/issuetype/remove(IssueTypeIds payload, map<string|string[]> headers = {}) returns json|error {
        string resourcePath = string `/rest/api/2/field/${getEncodedUri(fieldId)}/context/${getEncodedUri(contextId)}/issuetype/remove`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get custom field options (context)
    #
    # + fieldId - The ID of the custom field.
    # + contextId - The ID of the context.
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/'field/[string fieldId]/context/[int contextId]/option(map<string|string[]> headers = {}, *GetOptionsForContextQueries queries) returns PageBeanCustomFieldContextOption|error {
        string resourcePath = string `/rest/api/2/field/${getEncodedUri(fieldId)}/context/${getEncodedUri(contextId)}/option`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update custom field options (context)
    #
    # + fieldId - The ID of the custom field.
    # + contextId - The ID of the context.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function put rest/api/'2/'field/[string fieldId]/context/[int contextId]/option(BulkCustomFieldOptionUpdateRequest payload, map<string|string[]> headers = {}) returns CustomFieldUpdatedContextOptionsList|error {
        string resourcePath = string `/rest/api/2/field/${getEncodedUri(fieldId)}/context/${getEncodedUri(contextId)}/option`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Create custom field options (context)
    #
    # + fieldId - The ID of the custom field.
    # + contextId - The ID of the context.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function post rest/api/'2/'field/[string fieldId]/context/[int contextId]/option(BulkCustomFieldOptionCreateRequest payload, map<string|string[]> headers = {}) returns CustomFieldCreatedContextOptionsList|error {
        string resourcePath = string `/rest/api/2/field/${getEncodedUri(fieldId)}/context/${getEncodedUri(contextId)}/option`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Reorder custom field options (context)
    #
    # + fieldId - The ID of the custom field.
    # + contextId - The ID of the context.
    # + headers - Headers to be sent with the request
    # + return - Returned if options are reordered.
    resource isolated function put rest/api/'2/'field/[string fieldId]/context/[int contextId]/option/move(OrderOfCustomFieldOptions payload, map<string|string[]> headers = {}) returns json|error {
        string resourcePath = string `/rest/api/2/field/${getEncodedUri(fieldId)}/context/${getEncodedUri(contextId)}/option/move`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete custom field options (context)
    #
    # + fieldId - The ID of the custom field.
    # + contextId - The ID of the context from which an option should be deleted.
    # + optionId - The ID of the option to delete.
    # + headers - Headers to be sent with the request
    # + return - Returned if the option is deleted.
    resource isolated function delete rest/api/'2/'field/[string fieldId]/context/[int contextId]/option/[int optionId](map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/rest/api/2/field/${getEncodedUri(fieldId)}/context/${getEncodedUri(contextId)}/option/${getEncodedUri(optionId)}`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Assign custom field context to projects
    #
    # + fieldId - The ID of the custom field.
    # + contextId - The ID of the context.
    # + headers - Headers to be sent with the request
    # + return - Returned if operation is successful.
    resource isolated function put rest/api/'2/'field/[string fieldId]/context/[int contextId]/project(ProjectIds payload, map<string|string[]> headers = {}) returns json|error {
        string resourcePath = string `/rest/api/2/field/${getEncodedUri(fieldId)}/context/${getEncodedUri(contextId)}/project`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Remove custom field context from projects
    #
    # + fieldId - The ID of the custom field.
    # + contextId - The ID of the context.
    # + headers - Headers to be sent with the request
    # + return - Returned if the custom field context is removed from the projects.
    resource isolated function post rest/api/'2/'field/[string fieldId]/context/[int contextId]/project/remove(ProjectIds payload, map<string|string[]> headers = {}) returns json|error {
        string resourcePath = string `/rest/api/2/field/${getEncodedUri(fieldId)}/context/${getEncodedUri(contextId)}/project/remove`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get contexts for a field
    #
    # + fieldId - The ID of the field to return contexts for.
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    #
    # # Deprecated
    @deprecated
    resource isolated function get rest/api/'2/'field/[string fieldId]/contexts(map<string|string[]> headers = {}, *GetContextsForFieldDeprecatedQueries queries) returns PageBeanContext|error {
        string resourcePath = string `/rest/api/2/field/${getEncodedUri(fieldId)}/contexts`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get screens for a field
    #
    # + fieldId - The ID of the field to return screens for.
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/'field/[string fieldId]/screens(map<string|string[]> headers = {}, *GetScreensForFieldQueries queries) returns PageBeanScreenWithTab|error {
        string resourcePath = string `/rest/api/2/field/${getEncodedUri(fieldId)}/screens`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get all issue field options
    #
    # + fieldKey - The field key is specified in the following format: **$(app-key)\_\_$(field-key)**. For example, *example-add-on\_\_example-issue-field*. To determine the `fieldKey` value, do one of the following:
    # *  open the app's plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the `jiraIssueFields` module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.
    # *  run [Get fields](#api-rest-api-2-field-get) and in the field details the value is returned in `key`. For example, `"key": "teams-add-on__team-issue-field"`
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/'field/[string fieldKey]/option(map<string|string[]> headers = {}, *GetAllIssueFieldOptionsQueries queries) returns PageBeanIssueFieldOption|error {
        string resourcePath = string `/rest/api/2/field/${getEncodedUri(fieldKey)}/option`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Create issue field option
    #
    # + fieldKey - The field key is specified in the following format: **$(app-key)\_\_$(field-key)**. For example, *example-add-on\_\_example-issue-field*. To determine the `fieldKey` value, do one of the following:
    # *  open the app's plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the `jiraIssueFields` module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.
    # *  run [Get fields](#api-rest-api-2-field-get) and in the field details the value is returned in `key`. For example, `"key": "teams-add-on__team-issue-field"`
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function post rest/api/'2/'field/[string fieldKey]/option(IssueFieldOptionCreateBean payload, map<string|string[]> headers = {}) returns IssueFieldOption|error {
        string resourcePath = string `/rest/api/2/field/${getEncodedUri(fieldKey)}/option`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get selectable issue field options
    #
    # + fieldKey - The field key is specified in the following format: **$(app-key)\_\_$(field-key)**. For example, *example-add-on\_\_example-issue-field*. To determine the `fieldKey` value, do one of the following:
    # *  open the app's plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the `jiraIssueFields` module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.
    # *  run [Get fields](#api-rest-api-2-field-get) and in the field details the value is returned in `key`. For example, `"key": "teams-add-on__team-issue-field"`
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/'field/[string fieldKey]/option/suggestions/edit(map<string|string[]> headers = {}, *GetSelectableIssueFieldOptionsQueries queries) returns PageBeanIssueFieldOption|error {
        string resourcePath = string `/rest/api/2/field/${getEncodedUri(fieldKey)}/option/suggestions/edit`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get visible issue field options
    #
    # + fieldKey - The field key is specified in the following format: **$(app-key)\_\_$(field-key)**. For example, *example-add-on\_\_example-issue-field*. To determine the `fieldKey` value, do one of the following:
    # *  open the app's plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the `jiraIssueFields` module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.
    # *  run [Get fields](#api-rest-api-2-field-get) and in the field details the value is returned in `key`. For example, `"key": "teams-add-on__team-issue-field"`
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/'field/[string fieldKey]/option/suggestions/search(map<string|string[]> headers = {}, *GetVisibleIssueFieldOptionsQueries queries) returns PageBeanIssueFieldOption|error {
        string resourcePath = string `/rest/api/2/field/${getEncodedUri(fieldKey)}/option/suggestions/search`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get issue field option
    #
    # + fieldKey - The field key is specified in the following format: **$(app-key)\_\_$(field-key)**. For example, *example-add-on\_\_example-issue-field*. To determine the `fieldKey` value, do one of the following:
    # *  open the app's plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the `jiraIssueFields` module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.
    # *  run [Get fields](#api-rest-api-2-field-get) and in the field details the value is returned in `key`. For example, `"key": "teams-add-on__team-issue-field"`
    # + optionId - The ID of the option to be returned.
    # + headers - Headers to be sent with the request
    # + return - Returned if the requested option is returned.
    resource isolated function get rest/api/'2/'field/[string fieldKey]/option/[int optionId](map<string|string[]> headers = {}) returns IssueFieldOption|error {
        string resourcePath = string `/rest/api/2/field/${getEncodedUri(fieldKey)}/option/${getEncodedUri(optionId)}`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Update issue field option
    #
    # + fieldKey - The field key is specified in the following format: **$(app-key)\_\_$(field-key)**. For example, *example-add-on\_\_example-issue-field*. To determine the `fieldKey` value, do one of the following:
    # *  open the app's plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the `jiraIssueFields` module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.
    # *  run [Get fields](#api-rest-api-2-field-get) and in the field details the value is returned in `key`. For example, `"key": "teams-add-on__team-issue-field"`
    # + optionId - The ID of the option to be updated.
    # + headers - Headers to be sent with the request
    # + return - Returned if the option is updated or created.
    resource isolated function put rest/api/'2/'field/[string fieldKey]/option/[int optionId](IssueFieldOption payload, map<string|string[]> headers = {}) returns IssueFieldOption|error {
        string resourcePath = string `/rest/api/2/field/${getEncodedUri(fieldKey)}/option/${getEncodedUri(optionId)}`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete issue field option
    #
    # + fieldKey - The field key is specified in the following format: **$(app-key)\_\_$(field-key)**. For example, *example-add-on\_\_example-issue-field*. To determine the `fieldKey` value, do one of the following:
    # *  open the app's plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the `jiraIssueFields` module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.
    # *  run [Get fields](#api-rest-api-2-field-get) and in the field details the value is returned in `key`. For example, `"key": "teams-add-on__team-issue-field"`
    # + optionId - The ID of the option to be deleted.
    # + headers - Headers to be sent with the request
    # + return - Returned if the field option is deleted.
    resource isolated function delete rest/api/'2/'field/[string fieldKey]/option/[int optionId](map<string|string[]> headers = {}) returns json|error {
        string resourcePath = string `/rest/api/2/field/${getEncodedUri(fieldKey)}/option/${getEncodedUri(optionId)}`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Replace issue field option
    #
    # + fieldKey - The field key is specified in the following format: **$(app-key)\_\_$(field-key)**. For example, *example-add-on\_\_example-issue-field*. To determine the `fieldKey` value, do one of the following:
    # *  open the app's plugin descriptor, then **app-key** is the key at the top and **field-key** is the key in the `jiraIssueFields` module. **app-key** can also be found in the app listing in the Atlassian Universal Plugin Manager.
    # *  run [Get fields](#api-rest-api-2-field-get) and in the field details the value is returned in `key`. For example, `"key": "teams-add-on__team-issue-field"`
    # + optionId - The ID of the option to be deselected.
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the long-running task to deselect the option is started.
    resource isolated function delete rest/api/'2/'field/[string fieldKey]/option/[int optionId]/issue(map<string|string[]> headers = {}, *ReplaceIssueFieldOptionQueries queries) returns http:Response|error {
        string resourcePath = string `/rest/api/2/field/${getEncodedUri(fieldKey)}/option/${getEncodedUri(optionId)}/issue`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Get all field configurations
    #
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/fieldconfiguration(map<string|string[]> headers = {}, *GetAllFieldConfigurationsQueries queries) returns PageBeanFieldConfiguration|error {
        string resourcePath = string `/rest/api/2/fieldconfiguration`;
        map<Encoding> queryParamEncoding = {"id": {style: FORM, explode: true}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get field configuration items
    #
    # + id - The ID of the field configuration.
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/fieldconfiguration/[int id]/fields(map<string|string[]> headers = {}, *GetFieldConfigurationItemsQueries queries) returns PageBeanFieldConfigurationItem|error {
        string resourcePath = string `/rest/api/2/fieldconfiguration/${getEncodedUri(id)}/fields`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get all field configuration schemes
    #
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/fieldconfigurationscheme(map<string|string[]> headers = {}, *GetAllFieldConfigurationSchemesQueries queries) returns PageBeanFieldConfigurationScheme|error {
        string resourcePath = string `/rest/api/2/fieldconfigurationscheme`;
        map<Encoding> queryParamEncoding = {"id": {style: FORM, explode: true}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get field configuration issue type items
    #
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/fieldconfigurationscheme/mapping(map<string|string[]> headers = {}, *GetFieldConfigurationSchemeMappingsQueries queries) returns PageBeanFieldConfigurationIssueTypeItem|error {
        string resourcePath = string `/rest/api/2/fieldconfigurationscheme/mapping`;
        map<Encoding> queryParamEncoding = {"fieldConfigurationSchemeId": {style: FORM, explode: true}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get field configuration schemes for projects
    #
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/fieldconfigurationscheme/project(map<string|string[]> headers = {}, *GetFieldConfigurationSchemeProjectMappingQueries queries) returns PageBeanFieldConfigurationSchemeProjects|error {
        string resourcePath = string `/rest/api/2/fieldconfigurationscheme/project`;
        map<Encoding> queryParamEncoding = {"projectId": {style: FORM, explode: true}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Assign field configuration scheme to project
    #
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function put rest/api/'2/fieldconfigurationscheme/project(FieldConfigurationSchemeProjectAssociation payload, map<string|string[]> headers = {}) returns json|error {
        string resourcePath = string `/rest/api/2/fieldconfigurationscheme/project`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Get filters
    #
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    #
    # # Deprecated
    @deprecated
    resource isolated function get rest/api/'2/filter(map<string|string[]> headers = {}, *GetFiltersQueries queries) returns Filter[]|error {
        string resourcePath = string `/rest/api/2/filter`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Create filter
    #
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + payload - The filter to create.
    # + return - Returned if the request is successful.
    resource isolated function post rest/api/'2/filter(Filter payload, map<string|string[]> headers = {}, *CreateFilterQueries queries) returns Filter|error {
        string resourcePath = string `/rest/api/2/filter`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get default share scope
    #
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/filter/defaultShareScope(map<string|string[]> headers = {}) returns DefaultShareScope|error {
        string resourcePath = string `/rest/api/2/filter/defaultShareScope`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Set default share scope
    #
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function put rest/api/'2/filter/defaultShareScope(DefaultShareScope payload, map<string|string[]> headers = {}) returns DefaultShareScope|error {
        string resourcePath = string `/rest/api/2/filter/defaultShareScope`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Get favorite filters
    #
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/filter/favourite(map<string|string[]> headers = {}, *GetFavouriteFiltersQueries queries) returns Filter[]|error {
        string resourcePath = string `/rest/api/2/filter/favourite`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get my filters
    #
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/filter/my(map<string|string[]> headers = {}, *GetMyFiltersQueries queries) returns Filter[]|error {
        string resourcePath = string `/rest/api/2/filter/my`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Search for filters
    #
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/filter/search(map<string|string[]> headers = {}, *GetFiltersPaginatedQueries queries) returns PageBeanFilterDetails|error {
        string resourcePath = string `/rest/api/2/filter/search`;
        map<Encoding> queryParamEncoding = {"id": {style: FORM, explode: true}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get filter
    #
    # + id - The ID of the filter to return.
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/filter/[int id](map<string|string[]> headers = {}, *GetFilterQueries queries) returns Filter|error {
        string resourcePath = string `/rest/api/2/filter/${getEncodedUri(id)}`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update filter
    #
    # + id - The ID of the filter to update.
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + payload - The filter to update.
    # + return - Returned if the request is successful.
    resource isolated function put rest/api/'2/filter/[int id](Filter payload, map<string|string[]> headers = {}, *UpdateFilterQueries queries) returns Filter|error {
        string resourcePath = string `/rest/api/2/filter/${getEncodedUri(id)}`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete filter
    #
    # + id - The ID of the filter to delete.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function delete rest/api/'2/filter/[int id](map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/rest/api/2/filter/${getEncodedUri(id)}`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Get columns
    #
    # + id - The ID of the filter.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/filter/[int id]/columns(map<string|string[]> headers = {}) returns ColumnItem[]|error {
        string resourcePath = string `/rest/api/2/filter/${getEncodedUri(id)}/columns`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Set columns
    #
    # + id - The ID of the filter.
    # + headers - Headers to be sent with the request
    # + request - The IDs of the fields to set as columns. In the form data, specify each field as `columns=id`, where `id` is the *id* of a field (as seen in the response for [Get fields](#api-rest-api-<ver>-field-get)). For example, `columns=summary`.
    # + return - Returned if the request is successful.
    resource isolated function put rest/api/'2/filter/[int id]/columns(http:Request request, map<string|string[]> headers = {}) returns json|error {
        string resourcePath = string `/rest/api/2/filter/${getEncodedUri(id)}/columns`;
        // TODO: Update the request as needed;
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Reset columns
    #
    # + id - The ID of the filter.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function delete rest/api/'2/filter/[int id]/columns(map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/rest/api/2/filter/${getEncodedUri(id)}/columns`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Add filter as favorite
    #
    # + id - The ID of the filter.
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function put rest/api/'2/filter/[int id]/favourite(map<string|string[]> headers = {}, *SetFavouriteForFilterQueries queries) returns Filter|error {
        string resourcePath = string `/rest/api/2/filter/${getEncodedUri(id)}/favourite`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Remove filter as favorite
    #
    # + id - The ID of the filter.
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function delete rest/api/'2/filter/[int id]/favourite(map<string|string[]> headers = {}, *DeleteFavouriteForFilterQueries queries) returns Filter|error {
        string resourcePath = string `/rest/api/2/filter/${getEncodedUri(id)}/favourite`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Get share permissions
    #
    # + id - The ID of the filter.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/filter/[int id]/permission(map<string|string[]> headers = {}) returns SharePermission[]|error {
        string resourcePath = string `/rest/api/2/filter/${getEncodedUri(id)}/permission`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Add share permission
    #
    # + id - The ID of the filter.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function post rest/api/'2/filter/[int id]/permission(SharePermissionInputBean payload, map<string|string[]> headers = {}) returns SharePermission[]|error {
        string resourcePath = string `/rest/api/2/filter/${getEncodedUri(id)}/permission`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get share permission
    #
    # + id - The ID of the filter.
    # + permissionId - The ID of the share permission.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/filter/[int id]/permission/[int permissionId](map<string|string[]> headers = {}) returns SharePermission|error {
        string resourcePath = string `/rest/api/2/filter/${getEncodedUri(id)}/permission/${getEncodedUri(permissionId)}`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Delete share permission
    #
    # + id - The ID of the filter.
    # + permissionId - The ID of the share permission.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function delete rest/api/'2/filter/[int id]/permission/[int permissionId](map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/rest/api/2/filter/${getEncodedUri(id)}/permission/${getEncodedUri(permissionId)}`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Get group
    #
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    #
    # # Deprecated
    @deprecated
    resource isolated function get rest/api/'2/group(map<string|string[]> headers = {}, *GetGroupQueries queries) returns Group|error {
        string resourcePath = string `/rest/api/2/group`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Create group
    #
    # + headers - Headers to be sent with the request
    # + payload - The name of the group.
    # + return - Returned if the request is successful.
    resource isolated function post rest/api/'2/group(AddGroupBean payload, map<string|string[]> headers = {}) returns Group|error {
        string resourcePath = string `/rest/api/2/group`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Remove group
    #
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function delete rest/api/'2/group(map<string|string[]> headers = {}, *RemoveGroupQueries queries) returns error? {
        string resourcePath = string `/rest/api/2/group`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Bulk get groups
    #
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/group/bulk(map<string|string[]> headers = {}, *BulkGetGroupsQueries queries) returns PageBeanGroupDetails|error {
        string resourcePath = string `/rest/api/2/group/bulk`;
        map<Encoding> queryParamEncoding = {"groupId": {style: FORM, explode: true}, "groupName": {style: FORM, explode: true}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get users from group
    #
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/group/member(map<string|string[]> headers = {}, *GetUsersFromGroupQueries queries) returns PageBeanUserDetails|error {
        string resourcePath = string `/rest/api/2/group/member`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add user to group
    #
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + payload - The user to add to the group.
    # + return - Returned if the request is successful.
    resource isolated function post rest/api/'2/group/user(UpdateUserToGroupBean payload, map<string|string[]> headers = {}, *AddUserToGroupQueries queries) returns Group|error {
        string resourcePath = string `/rest/api/2/group/user`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Remove user from group
    #
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function delete rest/api/'2/group/user(map<string|string[]> headers = {}, *RemoveUserFromGroupQueries queries) returns error? {
        string resourcePath = string `/rest/api/2/group/user`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Find groups
    #
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/groups/picker(map<string|string[]> headers = {}, *FindGroupsQueries queries) returns FoundGroups|error {
        string resourcePath = string `/rest/api/2/groups/picker`;
        map<Encoding> queryParamEncoding = {"exclude": {style: FORM, explode: true}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Find users and groups
    #
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/groupuserpicker(map<string|string[]> headers = {}, *FindUsersAndGroupsQueries queries) returns FoundUsersAndGroups|error {
        string resourcePath = string `/rest/api/2/groupuserpicker`;
        map<Encoding> queryParamEncoding = {"projectId": {style: FORM, explode: true}, "issueTypeId": {style: FORM, explode: true}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get license
    #
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/instance/license(map<string|string[]> headers = {}) returns License|error {
        string resourcePath = string `/rest/api/2/instance/license`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Create issue
    #
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function post rest/api/'2/issue(IssueUpdateDetails payload, map<string|string[]> headers = {}, *CreateIssueQueries queries) returns CreatedIssue|error {
        string resourcePath = string `/rest/api/2/issue`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Bulk create issue
    #
    # + headers - Headers to be sent with the request
    # + return - Returned if any of the issue or subtask creation requests were successful. A request may be unsuccessful when it:  *  is missing required fields.  *  contains invalid field values.  *  contains fields that cannot be set for the issue type.  *  is by a user who does not have the necessary permission.  *  is to create a subtype in a project different that of the parent issue.  *  is for a subtask when the option to create subtasks is disabled.  *  is invalid for any other reason.
    resource isolated function post rest/api/'2/issue/bulk(IssuesUpdateBean payload, map<string|string[]> headers = {}) returns CreatedIssues|error {
        string resourcePath = string `/rest/api/2/issue/bulk`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get create issue metadata
    #
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/issue/createmeta(map<string|string[]> headers = {}, *GetCreateIssueMetaQueries queries) returns IssueCreateMetadata|error {
        string resourcePath = string `/rest/api/2/issue/createmeta`;
        map<Encoding> queryParamEncoding = {"projectIds": {style: FORM, explode: true}, "projectKeys": {style: FORM, explode: true}, "issuetypeIds": {style: FORM, explode: true}, "issuetypeNames": {style: FORM, explode: true}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get issue picker suggestions
    #
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/issue/picker(map<string|string[]> headers = {}, *GetIssuePickerResourceQueries queries) returns IssuePickerSuggestions|error {
        string resourcePath = string `/rest/api/2/issue/picker`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Bulk set issues properties
    #
    # + headers - Headers to be sent with the request
    # + payload - Issue properties to be set or updated with values.
    # + return - Returned if the operation is successful.
    resource isolated function post rest/api/'2/issue/properties(IssueEntityProperties payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/rest/api/2/issue/properties`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Bulk set issue property
    #
    # + propertyKey - The key of the property. The maximum length is 255 characters.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function put rest/api/'2/issue/properties/[string propertyKey](BulkIssuePropertyUpdateRequest payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/rest/api/2/issue/properties/${getEncodedUri(propertyKey)}`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Bulk delete issue property
    #
    # + propertyKey - The key of the property.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function delete rest/api/'2/issue/properties/[string propertyKey](map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/rest/api/2/issue/properties/${getEncodedUri(propertyKey)}`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Get issue
    #
    # + issueIdOrKey - The ID or key of the issue.
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/issue/[string issueIdOrKey](map<string|string[]> headers = {}, *GetIssueQueries queries) returns IssueBean|error {
        string resourcePath = string `/rest/api/2/issue/${getEncodedUri(issueIdOrKey)}`;
        map<Encoding> queryParamEncoding = {"fields": {style: FORM, explode: true}, "properties": {style: FORM, explode: true}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Edit issue
    #
    # + issueIdOrKey - The ID or key of the issue.
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function put rest/api/'2/issue/[string issueIdOrKey](IssueUpdateDetails payload, map<string|string[]> headers = {}, *EditIssueQueries queries) returns json|error {
        string resourcePath = string `/rest/api/2/issue/${getEncodedUri(issueIdOrKey)}`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete issue
    #
    # + issueIdOrKey - The ID or key of the issue.
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function delete rest/api/'2/issue/[string issueIdOrKey](map<string|string[]> headers = {}, *DeleteIssueQueries queries) returns error? {
        string resourcePath = string `/rest/api/2/issue/${getEncodedUri(issueIdOrKey)}`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Assign issue
    #
    # + issueIdOrKey - The ID or key of the issue to be assigned.
    # + headers - Headers to be sent with the request
    # + payload - The request object with the user that the issue is assigned to.
    # + return - Returned if the request is successful.
    resource isolated function put rest/api/'2/issue/[string issueIdOrKey]/assignee(User payload, map<string|string[]> headers = {}) returns json|error {
        string resourcePath = string `/rest/api/2/issue/${getEncodedUri(issueIdOrKey)}/assignee`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Add attachment
    #
    # + issueIdOrKey - The ID or key of the issue that attachments are added to.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function post rest/api/'2/issue/[string issueIdOrKey]/attachments(record {byte[] fileContent; string fileName;} payload, map<string|string[]> headers = {}) returns Attachment[]|error {
        string resourcePath = string `/rest/api/2/issue/${getEncodedUri(issueIdOrKey)}/attachments`;
        http:Request request = new;
        mime:Entity[] bodyParts = check createBodyParts(check jsondata:toJson(payload).ensureType());
        request.setBodyParts(bodyParts);
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get change logs
    #
    # + issueIdOrKey - The ID or key of the issue.
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/issue/[string issueIdOrKey]/changelog(map<string|string[]> headers = {}, *GetChangeLogsQueries queries) returns PageBeanChangelog|error {
        string resourcePath = string `/rest/api/2/issue/${getEncodedUri(issueIdOrKey)}/changelog`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get comments
    #
    # + issueIdOrKey - The ID or key of the issue.
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/issue/[string issueIdOrKey]/comment(map<string|string[]> headers = {}, *GetCommentsQueries queries) returns PageOfComments|error {
        string resourcePath = string `/rest/api/2/issue/${getEncodedUri(issueIdOrKey)}/comment`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add comment
    #
    # + issueIdOrKey - The ID or key of the issue.
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function post rest/api/'2/issue/[string issueIdOrKey]/comment(Comment payload, map<string|string[]> headers = {}, *AddCommentQueries queries) returns Comment|error {
        string resourcePath = string `/rest/api/2/issue/${getEncodedUri(issueIdOrKey)}/comment`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get comment
    #
    # + issueIdOrKey - The ID or key of the issue.
    # + id - The ID of the comment.
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/issue/[string issueIdOrKey]/comment/[string id](map<string|string[]> headers = {}, *GetCommentQueries queries) returns Comment|error {
        string resourcePath = string `/rest/api/2/issue/${getEncodedUri(issueIdOrKey)}/comment/${getEncodedUri(id)}`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update comment
    #
    # + issueIdOrKey - The ID or key of the issue.
    # + id - The ID of the comment.
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function put rest/api/'2/issue/[string issueIdOrKey]/comment/[string id](Comment payload, map<string|string[]> headers = {}, *UpdateCommentQueries queries) returns Comment|error {
        string resourcePath = string `/rest/api/2/issue/${getEncodedUri(issueIdOrKey)}/comment/${getEncodedUri(id)}`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete comment
    #
    # + issueIdOrKey - The ID or key of the issue.
    # + id - The ID of the comment.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function delete rest/api/'2/issue/[string issueIdOrKey]/comment/[string id](map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/rest/api/2/issue/${getEncodedUri(issueIdOrKey)}/comment/${getEncodedUri(id)}`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Get edit issue metadata
    #
    # + issueIdOrKey - The ID or key of the issue.
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/issue/[string issueIdOrKey]/editmeta(map<string|string[]> headers = {}, *GetEditIssueMetaQueries queries) returns IssueUpdateMetadata|error {
        string resourcePath = string `/rest/api/2/issue/${getEncodedUri(issueIdOrKey)}/editmeta`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Send notification for issue
    #
    # + issueIdOrKey - ID or key of the issue that the notification is sent for.
    # + headers - Headers to be sent with the request
    # + payload - The request object for the notification and recipients.
    # + return - Returned if the email is queued for sending.
    resource isolated function post rest/api/'2/issue/[string issueIdOrKey]/notify(Notification payload, map<string|string[]> headers = {}) returns json|error {
        string resourcePath = string `/rest/api/2/issue/${getEncodedUri(issueIdOrKey)}/notify`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get issue property keys
    #
    # + issueIdOrKey - The key or ID of the issue.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/issue/[string issueIdOrKey]/properties(map<string|string[]> headers = {}) returns PropertyKeys|error {
        string resourcePath = string `/rest/api/2/issue/${getEncodedUri(issueIdOrKey)}/properties`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Get issue property
    #
    # + issueIdOrKey - The key or ID of the issue.
    # + propertyKey - The key of the property.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/issue/[string issueIdOrKey]/properties/[string propertyKey](map<string|string[]> headers = {}) returns EntityProperty|error {
        string resourcePath = string `/rest/api/2/issue/${getEncodedUri(issueIdOrKey)}/properties/${getEncodedUri(propertyKey)}`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Set issue property
    #
    # + issueIdOrKey - The ID or key of the issue.
    # + propertyKey - The key of the issue property. The maximum length is 255 characters.
    # + headers - Headers to be sent with the request
    # + return - Returned if the issue property is updated.
    resource isolated function put rest/api/'2/issue/[string issueIdOrKey]/properties/[string propertyKey](json payload, map<string|string[]> headers = {}) returns json|error {
        string resourcePath = string `/rest/api/2/issue/${getEncodedUri(issueIdOrKey)}/properties/${getEncodedUri(propertyKey)}`;
        http:Request request = new;
        request.setPayload(payload, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete issue property
    #
    # + issueIdOrKey - The key or ID of the issue.
    # + propertyKey - The key of the property.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function delete rest/api/'2/issue/[string issueIdOrKey]/properties/[string propertyKey](map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/rest/api/2/issue/${getEncodedUri(issueIdOrKey)}/properties/${getEncodedUri(propertyKey)}`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Get remote issue links
    #
    # + issueIdOrKey - The ID or key of the issue.
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/issue/[string issueIdOrKey]/remotelink(map<string|string[]> headers = {}, *GetRemoteIssueLinksQueries queries) returns RemoteIssueLink|error {
        string resourcePath = string `/rest/api/2/issue/${getEncodedUri(issueIdOrKey)}/remotelink`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Create or update remote issue link
    #
    # + issueIdOrKey - The ID or key of the issue.
    # + headers - Headers to be sent with the request
    # + return - Returned if the remote issue link is updated.
    resource isolated function post rest/api/'2/issue/[string issueIdOrKey]/remotelink(RemoteIssueLinkRequest payload, map<string|string[]> headers = {}) returns RemoteIssueLinkIdentifies|error {
        string resourcePath = string `/rest/api/2/issue/${getEncodedUri(issueIdOrKey)}/remotelink`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Delete remote issue link by global ID
    #
    # + issueIdOrKey - The ID or key of the issue.
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function delete rest/api/'2/issue/[string issueIdOrKey]/remotelink(map<string|string[]> headers = {}, *DeleteRemoteIssueLinkByGlobalIdQueries queries) returns error? {
        string resourcePath = string `/rest/api/2/issue/${getEncodedUri(issueIdOrKey)}/remotelink`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Get remote issue link by ID
    #
    # + issueIdOrKey - The ID or key of the issue.
    # + linkId - The ID of the remote issue link.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/issue/[string issueIdOrKey]/remotelink/[string linkId](map<string|string[]> headers = {}) returns RemoteIssueLink|error {
        string resourcePath = string `/rest/api/2/issue/${getEncodedUri(issueIdOrKey)}/remotelink/${getEncodedUri(linkId)}`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Update remote issue link by ID
    #
    # + issueIdOrKey - The ID or key of the issue.
    # + linkId - The ID of the remote issue link.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function put rest/api/'2/issue/[string issueIdOrKey]/remotelink/[string linkId](RemoteIssueLinkRequest payload, map<string|string[]> headers = {}) returns json|error {
        string resourcePath = string `/rest/api/2/issue/${getEncodedUri(issueIdOrKey)}/remotelink/${getEncodedUri(linkId)}`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete remote issue link by ID
    #
    # + issueIdOrKey - The ID or key of the issue.
    # + linkId - The ID of a remote issue link.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function delete rest/api/'2/issue/[string issueIdOrKey]/remotelink/[string linkId](map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/rest/api/2/issue/${getEncodedUri(issueIdOrKey)}/remotelink/${getEncodedUri(linkId)}`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Get transitions
    #
    # + issueIdOrKey - The ID or key of the issue.
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/issue/[string issueIdOrKey]/transitions(map<string|string[]> headers = {}, *GetTransitionsQueries queries) returns Transitions|error {
        string resourcePath = string `/rest/api/2/issue/${getEncodedUri(issueIdOrKey)}/transitions`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Transition issue
    #
    # + issueIdOrKey - The ID or key of the issue.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function post rest/api/'2/issue/[string issueIdOrKey]/transitions(IssueUpdateDetails payload, map<string|string[]> headers = {}) returns json|error {
        string resourcePath = string `/rest/api/2/issue/${getEncodedUri(issueIdOrKey)}/transitions`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get votes
    #
    # + issueIdOrKey - The ID or key of the issue.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/issue/[string issueIdOrKey]/votes(map<string|string[]> headers = {}) returns Votes|error {
        string resourcePath = string `/rest/api/2/issue/${getEncodedUri(issueIdOrKey)}/votes`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Add vote
    #
    # + issueIdOrKey - The ID or key of the issue.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function post rest/api/'2/issue/[string issueIdOrKey]/votes(map<string|string[]> headers = {}) returns json|error {
        string resourcePath = string `/rest/api/2/issue/${getEncodedUri(issueIdOrKey)}/votes`;
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Delete vote
    #
    # + issueIdOrKey - The ID or key of the issue.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function delete rest/api/'2/issue/[string issueIdOrKey]/votes(map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/rest/api/2/issue/${getEncodedUri(issueIdOrKey)}/votes`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Get issue watchers
    #
    # + issueIdOrKey - The ID or key of the issue.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful
    resource isolated function get rest/api/'2/issue/[string issueIdOrKey]/watchers(map<string|string[]> headers = {}) returns Watchers|error {
        string resourcePath = string `/rest/api/2/issue/${getEncodedUri(issueIdOrKey)}/watchers`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Add watcher
    #
    # + issueIdOrKey - The ID or key of the issue.
    # + headers - Headers to be sent with the request
    # + payload - The account ID of the user. Note that username cannot be used due to privacy changes.
    # + return - Returned if the request is successful.
    resource isolated function post rest/api/'2/issue/[string issueIdOrKey]/watchers(string payload, map<string|string[]> headers = {}) returns json|error {
        string resourcePath = string `/rest/api/2/issue/${getEncodedUri(issueIdOrKey)}/watchers`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Delete watcher
    #
    # + issueIdOrKey - The ID or key of the issue.
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function delete rest/api/'2/issue/[string issueIdOrKey]/watchers(map<string|string[]> headers = {}, *RemoveWatcherQueries queries) returns error? {
        string resourcePath = string `/rest/api/2/issue/${getEncodedUri(issueIdOrKey)}/watchers`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Get issue worklogs
    #
    # + issueIdOrKey - The ID or key of the issue.
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful
    resource isolated function get rest/api/'2/issue/[string issueIdOrKey]/worklog(map<string|string[]> headers = {}, *GetIssueWorklogQueries queries) returns PageOfWorklogs|error {
        string resourcePath = string `/rest/api/2/issue/${getEncodedUri(issueIdOrKey)}/worklog`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add worklog
    #
    # + issueIdOrKey - The ID or key the issue.
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function post rest/api/'2/issue/[string issueIdOrKey]/worklog(Worklog payload, map<string|string[]> headers = {}, *AddWorklogQueries queries) returns Worklog|error {
        string resourcePath = string `/rest/api/2/issue/${getEncodedUri(issueIdOrKey)}/worklog`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get worklog
    #
    # + issueIdOrKey - The ID or key of the issue.
    # + id - The ID of the worklog.
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/issue/[string issueIdOrKey]/worklog/[string id](map<string|string[]> headers = {}, *GetWorklogQueries queries) returns Worklog|error {
        string resourcePath = string `/rest/api/2/issue/${getEncodedUri(issueIdOrKey)}/worklog/${getEncodedUri(id)}`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update worklog
    #
    # + issueIdOrKey - The ID or key the issue.
    # + id - The ID of the worklog.
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful
    resource isolated function put rest/api/'2/issue/[string issueIdOrKey]/worklog/[string id](Worklog payload, map<string|string[]> headers = {}, *UpdateWorklogQueries queries) returns Worklog|error {
        string resourcePath = string `/rest/api/2/issue/${getEncodedUri(issueIdOrKey)}/worklog/${getEncodedUri(id)}`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete worklog
    #
    # + issueIdOrKey - The ID or key of the issue.
    # + id - The ID of the worklog.
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function delete rest/api/'2/issue/[string issueIdOrKey]/worklog/[string id](map<string|string[]> headers = {}, *DeleteWorklogQueries queries) returns error? {
        string resourcePath = string `/rest/api/2/issue/${getEncodedUri(issueIdOrKey)}/worklog/${getEncodedUri(id)}`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Get worklog property keys
    #
    # + issueIdOrKey - The ID or key of the issue.
    # + worklogId - The ID of the worklog.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/issue/[string issueIdOrKey]/worklog/[string worklogId]/properties(map<string|string[]> headers = {}) returns PropertyKeys|error {
        string resourcePath = string `/rest/api/2/issue/${getEncodedUri(issueIdOrKey)}/worklog/${getEncodedUri(worklogId)}/properties`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Get worklog property
    #
    # + issueIdOrKey - The ID or key of the issue.
    # + worklogId - The ID of the worklog.
    # + propertyKey - The key of the property.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/issue/[string issueIdOrKey]/worklog/[string worklogId]/properties/[string propertyKey](map<string|string[]> headers = {}) returns EntityProperty|error {
        string resourcePath = string `/rest/api/2/issue/${getEncodedUri(issueIdOrKey)}/worklog/${getEncodedUri(worklogId)}/properties/${getEncodedUri(propertyKey)}`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Set worklog property
    #
    # + issueIdOrKey - The ID or key of the issue.
    # + worklogId - The ID of the worklog.
    # + propertyKey - The key of the issue property. The maximum length is 255 characters.
    # + headers - Headers to be sent with the request
    # + return - Returned if the worklog property is updated.
    resource isolated function put rest/api/'2/issue/[string issueIdOrKey]/worklog/[string worklogId]/properties/[string propertyKey](json payload, map<string|string[]> headers = {}) returns json|error {
        string resourcePath = string `/rest/api/2/issue/${getEncodedUri(issueIdOrKey)}/worklog/${getEncodedUri(worklogId)}/properties/${getEncodedUri(propertyKey)}`;
        http:Request request = new;
        request.setPayload(payload, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete worklog property
    #
    # + issueIdOrKey - The ID or key of the issue.
    # + worklogId - The ID of the worklog.
    # + propertyKey - The key of the property.
    # + headers - Headers to be sent with the request
    # + return - Returned if the worklog property is removed.
    resource isolated function delete rest/api/'2/issue/[string issueIdOrKey]/worklog/[string worklogId]/properties/[string propertyKey](map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/rest/api/2/issue/${getEncodedUri(issueIdOrKey)}/worklog/${getEncodedUri(worklogId)}/properties/${getEncodedUri(propertyKey)}`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Create issue link
    #
    # + headers - Headers to be sent with the request
    # + payload - The issue link request.
    # + return - Returned if the request is successful.
    resource isolated function post rest/api/'2/issueLink(LinkIssueRequestJsonBean payload, map<string|string[]> headers = {}) returns json|error {
        string resourcePath = string `/rest/api/2/issueLink`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get issue link
    #
    # + linkId - The ID of the issue link.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/issueLink/[string linkId](map<string|string[]> headers = {}) returns IssueLink|error {
        string resourcePath = string `/rest/api/2/issueLink/${getEncodedUri(linkId)}`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Delete issue link
    #
    # + linkId - The ID of the issue link.
    # + headers - Headers to be sent with the request
    # + return - 200 response
    resource isolated function delete rest/api/'2/issueLink/[string linkId](map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/rest/api/2/issueLink/${getEncodedUri(linkId)}`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Get issue link types
    #
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/issueLinkType(map<string|string[]> headers = {}) returns IssueLinkTypes|error {
        string resourcePath = string `/rest/api/2/issueLinkType`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Create issue link type
    #
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function post rest/api/'2/issueLinkType(IssueLinkType payload, map<string|string[]> headers = {}) returns IssueLinkType|error {
        string resourcePath = string `/rest/api/2/issueLinkType`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get issue link type
    #
    # + issueLinkTypeId - The ID of the issue link type.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/issueLinkType/[string issueLinkTypeId](map<string|string[]> headers = {}) returns IssueLinkType|error {
        string resourcePath = string `/rest/api/2/issueLinkType/${getEncodedUri(issueLinkTypeId)}`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Update issue link type
    #
    # + issueLinkTypeId - The ID of the issue link type.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function put rest/api/'2/issueLinkType/[string issueLinkTypeId](IssueLinkType payload, map<string|string[]> headers = {}) returns IssueLinkType|error {
        string resourcePath = string `/rest/api/2/issueLinkType/${getEncodedUri(issueLinkTypeId)}`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete issue link type
    #
    # + issueLinkTypeId - The ID of the issue link type.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function delete rest/api/'2/issueLinkType/[string issueLinkTypeId](map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/rest/api/2/issueLinkType/${getEncodedUri(issueLinkTypeId)}`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Get issue security schemes
    #
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/issuesecurityschemes(map<string|string[]> headers = {}) returns SecuritySchemes|error {
        string resourcePath = string `/rest/api/2/issuesecurityschemes`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Get issue security scheme
    #
    # + id - The ID of the issue security scheme. Use the [Get issue security schemes](#api-rest-api-2-issuesecurityschemes-get) operation to get a list of issue security scheme IDs.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/issuesecurityschemes/[int id](map<string|string[]> headers = {}) returns SecurityScheme|error {
        string resourcePath = string `/rest/api/2/issuesecurityschemes/${getEncodedUri(id)}`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Get issue security level members
    #
    # + issueSecuritySchemeId - The ID of the issue security scheme. Use the [Get issue security schemes](#api-rest-api-2-issuesecurityschemes-get) operation to get a list of issue security scheme IDs.
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/issuesecurityschemes/[int issueSecuritySchemeId]/members(map<string|string[]> headers = {}, *GetIssueSecurityLevelMembersQueries queries) returns PageBeanIssueSecurityLevelMember|error {
        string resourcePath = string `/rest/api/2/issuesecurityschemes/${getEncodedUri(issueSecuritySchemeId)}/members`;
        map<Encoding> queryParamEncoding = {"issueSecurityLevelId": {style: FORM, explode: true}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get all issue types for user
    #
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/issuetype(map<string|string[]> headers = {}) returns IssueTypeDetails[]|error {
        string resourcePath = string `/rest/api/2/issuetype`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Create issue type
    #
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function post rest/api/'2/issuetype(IssueTypeCreateBean payload, map<string|string[]> headers = {}) returns IssueTypeDetails|error {
        string resourcePath = string `/rest/api/2/issuetype`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get issue type
    #
    # + id - The ID of the issue type.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/issuetype/[string id](map<string|string[]> headers = {}) returns IssueTypeDetails|error {
        string resourcePath = string `/rest/api/2/issuetype/${getEncodedUri(id)}`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Update issue type
    #
    # + id - The ID of the issue type.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function put rest/api/'2/issuetype/[string id](IssueTypeUpdateBean payload, map<string|string[]> headers = {}) returns IssueTypeDetails|error {
        string resourcePath = string `/rest/api/2/issuetype/${getEncodedUri(id)}`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete issue type
    #
    # + id - The ID of the issue type.
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function delete rest/api/'2/issuetype/[string id](map<string|string[]> headers = {}, *DeleteIssueTypeQueries queries) returns error? {
        string resourcePath = string `/rest/api/2/issuetype/${getEncodedUri(id)}`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Get alternative issue types
    #
    # + id - The ID of the issue type.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/issuetype/[string id]/alternatives(map<string|string[]> headers = {}) returns IssueTypeDetails[]|error {
        string resourcePath = string `/rest/api/2/issuetype/${getEncodedUri(id)}/alternatives`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Load issue type avatar
    #
    # + id - The ID of the issue type.
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function post rest/api/'2/issuetype/[string id]/avatar2(http:Request request, map<string|string[]> headers = {}, *CreateIssueTypeAvatarQueries queries) returns Avatar|error {
        string resourcePath = string `/rest/api/2/issuetype/${getEncodedUri(id)}/avatar2`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        // TODO: Update the request as needed;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get issue type property keys
    #
    # + issueTypeId - The ID of the issue type.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/issuetype/[string issueTypeId]/properties(map<string|string[]> headers = {}) returns PropertyKeys|error {
        string resourcePath = string `/rest/api/2/issuetype/${getEncodedUri(issueTypeId)}/properties`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Get issue type property
    #
    # + issueTypeId - The ID of the issue type.
    # + propertyKey - The key of the property. Use [Get issue type property keys](#api-rest-api-2-issuetype-issueTypeId-properties-get) to get a list of all issue type property keys.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/issuetype/[string issueTypeId]/properties/[string propertyKey](map<string|string[]> headers = {}) returns EntityProperty|error {
        string resourcePath = string `/rest/api/2/issuetype/${getEncodedUri(issueTypeId)}/properties/${getEncodedUri(propertyKey)}`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Set issue type property
    #
    # + issueTypeId - The ID of the issue type.
    # + propertyKey - The key of the issue type property. The maximum length is 255 characters.
    # + headers - Headers to be sent with the request
    # + return - Returned if the issue type property is updated.
    resource isolated function put rest/api/'2/issuetype/[string issueTypeId]/properties/[string propertyKey](json payload, map<string|string[]> headers = {}) returns json|error {
        string resourcePath = string `/rest/api/2/issuetype/${getEncodedUri(issueTypeId)}/properties/${getEncodedUri(propertyKey)}`;
        http:Request request = new;
        request.setPayload(payload, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete issue type property
    #
    # + issueTypeId - The ID of the issue type.
    # + propertyKey - The key of the property. Use [Get issue type property keys](#api-rest-api-2-issuetype-issueTypeId-properties-get) to get a list of all issue type property keys.
    # + headers - Headers to be sent with the request
    # + return - Returned if the issue type property is deleted.
    resource isolated function delete rest/api/'2/issuetype/[string issueTypeId]/properties/[string propertyKey](map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/rest/api/2/issuetype/${getEncodedUri(issueTypeId)}/properties/${getEncodedUri(propertyKey)}`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Get all issue type schemes
    #
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/issuetypescheme(map<string|string[]> headers = {}, *GetAllIssueTypeSchemesQueries queries) returns PageBeanIssueTypeScheme|error {
        string resourcePath = string `/rest/api/2/issuetypescheme`;
        map<Encoding> queryParamEncoding = {"id": {style: FORM, explode: true}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Create issue type scheme
    #
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function post rest/api/'2/issuetypescheme(IssueTypeSchemeDetails payload, map<string|string[]> headers = {}) returns IssueTypeSchemeID|error {
        string resourcePath = string `/rest/api/2/issuetypescheme`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get issue type scheme items
    #
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/issuetypescheme/mapping(map<string|string[]> headers = {}, *GetIssueTypeSchemesMappingQueries queries) returns PageBeanIssueTypeSchemeMapping|error {
        string resourcePath = string `/rest/api/2/issuetypescheme/mapping`;
        map<Encoding> queryParamEncoding = {"issueTypeSchemeId": {style: FORM, explode: true}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get issue type schemes for projects
    #
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/issuetypescheme/project(map<string|string[]> headers = {}, *GetIssueTypeSchemeForProjectsQueries queries) returns PageBeanIssueTypeSchemeProjects|error {
        string resourcePath = string `/rest/api/2/issuetypescheme/project`;
        map<Encoding> queryParamEncoding = {"projectId": {style: FORM, explode: true}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Assign issue type scheme to project
    #
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function put rest/api/'2/issuetypescheme/project(IssueTypeSchemeProjectAssociation payload, map<string|string[]> headers = {}) returns json|error {
        string resourcePath = string `/rest/api/2/issuetypescheme/project`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Update issue type scheme
    #
    # + issueTypeSchemeId - The ID of the issue type scheme.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function put rest/api/'2/issuetypescheme/[int issueTypeSchemeId](IssueTypeSchemeUpdateDetails payload, map<string|string[]> headers = {}) returns json|error {
        string resourcePath = string `/rest/api/2/issuetypescheme/${getEncodedUri(issueTypeSchemeId)}`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete issue type scheme
    #
    # + issueTypeSchemeId - The ID of the issue type scheme.
    # + headers - Headers to be sent with the request
    # + return - Returned if the issue type scheme is deleted.
    resource isolated function delete rest/api/'2/issuetypescheme/[int issueTypeSchemeId](map<string|string[]> headers = {}) returns json|error {
        string resourcePath = string `/rest/api/2/issuetypescheme/${getEncodedUri(issueTypeSchemeId)}`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Add issue types to issue type scheme
    #
    # + issueTypeSchemeId - The ID of the issue type scheme.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function put rest/api/'2/issuetypescheme/[int issueTypeSchemeId]/issuetype(IssueTypeIds payload, map<string|string[]> headers = {}) returns json|error {
        string resourcePath = string `/rest/api/2/issuetypescheme/${getEncodedUri(issueTypeSchemeId)}/issuetype`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Change order of issue types
    #
    # + issueTypeSchemeId - The ID of the issue type scheme.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function put rest/api/'2/issuetypescheme/[int issueTypeSchemeId]/issuetype/move(OrderOfIssueTypes payload, map<string|string[]> headers = {}) returns json|error {
        string resourcePath = string `/rest/api/2/issuetypescheme/${getEncodedUri(issueTypeSchemeId)}/issuetype/move`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Remove issue type from issue type scheme
    #
    # + issueTypeSchemeId - The ID of the issue type scheme.
    # + issueTypeId - The ID of the issue type.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function delete rest/api/'2/issuetypescheme/[int issueTypeSchemeId]/issuetype/[int issueTypeId](map<string|string[]> headers = {}) returns json|error {
        string resourcePath = string `/rest/api/2/issuetypescheme/${getEncodedUri(issueTypeSchemeId)}/issuetype/${getEncodedUri(issueTypeId)}`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Get issue type screen schemes
    #
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/issuetypescreenscheme(map<string|string[]> headers = {}, *GetIssueTypeScreenSchemesQueries queries) returns PageBeanIssueTypeScreenScheme|error {
        string resourcePath = string `/rest/api/2/issuetypescreenscheme`;
        map<Encoding> queryParamEncoding = {"id": {style: FORM, explode: true}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Create issue type screen scheme
    #
    # + headers - Headers to be sent with the request
    # + payload - An issue type screen scheme bean.
    # + return - Returned if the request is successful.
    resource isolated function post rest/api/'2/issuetypescreenscheme(IssueTypeScreenSchemeDetails payload, map<string|string[]> headers = {}) returns IssueTypeScreenSchemeId|error {
        string resourcePath = string `/rest/api/2/issuetypescreenscheme`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get issue type screen scheme items
    #
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/issuetypescreenscheme/mapping(map<string|string[]> headers = {}, *GetIssueTypeScreenSchemeMappingsQueries queries) returns PageBeanIssueTypeScreenSchemeItem|error {
        string resourcePath = string `/rest/api/2/issuetypescreenscheme/mapping`;
        map<Encoding> queryParamEncoding = {"issueTypeScreenSchemeId": {style: FORM, explode: true}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get issue type screen schemes for projects
    #
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/issuetypescreenscheme/project(map<string|string[]> headers = {}, *GetIssueTypeScreenSchemeProjectAssociationsQueries queries) returns PageBeanIssueTypeScreenSchemesProjects|error {
        string resourcePath = string `/rest/api/2/issuetypescreenscheme/project`;
        map<Encoding> queryParamEncoding = {"projectId": {style: FORM, explode: true}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Assign issue type screen scheme to project
    #
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function put rest/api/'2/issuetypescreenscheme/project(IssueTypeScreenSchemeProjectAssociation payload, map<string|string[]> headers = {}) returns json|error {
        string resourcePath = string `/rest/api/2/issuetypescreenscheme/project`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Update issue type screen scheme
    #
    # + issueTypeScreenSchemeId - The ID of the issue type screen scheme.
    # + headers - Headers to be sent with the request
    # + payload - The issue type screen scheme update details.
    # + return - Returned if the request is successful.
    resource isolated function put rest/api/'2/issuetypescreenscheme/[string issueTypeScreenSchemeId](IssueTypeScreenSchemeUpdateDetails payload, map<string|string[]> headers = {}) returns json|error {
        string resourcePath = string `/rest/api/2/issuetypescreenscheme/${getEncodedUri(issueTypeScreenSchemeId)}`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete issue type screen scheme
    #
    # + issueTypeScreenSchemeId - The ID of the issue type screen scheme.
    # + headers - Headers to be sent with the request
    # + return - Returned if the issue type screen scheme is deleted.
    resource isolated function delete rest/api/'2/issuetypescreenscheme/[string issueTypeScreenSchemeId](map<string|string[]> headers = {}) returns json|error {
        string resourcePath = string `/rest/api/2/issuetypescreenscheme/${getEncodedUri(issueTypeScreenSchemeId)}`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Append mappings to issue type screen scheme
    #
    # + issueTypeScreenSchemeId - The ID of the issue type screen scheme.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function put rest/api/'2/issuetypescreenscheme/[string issueTypeScreenSchemeId]/mapping(IssueTypeScreenSchemeMappingDetails payload, map<string|string[]> headers = {}) returns json|error {
        string resourcePath = string `/rest/api/2/issuetypescreenscheme/${getEncodedUri(issueTypeScreenSchemeId)}/mapping`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Update issue type screen scheme default screen scheme
    #
    # + issueTypeScreenSchemeId - The ID of the issue type screen scheme.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function put rest/api/'2/issuetypescreenscheme/[string issueTypeScreenSchemeId]/mapping/default(UpdateDefaultScreenScheme payload, map<string|string[]> headers = {}) returns json|error {
        string resourcePath = string `/rest/api/2/issuetypescreenscheme/${getEncodedUri(issueTypeScreenSchemeId)}/mapping/default`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Remove mappings from issue type screen scheme
    #
    # + issueTypeScreenSchemeId - The ID of the issue type screen scheme.
    # + headers - Headers to be sent with the request
    # + return - Returned if the screen scheme mappings are removed from the issue type screen scheme.
    resource isolated function post rest/api/'2/issuetypescreenscheme/[string issueTypeScreenSchemeId]/mapping/remove(IssueTypeIds payload, map<string|string[]> headers = {}) returns json|error {
        string resourcePath = string `/rest/api/2/issuetypescreenscheme/${getEncodedUri(issueTypeScreenSchemeId)}/mapping/remove`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get field reference data (GET)
    #
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/jql/autocompletedata(map<string|string[]> headers = {}) returns JQLReferenceData|error {
        string resourcePath = string `/rest/api/2/jql/autocompletedata`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Get field reference data (POST)
    #
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function post rest/api/'2/jql/autocompletedata(SearchAutoCompleteFilter payload, map<string|string[]> headers = {}) returns JQLReferenceData|error {
        string resourcePath = string `/rest/api/2/jql/autocompletedata`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get field auto complete suggestions
    #
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/jql/autocompletedata/suggestions(map<string|string[]> headers = {}, *GetFieldAutoCompleteForQueryStringQueries queries) returns AutoCompleteSuggestions|error {
        string resourcePath = string `/rest/api/2/jql/autocompletedata/suggestions`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Check issues against JQL
    #
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function post rest/api/'2/jql/'match(IssuesAndJQLQueries payload, map<string|string[]> headers = {}) returns IssueMatches|error {
        string resourcePath = string `/rest/api/2/jql/match`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Parse JQL query
    #
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function post rest/api/'2/jql/parse(JqlQueriesToParse payload, map<string|string[]> headers = {}, *ParseJqlQueriesQueries queries) returns ParsedJqlQueries|error {
        string resourcePath = string `/rest/api/2/jql/parse`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Convert user identifiers to account IDs in JQL queries
    #
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful. Note that the JQL queries are returned in the same order that they were passed.
    resource isolated function post rest/api/'2/jql/pdcleaner(JQLPersonalDataMigrationRequest payload, map<string|string[]> headers = {}) returns ConvertedJQLQueries|error {
        string resourcePath = string `/rest/api/2/jql/pdcleaner`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get all labels
    #
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/label(map<string|string[]> headers = {}, *GetAllLabelsQueries queries) returns PageBeanString|error {
        string resourcePath = string `/rest/api/2/label`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get my permissions
    #
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/mypermissions(map<string|string[]> headers = {}, *GetMyPermissionsQueries queries) returns Permissions|error {
        string resourcePath = string `/rest/api/2/mypermissions`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get preference
    #
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/mypreferences(map<string|string[]> headers = {}, *GetPreferenceQueries queries) returns string|error {
        string resourcePath = string `/rest/api/2/mypreferences`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Set preference
    #
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + payload - The value of the preference as a plain text string. The maximum length is 255 characters.
    # + return - Returned if the request is successful.
    resource isolated function put rest/api/'2/mypreferences(string payload, map<string|string[]> headers = {}, *SetPreferenceQueries queries) returns json|error {
        string resourcePath = string `/rest/api/2/mypreferences`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete preference
    #
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function delete rest/api/'2/mypreferences(map<string|string[]> headers = {}, *RemovePreferenceQueries queries) returns error? {
        string resourcePath = string `/rest/api/2/mypreferences`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Get locale
    #
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/mypreferences/locale(map<string|string[]> headers = {}) returns Locale|error {
        string resourcePath = string `/rest/api/2/mypreferences/locale`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Set locale
    #
    # + headers - Headers to be sent with the request
    # + payload - The locale defined in a LocaleBean.
    # + return - Returned if the request is successful.
    #
    # # Deprecated
    @deprecated
    resource isolated function put rest/api/'2/mypreferences/locale(Locale payload, map<string|string[]> headers = {}) returns json|error {
        string resourcePath = string `/rest/api/2/mypreferences/locale`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete locale
    #
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    #
    # # Deprecated
    @deprecated
    resource isolated function delete rest/api/'2/mypreferences/locale(map<string|string[]> headers = {}) returns json|error {
        string resourcePath = string `/rest/api/2/mypreferences/locale`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Get current user
    #
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/myself(map<string|string[]> headers = {}, *GetCurrentUserQueries queries) returns User|error {
        string resourcePath = string `/rest/api/2/myself`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get notification schemes paginated
    #
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful. Only returns notification schemes that the user has permission to access. An empty list is returned if the user lacks permission to access all notification schemes.
    resource isolated function get rest/api/'2/notificationscheme(map<string|string[]> headers = {}, *GetNotificationSchemesQueries queries) returns PageBeanNotificationScheme|error {
        string resourcePath = string `/rest/api/2/notificationscheme`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get notification scheme
    #
    # + id - The ID of the notification scheme. Use [Get notification schemes paginated](#api-rest-api-2-notificationscheme-get) to get a list of notification scheme IDs.
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/notificationscheme/[int id](map<string|string[]> headers = {}, *GetNotificationSchemeQueries queries) returns NotificationScheme|error {
        string resourcePath = string `/rest/api/2/notificationscheme/${getEncodedUri(id)}`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get all permissions
    #
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/permissions(map<string|string[]> headers = {}) returns Permissions|error {
        string resourcePath = string `/rest/api/2/permissions`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Get bulk permissions
    #
    # + headers - Headers to be sent with the request
    # + payload - Details of the permissions to check.
    # + return - Returned if the request is successful.
    resource isolated function post rest/api/'2/permissions/'check(BulkPermissionsRequestBean payload, map<string|string[]> headers = {}) returns BulkPermissionGrants|error {
        string resourcePath = string `/rest/api/2/permissions/check`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get permitted projects
    #
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function post rest/api/'2/permissions/project(PermissionsKeysBean payload, map<string|string[]> headers = {}) returns PermittedProjects|error {
        string resourcePath = string `/rest/api/2/permissions/project`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get all permission schemes
    #
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/permissionscheme(map<string|string[]> headers = {}, *GetAllPermissionSchemesQueries queries) returns PermissionSchemes|error {
        string resourcePath = string `/rest/api/2/permissionscheme`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Create permission scheme
    #
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + payload - The permission scheme to create.
    # + return - Returned if the permission scheme is created.
    resource isolated function post rest/api/'2/permissionscheme(PermissionScheme payload, map<string|string[]> headers = {}, *CreatePermissionSchemeQueries queries) returns PermissionScheme|error {
        string resourcePath = string `/rest/api/2/permissionscheme`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get permission scheme
    #
    # + schemeId - The ID of the permission scheme to return.
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/permissionscheme/[int schemeId](map<string|string[]> headers = {}, *GetPermissionSchemeQueries queries) returns PermissionScheme|error {
        string resourcePath = string `/rest/api/2/permissionscheme/${getEncodedUri(schemeId)}`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update permission scheme
    #
    # + schemeId - The ID of the permission scheme to update.
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the scheme is updated.
    resource isolated function put rest/api/'2/permissionscheme/[int schemeId](PermissionScheme payload, map<string|string[]> headers = {}, *UpdatePermissionSchemeQueries queries) returns PermissionScheme|error {
        string resourcePath = string `/rest/api/2/permissionscheme/${getEncodedUri(schemeId)}`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete permission scheme
    #
    # + schemeId - The ID of the permission scheme being deleted.
    # + headers - Headers to be sent with the request
    # + return - Returned if the permission scheme is deleted.
    resource isolated function delete rest/api/'2/permissionscheme/[int schemeId](map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/rest/api/2/permissionscheme/${getEncodedUri(schemeId)}`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Get permission scheme grants
    #
    # + schemeId - The ID of the permission scheme.
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/permissionscheme/[int schemeId]/permission(map<string|string[]> headers = {}, *GetPermissionSchemeGrantsQueries queries) returns PermissionGrants|error {
        string resourcePath = string `/rest/api/2/permissionscheme/${getEncodedUri(schemeId)}/permission`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Create permission grant
    #
    # + schemeId - The ID of the permission scheme in which to create a new permission grant.
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + payload - The permission grant to create.
    # + return - Returned if the scheme permission is created.
    resource isolated function post rest/api/'2/permissionscheme/[int schemeId]/permission(PermissionGrant payload, map<string|string[]> headers = {}, *CreatePermissionGrantQueries queries) returns PermissionGrant|error {
        string resourcePath = string `/rest/api/2/permissionscheme/${getEncodedUri(schemeId)}/permission`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get permission scheme grant
    #
    # + schemeId - The ID of the permission scheme.
    # + permissionId - The ID of the permission grant.
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/permissionscheme/[int schemeId]/permission/[int permissionId](map<string|string[]> headers = {}, *GetPermissionSchemeGrantQueries queries) returns PermissionGrant|error {
        string resourcePath = string `/rest/api/2/permissionscheme/${getEncodedUri(schemeId)}/permission/${getEncodedUri(permissionId)}`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Delete permission scheme grant
    #
    # + schemeId - The ID of the permission scheme to delete the permission grant from.
    # + permissionId - The ID of the permission grant to delete.
    # + headers - Headers to be sent with the request
    # + return - Returned if the permission grant is deleted.
    resource isolated function delete rest/api/'2/permissionscheme/[int schemeId]/permission/[int permissionId](map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/rest/api/2/permissionscheme/${getEncodedUri(schemeId)}/permission/${getEncodedUri(permissionId)}`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Get priorities
    #
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/priority(map<string|string[]> headers = {}) returns Priority[]|error {
        string resourcePath = string `/rest/api/2/priority`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Get priority
    #
    # + id - The ID of the issue priority.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/priority/[string id](map<string|string[]> headers = {}) returns Priority|error {
        string resourcePath = string `/rest/api/2/priority/${getEncodedUri(id)}`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Get all projects
    #
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    #
    # # Deprecated
    @deprecated
    resource isolated function get rest/api/'2/project(map<string|string[]> headers = {}, *GetAllProjectsQueries queries) returns Project[]|error {
        string resourcePath = string `/rest/api/2/project`;
        map<Encoding> queryParamEncoding = {"properties": {style: FORM, explode: true}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Create project
    #
    # + headers - Headers to be sent with the request
    # + payload - The JSON representation of the project being created.
    # + return - Returned if the project is created.
    resource isolated function post rest/api/'2/project(ProjectInputBean payload, map<string|string[]> headers = {}) returns ProjectIdentifiers|error {
        string resourcePath = string `/rest/api/2/project`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get projects paginated
    #
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/project/search(map<string|string[]> headers = {}, *SearchProjectsQueries queries) returns PageBeanProject|error {
        string resourcePath = string `/rest/api/2/project/search`;
        map<Encoding> queryParamEncoding = {"status": {style: FORM, explode: true}, "properties": {style: FORM, explode: true}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get all project types
    #
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/project/'type(map<string|string[]> headers = {}) returns ProjectType[]|error {
        string resourcePath = string `/rest/api/2/project/type`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Get licensed project types
    #
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/project/'type/accessible(map<string|string[]> headers = {}) returns ProjectType[]|error {
        string resourcePath = string `/rest/api/2/project/type/accessible`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Get project type by key
    #
    # + projectTypeKey - The key of the project type.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/project/'type/["software"|"service_desk"|"business" projectTypeKey](map<string|string[]> headers = {}) returns ProjectType|error {
        string resourcePath = string `/rest/api/2/project/type/${getEncodedUri(projectTypeKey)}`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Get accessible project type by key
    #
    # + projectTypeKey - The key of the project type.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/project/'type/["software"|"service_desk"|"business" projectTypeKey]/accessible(map<string|string[]> headers = {}) returns ProjectType|error {
        string resourcePath = string `/rest/api/2/project/type/${getEncodedUri(projectTypeKey)}/accessible`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Get project
    #
    # + projectIdOrKey - The project ID or project key (case sensitive).
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if successful.
    resource isolated function get rest/api/'2/project/[string projectIdOrKey](map<string|string[]> headers = {}, *GetProjectQueries queries) returns Project|error {
        string resourcePath = string `/rest/api/2/project/${getEncodedUri(projectIdOrKey)}`;
        map<Encoding> queryParamEncoding = {"properties": {style: FORM, explode: true}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update project
    #
    # + projectIdOrKey - The project ID or project key (case sensitive).
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + payload - The project details to be updated.
    # + return - Returned if the project is updated.
    resource isolated function put rest/api/'2/project/[string projectIdOrKey](ProjectInputBean payload, map<string|string[]> headers = {}, *UpdateProjectQueries queries) returns Project|error {
        string resourcePath = string `/rest/api/2/project/${getEncodedUri(projectIdOrKey)}`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete project
    #
    # + projectIdOrKey - The project ID or project key (case sensitive).
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the project is deleted.
    resource isolated function delete rest/api/'2/project/[string projectIdOrKey](map<string|string[]> headers = {}, *DeleteProjectQueries queries) returns error? {
        string resourcePath = string `/rest/api/2/project/${getEncodedUri(projectIdOrKey)}`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Archive project
    #
    # + projectIdOrKey - The project ID or project key (case sensitive).
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function post rest/api/'2/project/[string projectIdOrKey]/archive(map<string|string[]> headers = {}) returns json|error {
        string resourcePath = string `/rest/api/2/project/${getEncodedUri(projectIdOrKey)}/archive`;
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Set project avatar
    #
    # + projectIdOrKey - The ID or (case-sensitive) key of the project.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function put rest/api/'2/project/[string projectIdOrKey]/avatar(Avatar payload, map<string|string[]> headers = {}) returns json|error {
        string resourcePath = string `/rest/api/2/project/${getEncodedUri(projectIdOrKey)}/avatar`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete project avatar
    #
    # + projectIdOrKey - The project ID or (case-sensitive) key.
    # + id - The ID of the avatar.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function delete rest/api/'2/project/[string projectIdOrKey]/avatar/[int id](map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/rest/api/2/project/${getEncodedUri(projectIdOrKey)}/avatar/${getEncodedUri(id)}`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Load project avatar
    #
    # + projectIdOrKey - The ID or (case-sensitive) key of the project.
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function post rest/api/'2/project/[string projectIdOrKey]/avatar2(http:Request request, map<string|string[]> headers = {}, *CreateProjectAvatarQueries queries) returns Avatar|error {
        string resourcePath = string `/rest/api/2/project/${getEncodedUri(projectIdOrKey)}/avatar2`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        // TODO: Update the request as needed;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get all project avatars
    #
    # + projectIdOrKey - The ID or (case-sensitive) key of the project.
    # + headers - Headers to be sent with the request
    # + return - Returned if request is successful.
    resource isolated function get rest/api/'2/project/[string projectIdOrKey]/avatars(map<string|string[]> headers = {}) returns ProjectAvatars|error {
        string resourcePath = string `/rest/api/2/project/${getEncodedUri(projectIdOrKey)}/avatars`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Get project components paginated
    #
    # + projectIdOrKey - The project ID or project key (case sensitive).
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/project/[string projectIdOrKey]/component(map<string|string[]> headers = {}, *GetProjectComponentsPaginatedQueries queries) returns PageBeanComponentWithIssueCount|error {
        string resourcePath = string `/rest/api/2/project/${getEncodedUri(projectIdOrKey)}/component`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get project components
    #
    # + projectIdOrKey - The project ID or project key (case sensitive).
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/project/[string projectIdOrKey]/components(map<string|string[]> headers = {}) returns Component[]|error {
        string resourcePath = string `/rest/api/2/project/${getEncodedUri(projectIdOrKey)}/components`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Delete project asynchronously
    #
    # + projectIdOrKey - The project ID or project key (case sensitive).
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function post rest/api/'2/project/[string projectIdOrKey]/delete(map<string|string[]> headers = {}) returns http:Response|error {
        string resourcePath = string `/rest/api/2/project/${getEncodedUri(projectIdOrKey)}/delete`;
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get features for project
    #
    # + projectIdOrKey - The ID or (case-sensitive) key of the project.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/project/[string projectIdOrKey]/features(map<string|string[]> headers = {}) returns ProjectFeaturesResponse|error {
        string resourcePath = string `/rest/api/2/project/${getEncodedUri(projectIdOrKey)}/features`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Toggle feature for project
    #
    # + projectIdOrKey - The ID or (case-sensitive) key of the project.
    # + featureKey - The key of the feature to change the state.
    # + headers - Headers to be sent with the request
    # + payload - The request object describing whether we should enable or disable the feature.
    # + return - Returned if the request is successful.
    resource isolated function put rest/api/'2/project/[string projectIdOrKey]/features/[string featureKey](ProjectFeatureToggleRequest payload, map<string|string[]> headers = {}) returns ProjectFeaturesResponse|error {
        string resourcePath = string `/rest/api/2/project/${getEncodedUri(projectIdOrKey)}/features/${getEncodedUri(featureKey)}`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Get project property keys
    #
    # + projectIdOrKey - The project ID or project key (case sensitive).
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/project/[string projectIdOrKey]/properties(map<string|string[]> headers = {}) returns PropertyKeys|error {
        string resourcePath = string `/rest/api/2/project/${getEncodedUri(projectIdOrKey)}/properties`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Get project property
    #
    # + projectIdOrKey - The project ID or project key (case sensitive).
    # + propertyKey - The project property key. Use [Get project property keys](#api-rest-api-2-project-projectIdOrKey-properties-get) to get a list of all project property keys.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/project/[string projectIdOrKey]/properties/[string propertyKey](map<string|string[]> headers = {}) returns EntityProperty|error {
        string resourcePath = string `/rest/api/2/project/${getEncodedUri(projectIdOrKey)}/properties/${getEncodedUri(propertyKey)}`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Set project property
    #
    # + projectIdOrKey - The project ID or project key (case sensitive).
    # + propertyKey - The key of the project property. The maximum length is 255 characters.
    # + headers - Headers to be sent with the request
    # + return - Returned if the project property is updated.
    resource isolated function put rest/api/'2/project/[string projectIdOrKey]/properties/[string propertyKey](json payload, map<string|string[]> headers = {}) returns json|error {
        string resourcePath = string `/rest/api/2/project/${getEncodedUri(projectIdOrKey)}/properties/${getEncodedUri(propertyKey)}`;
        http:Request request = new;
        request.setPayload(payload, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete project property
    #
    # + projectIdOrKey - The project ID or project key (case sensitive).
    # + propertyKey - The project property key. Use [Get project property keys](#api-rest-api-2-project-projectIdOrKey-properties-get) to get a list of all project property keys.
    # + headers - Headers to be sent with the request
    # + return - Returned if the project property is deleted.
    resource isolated function delete rest/api/'2/project/[string projectIdOrKey]/properties/[string propertyKey](map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/rest/api/2/project/${getEncodedUri(projectIdOrKey)}/properties/${getEncodedUri(propertyKey)}`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Restore deleted project
    #
    # + projectIdOrKey - The project ID or project key (case sensitive).
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function post rest/api/'2/project/[string projectIdOrKey]/restore(map<string|string[]> headers = {}) returns Project|error {
        string resourcePath = string `/rest/api/2/project/${getEncodedUri(projectIdOrKey)}/restore`;
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get project roles for project
    #
    # + projectIdOrKey - The project ID or project key (case sensitive).
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/project/[string projectIdOrKey]/role(map<string|string[]> headers = {}) returns record {|string...;|}|error {
        string resourcePath = string `/rest/api/2/project/${getEncodedUri(projectIdOrKey)}/role`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Get project role for project
    #
    # + projectIdOrKey - The project ID or project key (case sensitive).
    # + id - The ID of the project role. Use [Get all project roles](#api-rest-api-2-role-get) to get a list of project role IDs.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/project/[string projectIdOrKey]/role/[int id](map<string|string[]> headers = {}) returns ProjectRole|error {
        string resourcePath = string `/rest/api/2/project/${getEncodedUri(projectIdOrKey)}/role/${getEncodedUri(id)}`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Set actors for project role
    #
    # + projectIdOrKey - The project ID or project key (case sensitive).
    # + id - The ID of the project role. Use [Get all project roles](#api-rest-api-2-role-get) to get a list of project role IDs.
    # + headers - Headers to be sent with the request
    # + payload - The groups or users to associate with the project role for this project. Provide the user account ID or group name.
    # + return - Returned if the request is successful. The complete list of actors for the project is returned.
    resource isolated function put rest/api/'2/project/[string projectIdOrKey]/role/[int id](ProjectRoleActorsUpdateBean payload, map<string|string[]> headers = {}) returns ProjectRole|error {
        string resourcePath = string `/rest/api/2/project/${getEncodedUri(projectIdOrKey)}/role/${getEncodedUri(id)}`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Add actors to project role
    #
    # + projectIdOrKey - The project ID or project key (case sensitive).
    # + id - The ID of the project role. Use [Get all project roles](#api-rest-api-2-role-get) to get a list of project role IDs.
    # + headers - Headers to be sent with the request
    # + payload - The groups or users to associate with the project role for this project. Provide the user account ID or group name.
    # + return - Returned if the request is successful. The complete list of actors for the project is returned. For example, the cURL request above adds a group, *jira-developers*. For the response below to be returned as a result of that request, the user *Mia Krystof* would have previously been added as a `user` actor for this project.
    resource isolated function post rest/api/'2/project/[string projectIdOrKey]/role/[int id](ActorsMap payload, map<string|string[]> headers = {}) returns ProjectRole|error {
        string resourcePath = string `/rest/api/2/project/${getEncodedUri(projectIdOrKey)}/role/${getEncodedUri(id)}`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Delete actors from project role
    #
    # + projectIdOrKey - The project ID or project key (case sensitive).
    # + id - The ID of the project role. Use [Get all project roles](#api-rest-api-2-role-get) to get a list of project role IDs.
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function delete rest/api/'2/project/[string projectIdOrKey]/role/[int id](map<string|string[]> headers = {}, *DeleteActorQueries queries) returns error? {
        string resourcePath = string `/rest/api/2/project/${getEncodedUri(projectIdOrKey)}/role/${getEncodedUri(id)}`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Get project role details
    #
    # + projectIdOrKey - The project ID or project key (case sensitive).
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/project/[string projectIdOrKey]/roledetails(map<string|string[]> headers = {}, *GetProjectRoleDetailsQueries queries) returns ProjectRoleDetails[]|error {
        string resourcePath = string `/rest/api/2/project/${getEncodedUri(projectIdOrKey)}/roledetails`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get all statuses for project
    #
    # + projectIdOrKey - The project ID or project key (case sensitive).
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/project/[string projectIdOrKey]/statuses(map<string|string[]> headers = {}) returns IssueTypeWithStatus[]|error {
        string resourcePath = string `/rest/api/2/project/${getEncodedUri(projectIdOrKey)}/statuses`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Update project type
    #
    # + projectIdOrKey - The project ID or project key (case sensitive).
    # + newProjectTypeKey - The key of the new project type.
    # + headers - Headers to be sent with the request
    # + return - Returned if the project type is updated.
    #
    # # Deprecated
    @deprecated
    resource isolated function put rest/api/'2/project/[string projectIdOrKey]/'type/["software"|"service_desk"|"business" newProjectTypeKey](map<string|string[]> headers = {}) returns Project|error {
        string resourcePath = string `/rest/api/2/project/${getEncodedUri(projectIdOrKey)}/type/${getEncodedUri(newProjectTypeKey)}`;
        http:Request request = new;
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Get project versions paginated
    #
    # + projectIdOrKey - The project ID or project key (case sensitive).
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/project/[string projectIdOrKey]/version(map<string|string[]> headers = {}, *GetProjectVersionsPaginatedQueries queries) returns PageBeanVersion|error {
        string resourcePath = string `/rest/api/2/project/${getEncodedUri(projectIdOrKey)}/version`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get project versions
    #
    # + projectIdOrKey - The project ID or project key (case sensitive).
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/project/[string projectIdOrKey]/versions(map<string|string[]> headers = {}, *GetProjectVersionsQueries queries) returns Version[]|error {
        string resourcePath = string `/rest/api/2/project/${getEncodedUri(projectIdOrKey)}/versions`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get project's sender email
    #
    # + projectId - The project ID.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/project/[int projectId]/email(map<string|string[]> headers = {}) returns ProjectEmailAddress|error {
        string resourcePath = string `/rest/api/2/project/${getEncodedUri(projectId)}/email`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Set project's sender email
    #
    # + projectId - The project ID.
    # + headers - Headers to be sent with the request
    # + payload - The project's sender email address to be set.
    # + return - Returned if the project's sender email address is successfully set.
    resource isolated function put rest/api/'2/project/[int projectId]/email(ProjectEmailAddress payload, map<string|string[]> headers = {}) returns json|error {
        string resourcePath = string `/rest/api/2/project/${getEncodedUri(projectId)}/email`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Get project issue type hierarchy
    #
    # + projectId - The ID of the project.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    #
    # # Deprecated
    @deprecated
    resource isolated function get rest/api/'2/project/[int projectId]/hierarchy(map<string|string[]> headers = {}) returns ProjectIssueTypeHierarchy|error {
        string resourcePath = string `/rest/api/2/project/${getEncodedUri(projectId)}/hierarchy`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Get project issue security scheme
    #
    # + projectKeyOrId - The project ID or project key (case sensitive).
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/project/[string projectKeyOrId]/issuesecuritylevelscheme(map<string|string[]> headers = {}) returns SecurityScheme|error {
        string resourcePath = string `/rest/api/2/project/${getEncodedUri(projectKeyOrId)}/issuesecuritylevelscheme`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Get project notification scheme
    #
    # + projectKeyOrId - The project ID or project key (case sensitive).
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/project/[string projectKeyOrId]/notificationscheme(map<string|string[]> headers = {}, *GetNotificationSchemeForProjectQueries queries) returns NotificationScheme|error {
        string resourcePath = string `/rest/api/2/project/${getEncodedUri(projectKeyOrId)}/notificationscheme`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get assigned permission scheme
    #
    # + projectKeyOrId - The project ID or project key (case sensitive).
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/project/[string projectKeyOrId]/permissionscheme(map<string|string[]> headers = {}, *GetAssignedPermissionSchemeQueries queries) returns PermissionScheme|error {
        string resourcePath = string `/rest/api/2/project/${getEncodedUri(projectKeyOrId)}/permissionscheme`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Assign permission scheme
    #
    # + projectKeyOrId - The project ID or project key (case sensitive).
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function put rest/api/'2/project/[string projectKeyOrId]/permissionscheme(IdBean payload, map<string|string[]> headers = {}, *AssignPermissionSchemeQueries queries) returns PermissionScheme|error {
        string resourcePath = string `/rest/api/2/project/${getEncodedUri(projectKeyOrId)}/permissionscheme`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Get project issue security levels
    #
    # + projectKeyOrId - The project ID or project key (case sensitive).
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/project/[string projectKeyOrId]/securitylevel(map<string|string[]> headers = {}) returns ProjectIssueSecurityLevels|error {
        string resourcePath = string `/rest/api/2/project/${getEncodedUri(projectKeyOrId)}/securitylevel`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Get all project categories
    #
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/projectCategory(map<string|string[]> headers = {}) returns ProjectCategory[]|error {
        string resourcePath = string `/rest/api/2/projectCategory`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Create project category
    #
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function post rest/api/'2/projectCategory(ProjectCategory payload, map<string|string[]> headers = {}) returns ProjectCategory|error {
        string resourcePath = string `/rest/api/2/projectCategory`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get project category by ID
    #
    # + id - The ID of the project category.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/projectCategory/[int id](map<string|string[]> headers = {}) returns ProjectCategory|error {
        string resourcePath = string `/rest/api/2/projectCategory/${getEncodedUri(id)}`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Update project category
    #
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function put rest/api/'2/projectCategory/[int id](ProjectCategory payload, map<string|string[]> headers = {}) returns UpdatedProjectCategory|error {
        string resourcePath = string `/rest/api/2/projectCategory/${getEncodedUri(id)}`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete project category
    #
    # + id - ID of the project category to delete.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function delete rest/api/'2/projectCategory/[int id](map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/rest/api/2/projectCategory/${getEncodedUri(id)}`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Validate project key
    #
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/projectvalidate/'key(map<string|string[]> headers = {}, *ValidateProjectKeyQueries queries) returns ErrorCollection|error {
        string resourcePath = string `/rest/api/2/projectvalidate/key`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get valid project key
    #
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/projectvalidate/validProjectKey(map<string|string[]> headers = {}, *GetValidProjectKeyQueries queries) returns string|error {
        string resourcePath = string `/rest/api/2/projectvalidate/validProjectKey`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get valid project name
    #
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/projectvalidate/validProjectName(map<string|string[]> headers = {}, *GetValidProjectNameQueries queries) returns string|error {
        string resourcePath = string `/rest/api/2/projectvalidate/validProjectName`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get resolutions
    #
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/resolution(map<string|string[]> headers = {}) returns Resolution[]|error {
        string resourcePath = string `/rest/api/2/resolution`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Get resolution
    #
    # + id - The ID of the issue resolution value.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/resolution/[string id](map<string|string[]> headers = {}) returns Resolution|error {
        string resourcePath = string `/rest/api/2/resolution/${getEncodedUri(id)}`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Get all project roles
    #
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/role(map<string|string[]> headers = {}) returns ProjectRole[]|error {
        string resourcePath = string `/rest/api/2/role`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Create project role
    #
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function post rest/api/'2/role(CreateUpdateRoleRequestBean payload, map<string|string[]> headers = {}) returns ProjectRole|error {
        string resourcePath = string `/rest/api/2/role`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get project role by ID
    #
    # + id - The ID of the project role. Use [Get all project roles](#api-rest-api-2-role-get) to get a list of project role IDs.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/role/[int id](map<string|string[]> headers = {}) returns ProjectRole|error {
        string resourcePath = string `/rest/api/2/role/${getEncodedUri(id)}`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Fully update project role
    #
    # + id - The ID of the project role. Use [Get all project roles](#api-rest-api-2-role-get) to get a list of project role IDs.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function put rest/api/'2/role/[int id](CreateUpdateRoleRequestBean payload, map<string|string[]> headers = {}) returns ProjectRole|error {
        string resourcePath = string `/rest/api/2/role/${getEncodedUri(id)}`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Partial update project role
    #
    # + id - The ID of the project role. Use [Get all project roles](#api-rest-api-2-role-get) to get a list of project role IDs.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function post rest/api/'2/role/[int id](CreateUpdateRoleRequestBean payload, map<string|string[]> headers = {}) returns ProjectRole|error {
        string resourcePath = string `/rest/api/2/role/${getEncodedUri(id)}`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Delete project role
    #
    # + id - The ID of the project role to delete. Use [Get all project roles](#api-rest-api-2-role-get) to get a list of project role IDs.
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function delete rest/api/'2/role/[int id](map<string|string[]> headers = {}, *DeleteProjectRoleQueries queries) returns error? {
        string resourcePath = string `/rest/api/2/role/${getEncodedUri(id)}`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Get default actors for project role
    #
    # + id - The ID of the project role. Use [Get all project roles](#api-rest-api-2-role-get) to get a list of project role IDs.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/role/[int id]/actors(map<string|string[]> headers = {}) returns ProjectRole|error {
        string resourcePath = string `/rest/api/2/role/${getEncodedUri(id)}/actors`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Add default actors to project role
    #
    # + id - The ID of the project role. Use [Get all project roles](#api-rest-api-2-role-get) to get a list of project role IDs.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function post rest/api/'2/role/[int id]/actors(ActorInputBean payload, map<string|string[]> headers = {}) returns ProjectRole|error {
        string resourcePath = string `/rest/api/2/role/${getEncodedUri(id)}/actors`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Delete default actors from project role
    #
    # + id - The ID of the project role. Use [Get all project roles](#api-rest-api-2-role-get) to get a list of project role IDs.
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function delete rest/api/'2/role/[int id]/actors(map<string|string[]> headers = {}, *DeleteProjectRoleActorsFromRoleQueries queries) returns ProjectRole|error {
        string resourcePath = string `/rest/api/2/role/${getEncodedUri(id)}/actors`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Get screens
    #
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/screens(map<string|string[]> headers = {}, *GetScreensQueries queries) returns PageBeanScreen|error {
        string resourcePath = string `/rest/api/2/screens`;
        map<Encoding> queryParamEncoding = {"id": {style: FORM, explode: true}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Create screen
    #
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function post rest/api/'2/screens(ScreenDetails payload, map<string|string[]> headers = {}) returns Screen|error {
        string resourcePath = string `/rest/api/2/screens`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Add field to default screen
    #
    # + fieldId - The ID of the field.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function post rest/api/'2/screens/addToDefault/[string fieldId](map<string|string[]> headers = {}) returns json|error {
        string resourcePath = string `/rest/api/2/screens/addToDefault/${getEncodedUri(fieldId)}`;
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Update screen
    #
    # + screenId - The ID of the screen.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function put rest/api/'2/screens/[int screenId](UpdateScreenDetails payload, map<string|string[]> headers = {}) returns Screen|error {
        string resourcePath = string `/rest/api/2/screens/${getEncodedUri(screenId)}`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete screen
    #
    # + screenId - The ID of the screen.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function delete rest/api/'2/screens/[int screenId](map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/rest/api/2/screens/${getEncodedUri(screenId)}`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Get available screen fields
    #
    # + screenId - The ID of the screen.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/screens/[int screenId]/availableFields(map<string|string[]> headers = {}) returns ScreenableField[]|error {
        string resourcePath = string `/rest/api/2/screens/${getEncodedUri(screenId)}/availableFields`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Get all screen tabs
    #
    # + screenId - The ID of the screen.
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/screens/[int screenId]/tabs(map<string|string[]> headers = {}, *GetAllScreenTabsQueries queries) returns ScreenableTab[]|error {
        string resourcePath = string `/rest/api/2/screens/${getEncodedUri(screenId)}/tabs`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Create screen tab
    #
    # + screenId - The ID of the screen.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function post rest/api/'2/screens/[int screenId]/tabs(ScreenableTab payload, map<string|string[]> headers = {}) returns ScreenableTab|error {
        string resourcePath = string `/rest/api/2/screens/${getEncodedUri(screenId)}/tabs`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Update screen tab
    #
    # + screenId - The ID of the screen.
    # + tabId - The ID of the screen tab.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function put rest/api/'2/screens/[int screenId]/tabs/[int tabId](ScreenableTab payload, map<string|string[]> headers = {}) returns ScreenableTab|error {
        string resourcePath = string `/rest/api/2/screens/${getEncodedUri(screenId)}/tabs/${getEncodedUri(tabId)}`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete screen tab
    #
    # + screenId - The ID of the screen.
    # + tabId - The ID of the screen tab.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function delete rest/api/'2/screens/[int screenId]/tabs/[int tabId](map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/rest/api/2/screens/${getEncodedUri(screenId)}/tabs/${getEncodedUri(tabId)}`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Get all screen tab fields
    #
    # + screenId - The ID of the screen.
    # + tabId - The ID of the screen tab.
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/screens/[int screenId]/tabs/[int tabId]/fields(map<string|string[]> headers = {}, *GetAllScreenTabFieldsQueries queries) returns ScreenableField[]|error {
        string resourcePath = string `/rest/api/2/screens/${getEncodedUri(screenId)}/tabs/${getEncodedUri(tabId)}/fields`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Add screen tab field
    #
    # + screenId - The ID of the screen.
    # + tabId - The ID of the screen tab.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function post rest/api/'2/screens/[int screenId]/tabs/[int tabId]/fields(AddFieldBean payload, map<string|string[]> headers = {}) returns ScreenableField|error {
        string resourcePath = string `/rest/api/2/screens/${getEncodedUri(screenId)}/tabs/${getEncodedUri(tabId)}/fields`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Remove screen tab field
    #
    # + screenId - The ID of the screen.
    # + tabId - The ID of the screen tab.
    # + id - The ID of the field.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function delete rest/api/'2/screens/[int screenId]/tabs/[int tabId]/fields/[string id](map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/rest/api/2/screens/${getEncodedUri(screenId)}/tabs/${getEncodedUri(tabId)}/fields/${getEncodedUri(id)}`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Move screen tab field
    #
    # + screenId - The ID of the screen.
    # + tabId - The ID of the screen tab.
    # + id - The ID of the field.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function post rest/api/'2/screens/[int screenId]/tabs/[int tabId]/fields/[string id]/move(MoveFieldBean payload, map<string|string[]> headers = {}) returns json|error {
        string resourcePath = string `/rest/api/2/screens/${getEncodedUri(screenId)}/tabs/${getEncodedUri(tabId)}/fields/${getEncodedUri(id)}/move`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Move screen tab
    #
    # + screenId - The ID of the screen.
    # + tabId - The ID of the screen tab.
    # + pos - The position of tab. The base index is 0.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function post rest/api/'2/screens/[int screenId]/tabs/[int tabId]/move/[int:Signed32 pos](map<string|string[]> headers = {}) returns json|error {
        string resourcePath = string `/rest/api/2/screens/${getEncodedUri(screenId)}/tabs/${getEncodedUri(tabId)}/move/${getEncodedUri(pos)}`;
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get screen schemes
    #
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/screenscheme(map<string|string[]> headers = {}, *GetScreenSchemesQueries queries) returns PageBeanScreenScheme|error {
        string resourcePath = string `/rest/api/2/screenscheme`;
        map<Encoding> queryParamEncoding = {"id": {style: FORM, explode: true}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Create screen scheme
    #
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function post rest/api/'2/screenscheme(ScreenSchemeDetails payload, map<string|string[]> headers = {}) returns ScreenSchemeId|error {
        string resourcePath = string `/rest/api/2/screenscheme`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Update screen scheme
    #
    # + screenSchemeId - The ID of the screen scheme.
    # + headers - Headers to be sent with the request
    # + payload - The screen scheme update details.
    # + return - Returned if the request is successful.
    resource isolated function put rest/api/'2/screenscheme/[string screenSchemeId](UpdateScreenSchemeDetails payload, map<string|string[]> headers = {}) returns json|error {
        string resourcePath = string `/rest/api/2/screenscheme/${getEncodedUri(screenSchemeId)}`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete screen scheme
    #
    # + screenSchemeId - The ID of the screen scheme.
    # + headers - Headers to be sent with the request
    # + return - Returned if the screen scheme is deleted.
    resource isolated function delete rest/api/'2/screenscheme/[string screenSchemeId](map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/rest/api/2/screenscheme/${getEncodedUri(screenSchemeId)}`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Search for issues using JQL (GET)
    #
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/search(map<string|string[]> headers = {}, *SearchForIssuesUsingJqlQueries queries) returns SearchResults|error {
        string resourcePath = string `/rest/api/2/search`;
        map<Encoding> queryParamEncoding = {"fields": {style: FORM, explode: true}, "properties": {style: FORM, explode: true}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Search for issues using JQL (POST)
    #
    # + headers - Headers to be sent with the request
    # + payload - A JSON object containing the search request.
    # + return - Returned if the request is successful.
    resource isolated function post rest/api/'2/search(SearchRequestBean payload, map<string|string[]> headers = {}) returns SearchResults|error {
        string resourcePath = string `/rest/api/2/search`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get issue security level
    #
    # + id - The ID of the issue security level.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/securitylevel/[string id](map<string|string[]> headers = {}) returns SecurityLevel|error {
        string resourcePath = string `/rest/api/2/securitylevel/${getEncodedUri(id)}`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Get Jira instance info
    #
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/serverInfo(map<string|string[]> headers = {}) returns ServerInformation|error {
        string resourcePath = string `/rest/api/2/serverInfo`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Get issue navigator default columns
    #
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/settings/columns(map<string|string[]> headers = {}) returns ColumnItem[]|error {
        string resourcePath = string `/rest/api/2/settings/columns`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Set issue navigator default columns
    #
    # + headers - Headers to be sent with the request
    # + request - A navigable field value.
    # + return - Returned if the request is successful.
    resource isolated function put rest/api/'2/settings/columns(http:Request request, map<string|string[]> headers = {}) returns json|error {
        string resourcePath = string `/rest/api/2/settings/columns`;
        // TODO: Update the request as needed;
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Get all statuses
    #
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/status(map<string|string[]> headers = {}) returns StatusDetails[]|error {
        string resourcePath = string `/rest/api/2/status`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Get status
    #
    # + idOrName - The ID or name of the status.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/status/[string idOrName](map<string|string[]> headers = {}) returns StatusDetails|error {
        string resourcePath = string `/rest/api/2/status/${getEncodedUri(idOrName)}`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Get all status categories
    #
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/statuscategory(map<string|string[]> headers = {}) returns StatusCategory[]|error {
        string resourcePath = string `/rest/api/2/statuscategory`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Get status category
    #
    # + idOrKey - The ID or key of the status category.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/statuscategory/[string idOrKey](map<string|string[]> headers = {}) returns StatusCategory|error {
        string resourcePath = string `/rest/api/2/statuscategory/${getEncodedUri(idOrKey)}`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Get task
    #
    # + taskId - The ID of the task.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/task/[string taskId](map<string|string[]> headers = {}) returns TaskProgressBeanObject|error {
        string resourcePath = string `/rest/api/2/task/${getEncodedUri(taskId)}`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Cancel task
    #
    # + taskId - The ID of the task.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function post rest/api/'2/task/[string taskId]/cancel(map<string|string[]> headers = {}) returns json|error {
        string resourcePath = string `/rest/api/2/task/${getEncodedUri(taskId)}/cancel`;
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get avatars
    #
    # + 'type - The avatar type.
    # + entityId - The ID of the item the avatar is associated with.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/universal_avatar/'type/["project"|"issuetype" 'type]/owner/[string entityId](map<string|string[]> headers = {}) returns Avatars|error {
        string resourcePath = string `/rest/api/2/universal_avatar/type/${getEncodedUri('type)}/owner/${getEncodedUri(entityId)}`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Load avatar
    #
    # + 'type - The avatar type.
    # + entityId - The ID of the item the avatar is associated with.
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function post rest/api/'2/universal_avatar/'type/["project"|"issuetype" 'type]/owner/[string entityId](http:Request request, map<string|string[]> headers = {}, *StoreAvatarQueries queries) returns Avatar|error {
        string resourcePath = string `/rest/api/2/universal_avatar/type/${getEncodedUri('type)}/owner/${getEncodedUri(entityId)}`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        // TODO: Update the request as needed;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Delete avatar
    #
    # + 'type - The avatar type.
    # + owningObjectId - The ID of the item the avatar is associated with.
    # + id - The ID of the avatar.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function delete rest/api/'2/universal_avatar/'type/["project"|"issuetype" 'type]/owner/[string owningObjectId]/avatar/[int id](map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/rest/api/2/universal_avatar/type/${getEncodedUri('type)}/owner/${getEncodedUri(owningObjectId)}/avatar/${getEncodedUri(id)}`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Get user
    #
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/user(map<string|string[]> headers = {}, *GetUserQueries queries) returns User|error {
        string resourcePath = string `/rest/api/2/user`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Create user
    #
    # + headers - Headers to be sent with the request
    # + payload - Details about the user to be created.
    # + return - Returned if the request is successful.
    resource isolated function post rest/api/'2/user(UserWriteBean payload, map<string|string[]> headers = {}) returns User|error {
        string resourcePath = string `/rest/api/2/user`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Delete user
    #
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function delete rest/api/'2/user(map<string|string[]> headers = {}, *RemoveUserQueries queries) returns error? {
        string resourcePath = string `/rest/api/2/user`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Find users assignable to projects
    #
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/user/assignable/multiProjectSearch(map<string|string[]> headers = {}, *FindBulkAssignableUsersQueries queries) returns User[]|error {
        string resourcePath = string `/rest/api/2/user/assignable/multiProjectSearch`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Find users assignable to issues
    #
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/user/assignable/search(map<string|string[]> headers = {}, *FindAssignableUsersQueries queries) returns User[]|error {
        string resourcePath = string `/rest/api/2/user/assignable/search`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Bulk get users
    #
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/user/bulk(map<string|string[]> headers = {}, *BulkGetUsersQueries queries) returns PageBeanUser|error {
        string resourcePath = string `/rest/api/2/user/bulk`;
        map<Encoding> queryParamEncoding = {"username": {style: FORM, explode: true}, "key": {style: FORM, explode: true}, "accountId": {style: FORM, explode: true}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get account IDs for users
    #
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/user/bulk/migration(map<string|string[]> headers = {}, *BulkGetUsersMigrationQueries queries) returns UserMigrationBean[]|error {
        string resourcePath = string `/rest/api/2/user/bulk/migration`;
        map<Encoding> queryParamEncoding = {"username": {style: FORM, explode: true}, "key": {style: FORM, explode: true}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get user default columns
    #
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/user/columns(map<string|string[]> headers = {}, *GetUserDefaultColumnsQueries queries) returns ColumnItem[]|error {
        string resourcePath = string `/rest/api/2/user/columns`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Set user default columns
    #
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + request - The ID of a column to set. To set multiple columns, send multiple `columns` parameters.
    # + return - Returned if the request is successful.
    resource isolated function put rest/api/'2/user/columns(http:Request request, map<string|string[]> headers = {}, *SetUserColumnsQueries queries) returns json|error {
        string resourcePath = string `/rest/api/2/user/columns`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        // TODO: Update the request as needed;
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Reset user default columns
    #
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function delete rest/api/'2/user/columns(map<string|string[]> headers = {}, *ResetUserColumnsQueries queries) returns error? {
        string resourcePath = string `/rest/api/2/user/columns`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Get user email
    #
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/user/email(map<string|string[]> headers = {}, *GetUserEmailQueries queries) returns UnrestrictedUserEmail|error {
        string resourcePath = string `/rest/api/2/user/email`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get user email bulk
    #
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/user/email/bulk(map<string|string[]> headers = {}, *GetUserEmailBulkQueries queries) returns UnrestrictedUserEmail|error {
        string resourcePath = string `/rest/api/2/user/email/bulk`;
        map<Encoding> queryParamEncoding = {"accountId": {style: FORM, explode: true}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get user groups
    #
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/user/groups(map<string|string[]> headers = {}, *GetUserGroupsQueries queries) returns GroupName[]|error {
        string resourcePath = string `/rest/api/2/user/groups`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Find users with permissions
    #
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/user/permission/search(map<string|string[]> headers = {}, *FindUsersWithAllPermissionsQueries queries) returns User[]|error {
        string resourcePath = string `/rest/api/2/user/permission/search`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Find users for picker
    #
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/user/picker(map<string|string[]> headers = {}, *FindUsersForPickerQueries queries) returns FoundUsers|error {
        string resourcePath = string `/rest/api/2/user/picker`;
        map<Encoding> queryParamEncoding = {"exclude": {style: FORM, explode: true}, "excludeAccountIds": {style: FORM, explode: true}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get user property keys
    #
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/user/properties(map<string|string[]> headers = {}, *GetUserPropertyKeysQueries queries) returns PropertyKeys|error {
        string resourcePath = string `/rest/api/2/user/properties`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get user property
    #
    # + propertyKey - The key of the user's property.
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/user/properties/[string propertyKey](map<string|string[]> headers = {}, *GetUserPropertyQueries queries) returns EntityProperty|error {
        string resourcePath = string `/rest/api/2/user/properties/${getEncodedUri(propertyKey)}`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Set user property
    #
    # + propertyKey - The key of the user's property. The maximum length is 255 characters.
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the user property is updated.
    resource isolated function put rest/api/'2/user/properties/[string propertyKey](json payload, map<string|string[]> headers = {}, *SetUserPropertyQueries queries) returns json|error {
        string resourcePath = string `/rest/api/2/user/properties/${getEncodedUri(propertyKey)}`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        request.setPayload(payload, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete user property
    #
    # + propertyKey - The key of the user's property.
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the user property is deleted.
    resource isolated function delete rest/api/'2/user/properties/[string propertyKey](map<string|string[]> headers = {}, *DeleteUserPropertyQueries queries) returns error? {
        string resourcePath = string `/rest/api/2/user/properties/${getEncodedUri(propertyKey)}`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Find users
    #
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/user/search(map<string|string[]> headers = {}, *FindUsersQueries queries) returns User[]|error {
        string resourcePath = string `/rest/api/2/user/search`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Find users by query
    #
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/user/search/query(map<string|string[]> headers = {}, *FindUsersByQueryQueries queries) returns PageBeanUser|error {
        string resourcePath = string `/rest/api/2/user/search/query`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Find user keys by query
    #
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/user/search/query/'key(map<string|string[]> headers = {}, *FindUserKeysByQueryQueries queries) returns PageBeanUserKey|error {
        string resourcePath = string `/rest/api/2/user/search/query/key`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Find users with browse permission
    #
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/user/viewissue/search(map<string|string[]> headers = {}, *FindUsersWithBrowsePermissionQueries queries) returns User[]|error {
        string resourcePath = string `/rest/api/2/user/viewissue/search`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get all users default
    #
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/users(map<string|string[]> headers = {}, *GetAllUsersDefaultQueries queries) returns User[]|error {
        string resourcePath = string `/rest/api/2/users`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get all users
    #
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/users/search(map<string|string[]> headers = {}, *GetAllUsersQueries queries) returns User[]|error {
        string resourcePath = string `/rest/api/2/users/search`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Create version
    #
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function post rest/api/'2/version(Version payload, map<string|string[]> headers = {}) returns Version|error {
        string resourcePath = string `/rest/api/2/version`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get version
    #
    # + id - The ID of the version.
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/version/[string id](map<string|string[]> headers = {}, *GetVersionQueries queries) returns Version|error {
        string resourcePath = string `/rest/api/2/version/${getEncodedUri(id)}`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update version
    #
    # + id - The ID of the version.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function put rest/api/'2/version/[string id](Version payload, map<string|string[]> headers = {}) returns Version|error {
        string resourcePath = string `/rest/api/2/version/${getEncodedUri(id)}`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete version
    #
    # + id - The ID of the version.
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the version is deleted.
    #
    # # Deprecated
    @deprecated
    resource isolated function delete rest/api/'2/version/[string id](map<string|string[]> headers = {}, *DeleteVersionQueries queries) returns error? {
        string resourcePath = string `/rest/api/2/version/${getEncodedUri(id)}`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Merge versions
    #
    # + id - The ID of the version to delete.
    # + moveIssuesTo - The ID of the version to merge into.
    # + headers - Headers to be sent with the request
    # + return - Returned if the version is deleted.
    resource isolated function put rest/api/'2/version/[string id]/mergeto/[string moveIssuesTo](map<string|string[]> headers = {}) returns json|error {
        string resourcePath = string `/rest/api/2/version/${getEncodedUri(id)}/mergeto/${getEncodedUri(moveIssuesTo)}`;
        http:Request request = new;
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Move version
    #
    # + id - The ID of the version to be moved.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function post rest/api/'2/version/[string id]/move(VersionMoveBean payload, map<string|string[]> headers = {}) returns Version|error {
        string resourcePath = string `/rest/api/2/version/${getEncodedUri(id)}/move`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get version's related issues count
    #
    # + id - The ID of the version.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/version/[string id]/relatedIssueCounts(map<string|string[]> headers = {}) returns VersionIssueCounts|error {
        string resourcePath = string `/rest/api/2/version/${getEncodedUri(id)}/relatedIssueCounts`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Delete and replace version
    #
    # + id - The ID of the version.
    # + headers - Headers to be sent with the request
    # + return - Returned if the version is deleted.
    resource isolated function post rest/api/'2/version/[string id]/removeAndSwap(DeleteAndReplaceVersionBean payload, map<string|string[]> headers = {}) returns json|error {
        string resourcePath = string `/rest/api/2/version/${getEncodedUri(id)}/removeAndSwap`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get version's unresolved issues count
    #
    # + id - The ID of the version.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/version/[string id]/unresolvedIssueCount(map<string|string[]> headers = {}) returns VersionUnresolvedIssuesCount|error {
        string resourcePath = string `/rest/api/2/version/${getEncodedUri(id)}/unresolvedIssueCount`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Get dynamic webhooks for app
    #
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/webhook(map<string|string[]> headers = {}, *GetDynamicWebhooksForAppQueries queries) returns PageBeanWebhook|error {
        string resourcePath = string `/rest/api/2/webhook`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Register dynamic webhooks
    #
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function post rest/api/'2/webhook(WebhookRegistrationDetails payload, map<string|string[]> headers = {}) returns ContainerForRegisteredWebhooks|error {
        string resourcePath = string `/rest/api/2/webhook`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Delete webhooks by ID
    #
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function delete rest/api/'2/webhook(map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/rest/api/2/webhook`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Get failed webhooks
    #
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/webhook/failed(map<string|string[]> headers = {}, *GetFailedWebhooksQueries queries) returns FailedWebhooks|error {
        string resourcePath = string `/rest/api/2/webhook/failed`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Extend webhook life
    #
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function put rest/api/'2/webhook/refresh(ContainerForWebhookIDs payload, map<string|string[]> headers = {}) returns WebhooksExpirationDate|error {
        string resourcePath = string `/rest/api/2/webhook/refresh`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Get all workflows
    #
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    #
    # # Deprecated
    @deprecated
    resource isolated function get rest/api/'2/workflow(map<string|string[]> headers = {}, *GetAllWorkflowsQueries queries) returns DeprecatedWorkflow[]|error {
        string resourcePath = string `/rest/api/2/workflow`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Create workflow
    #
    # + headers - Headers to be sent with the request
    # + payload - The workflow details.
    # + return - Returned if the workflow is created.
    resource isolated function post rest/api/'2/workflow(CreateWorkflowDetails payload, map<string|string[]> headers = {}) returns WorkflowIDs|error {
        string resourcePath = string `/rest/api/2/workflow`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get workflow transition rule configurations
    #
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/workflow/rule/config(map<string|string[]> headers = {}, *GetWorkflowTransitionRuleConfigurationsQueries queries) returns PageBeanWorkflowTransitionRules|error {
        string resourcePath = string `/rest/api/2/workflow/rule/config`;
        map<Encoding> queryParamEncoding = {"types": {style: FORM, explode: true}, "keys": {style: FORM, explode: true}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update workflow transition rule configurations
    #
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function put rest/api/'2/workflow/rule/config(WorkflowTransitionRulesUpdate payload, map<string|string[]> headers = {}) returns WorkflowTransitionRulesUpdateErrors|error {
        string resourcePath = string `/rest/api/2/workflow/rule/config`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Get workflows paginated
    #
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/workflow/search(map<string|string[]> headers = {}, *GetWorkflowsPaginatedQueries queries) returns PageBeanWorkflow|error {
        string resourcePath = string `/rest/api/2/workflow/search`;
        map<Encoding> queryParamEncoding = {"workflowName": {style: FORM, explode: true}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get workflow transition properties
    #
    # + transitionId - The ID of the transition. To get the ID, view the workflow in text mode in the Jira administration console. The ID is shown next to the transition.
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - 200 response
    resource isolated function get rest/api/'2/workflow/transitions/[int transitionId]/properties(map<string|string[]> headers = {}, *GetWorkflowTransitionPropertiesQueries queries) returns WorkflowTransitionProperty|error {
        string resourcePath = string `/rest/api/2/workflow/transitions/${getEncodedUri(transitionId)}/properties`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update workflow transition property
    #
    # + transitionId - The ID of the transition. To get the ID, view the workflow in text mode in the Jira admin settings. The ID is shown next to the transition.
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - 200 response
    resource isolated function put rest/api/'2/workflow/transitions/[int transitionId]/properties(WorkflowTransitionProperty payload, map<string|string[]> headers = {}, *UpdateWorkflowTransitionPropertyQueries queries) returns WorkflowTransitionProperty|error? {
        string resourcePath = string `/rest/api/2/workflow/transitions/${getEncodedUri(transitionId)}/properties`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Create workflow transition property
    #
    # + transitionId - The ID of the transition. To get the ID, view the workflow in text mode in the Jira admin settings. The ID is shown next to the transition.
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - 200 response
    resource isolated function post rest/api/'2/workflow/transitions/[int transitionId]/properties(WorkflowTransitionProperty payload, map<string|string[]> headers = {}, *CreateWorkflowTransitionPropertyQueries queries) returns WorkflowTransitionProperty|error {
        string resourcePath = string `/rest/api/2/workflow/transitions/${getEncodedUri(transitionId)}/properties`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Delete workflow transition property
    #
    # + transitionId - The ID of the transition. To get the ID, view the workflow in text mode in the Jira admin settings. The ID is shown next to the transition.
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - 200 response
    resource isolated function delete rest/api/'2/workflow/transitions/[int transitionId]/properties(map<string|string[]> headers = {}, *DeleteWorkflowTransitionPropertyQueries queries) returns error? {
        string resourcePath = string `/rest/api/2/workflow/transitions/${getEncodedUri(transitionId)}/properties`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Delete inactive workflow
    #
    # + entityId - The entity ID of the workflow.
    # + headers - Headers to be sent with the request
    # + return - Returned if the workflow is deleted.
    resource isolated function delete rest/api/'2/workflow/[string entityId](map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/rest/api/2/workflow/${getEncodedUri(entityId)}`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Get all workflow schemes
    #
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/workflowscheme(map<string|string[]> headers = {}, *GetAllWorkflowSchemesQueries queries) returns PageBeanWorkflowScheme|error {
        string resourcePath = string `/rest/api/2/workflowscheme`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Create workflow scheme
    #
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function post rest/api/'2/workflowscheme(WorkflowScheme payload, map<string|string[]> headers = {}) returns WorkflowScheme|error {
        string resourcePath = string `/rest/api/2/workflowscheme`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get workflow scheme project associations
    #
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/workflowscheme/project(map<string|string[]> headers = {}, *GetWorkflowSchemeProjectAssociationsQueries queries) returns ContainerOfWorkflowSchemeAssociations|error {
        string resourcePath = string `/rest/api/2/workflowscheme/project`;
        map<Encoding> queryParamEncoding = {"projectId": {style: FORM, explode: true}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->get(resourcePath, headers);
    }

    # Assign workflow scheme to project
    #
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function put rest/api/'2/workflowscheme/project(WorkflowSchemeProjectAssociation payload, map<string|string[]> headers = {}) returns json|error {
        string resourcePath = string `/rest/api/2/workflowscheme/project`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Get workflow scheme
    #
    # + id - The ID of the workflow scheme. Find this ID by editing the desired workflow scheme in Jira. The ID is shown in the URL as `schemeId`. For example, *schemeId=10301*.
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/workflowscheme/[int id](map<string|string[]> headers = {}, *GetWorkflowSchemeQueries queries) returns WorkflowScheme|error {
        string resourcePath = string `/rest/api/2/workflowscheme/${getEncodedUri(id)}`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update workflow scheme
    #
    # + id - The ID of the workflow scheme. Find this ID by editing the desired workflow scheme in Jira. The ID is shown in the URL as `schemeId`. For example, *schemeId=10301*.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function put rest/api/'2/workflowscheme/[int id](WorkflowScheme payload, map<string|string[]> headers = {}) returns WorkflowScheme|error {
        string resourcePath = string `/rest/api/2/workflowscheme/${getEncodedUri(id)}`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete workflow scheme
    #
    # + id - The ID of the workflow scheme. Find this ID by editing the desired workflow scheme in Jira. The ID is shown in the URL as `schemeId`. For example, *schemeId=10301*.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function delete rest/api/'2/workflowscheme/[int id](map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/rest/api/2/workflowscheme/${getEncodedUri(id)}`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Create draft workflow scheme
    #
    # + id - The ID of the active workflow scheme that the draft is created from.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function post rest/api/'2/workflowscheme/[int id]/createdraft(map<string|string[]> headers = {}) returns WorkflowScheme|error {
        string resourcePath = string `/rest/api/2/workflowscheme/${getEncodedUri(id)}/createdraft`;
        http:Request request = new;
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get default workflow
    #
    # + id - The ID of the workflow scheme.
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/workflowscheme/[int id]/default(map<string|string[]> headers = {}, *GetDefaultWorkflowQueries queries) returns DefaultWorkflow|error {
        string resourcePath = string `/rest/api/2/workflowscheme/${getEncodedUri(id)}/default`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Update default workflow
    #
    # + id - The ID of the workflow scheme.
    # + headers - Headers to be sent with the request
    # + payload - The new default workflow.
    # + return - Returned if the request is successful.
    resource isolated function put rest/api/'2/workflowscheme/[int id]/default(DefaultWorkflow payload, map<string|string[]> headers = {}) returns WorkflowScheme|error {
        string resourcePath = string `/rest/api/2/workflowscheme/${getEncodedUri(id)}/default`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete default workflow
    #
    # + id - The ID of the workflow scheme.
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function delete rest/api/'2/workflowscheme/[int id]/default(map<string|string[]> headers = {}, *DeleteDefaultWorkflowQueries queries) returns WorkflowScheme|error {
        string resourcePath = string `/rest/api/2/workflowscheme/${getEncodedUri(id)}/default`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Get draft workflow scheme
    #
    # + id - The ID of the active workflow scheme that the draft was created from.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/workflowscheme/[int id]/draft(map<string|string[]> headers = {}) returns WorkflowScheme|error {
        string resourcePath = string `/rest/api/2/workflowscheme/${getEncodedUri(id)}/draft`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Update draft workflow scheme
    #
    # + id - The ID of the active workflow scheme that the draft was created from.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function put rest/api/'2/workflowscheme/[int id]/draft(WorkflowScheme payload, map<string|string[]> headers = {}) returns WorkflowScheme|error {
        string resourcePath = string `/rest/api/2/workflowscheme/${getEncodedUri(id)}/draft`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete draft workflow scheme
    #
    # + id - The ID of the active workflow scheme that the draft was created from.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function delete rest/api/'2/workflowscheme/[int id]/draft(map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/rest/api/2/workflowscheme/${getEncodedUri(id)}/draft`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Get draft default workflow
    #
    # + id - The ID of the workflow scheme that the draft belongs to.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/workflowscheme/[int id]/draft/default(map<string|string[]> headers = {}) returns DefaultWorkflow|error {
        string resourcePath = string `/rest/api/2/workflowscheme/${getEncodedUri(id)}/draft/default`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Update draft default workflow
    #
    # + id - The ID of the workflow scheme that the draft belongs to.
    # + headers - Headers to be sent with the request
    # + payload - The object for the new default workflow.
    # + return - Returned if the request is successful.
    resource isolated function put rest/api/'2/workflowscheme/[int id]/draft/default(DefaultWorkflow payload, map<string|string[]> headers = {}) returns WorkflowScheme|error {
        string resourcePath = string `/rest/api/2/workflowscheme/${getEncodedUri(id)}/draft/default`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete draft default workflow
    #
    # + id - The ID of the workflow scheme that the draft belongs to.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function delete rest/api/'2/workflowscheme/[int id]/draft/default(map<string|string[]> headers = {}) returns WorkflowScheme|error {
        string resourcePath = string `/rest/api/2/workflowscheme/${getEncodedUri(id)}/draft/default`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Get workflow for issue type in draft workflow scheme
    #
    # + id - The ID of the workflow scheme that the draft belongs to.
    # + issueType - The ID of the issue type.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/workflowscheme/[int id]/draft/issuetype/[string issueType](map<string|string[]> headers = {}) returns IssueTypeWorkflowMapping|error {
        string resourcePath = string `/rest/api/2/workflowscheme/${getEncodedUri(id)}/draft/issuetype/${getEncodedUri(issueType)}`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Set workflow for issue type in draft workflow scheme
    #
    # + id - The ID of the workflow scheme that the draft belongs to.
    # + issueType - The ID of the issue type.
    # + headers - Headers to be sent with the request
    # + payload - The issue type-project mapping.
    # + return - Returned if the request is successful.
    resource isolated function put rest/api/'2/workflowscheme/[int id]/draft/issuetype/[string issueType](IssueTypeWorkflowMapping payload, map<string|string[]> headers = {}) returns WorkflowScheme|error {
        string resourcePath = string `/rest/api/2/workflowscheme/${getEncodedUri(id)}/draft/issuetype/${getEncodedUri(issueType)}`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete workflow for issue type in draft workflow scheme
    #
    # + id - The ID of the workflow scheme that the draft belongs to.
    # + issueType - The ID of the issue type.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function delete rest/api/'2/workflowscheme/[int id]/draft/issuetype/[string issueType](map<string|string[]> headers = {}) returns WorkflowScheme|error {
        string resourcePath = string `/rest/api/2/workflowscheme/${getEncodedUri(id)}/draft/issuetype/${getEncodedUri(issueType)}`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Get issue types for workflows in draft workflow scheme
    #
    # + id - The ID of the workflow scheme that the draft belongs to.
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/workflowscheme/[int id]/draft/workflow(map<string|string[]> headers = {}, *GetDraftWorkflowQueries queries) returns IssueTypesWorkflowMapping|error {
        string resourcePath = string `/rest/api/2/workflowscheme/${getEncodedUri(id)}/draft/workflow`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Set issue types for workflow in workflow scheme
    #
    # + id - The ID of the workflow scheme that the draft belongs to.
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function put rest/api/'2/workflowscheme/[int id]/draft/workflow(IssueTypesWorkflowMapping payload, map<string|string[]> headers = {}, *UpdateDraftWorkflowMappingQueries queries) returns WorkflowScheme|error {
        string resourcePath = string `/rest/api/2/workflowscheme/${getEncodedUri(id)}/draft/workflow`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete issue types for workflow in draft workflow scheme
    #
    # + id - The ID of the workflow scheme that the draft belongs to.
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function delete rest/api/'2/workflowscheme/[int id]/draft/workflow(map<string|string[]> headers = {}, *DeleteDraftWorkflowMappingQueries queries) returns error? {
        string resourcePath = string `/rest/api/2/workflowscheme/${getEncodedUri(id)}/draft/workflow`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Get workflow for issue type in workflow scheme
    #
    # + id - The ID of the workflow scheme.
    # + issueType - The ID of the issue type.
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/workflowscheme/[int id]/issuetype/[string issueType](map<string|string[]> headers = {}, *GetWorkflowSchemeIssueTypeQueries queries) returns IssueTypeWorkflowMapping|error {
        string resourcePath = string `/rest/api/2/workflowscheme/${getEncodedUri(id)}/issuetype/${getEncodedUri(issueType)}`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Set workflow for issue type in workflow scheme
    #
    # + id - The ID of the workflow scheme.
    # + issueType - The ID of the issue type.
    # + headers - Headers to be sent with the request
    # + payload - The issue type-project mapping.
    # + return - Returned if the request is successful.
    resource isolated function put rest/api/'2/workflowscheme/[int id]/issuetype/[string issueType](IssueTypeWorkflowMapping payload, map<string|string[]> headers = {}) returns WorkflowScheme|error {
        string resourcePath = string `/rest/api/2/workflowscheme/${getEncodedUri(id)}/issuetype/${getEncodedUri(issueType)}`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete workflow for issue type in workflow scheme
    #
    # + id - The ID of the workflow scheme.
    # + issueType - The ID of the issue type.
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function delete rest/api/'2/workflowscheme/[int id]/issuetype/[string issueType](map<string|string[]> headers = {}, *DeleteWorkflowSchemeIssueTypeQueries queries) returns WorkflowScheme|error {
        string resourcePath = string `/rest/api/2/workflowscheme/${getEncodedUri(id)}/issuetype/${getEncodedUri(issueType)}`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Get issue types for workflows in workflow scheme
    #
    # + id - The ID of the workflow scheme.
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/workflowscheme/[int id]/workflow(map<string|string[]> headers = {}, *GetWorkflowQueries queries) returns IssueTypesWorkflowMapping|error {
        string resourcePath = string `/rest/api/2/workflowscheme/${getEncodedUri(id)}/workflow`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Set issue types for workflow in workflow scheme
    #
    # + id - The ID of the workflow scheme.
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function put rest/api/'2/workflowscheme/[int id]/workflow(IssueTypesWorkflowMapping payload, map<string|string[]> headers = {}, *UpdateWorkflowMappingQueries queries) returns WorkflowScheme|error {
        string resourcePath = string `/rest/api/2/workflowscheme/${getEncodedUri(id)}/workflow`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete issue types for workflow in workflow scheme
    #
    # + id - The ID of the workflow scheme.
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function delete rest/api/'2/workflowscheme/[int id]/workflow(map<string|string[]> headers = {}, *DeleteWorkflowMappingQueries queries) returns error? {
        string resourcePath = string `/rest/api/2/workflowscheme/${getEncodedUri(id)}/workflow`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Get IDs of deleted worklogs
    #
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/worklog/deleted(map<string|string[]> headers = {}, *GetIdsOfWorklogsDeletedSinceQueries queries) returns ChangedWorklogs|error {
        string resourcePath = string `/rest/api/2/worklog/deleted`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get worklogs
    #
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + payload - A JSON object containing a list of worklog IDs.
    # + return - Returned if the request is successful.
    resource isolated function post rest/api/'2/worklog/list(WorklogIdsRequestBean payload, map<string|string[]> headers = {}, *GetWorklogsForIdsQueries queries) returns Worklog[]|error {
        string resourcePath = string `/rest/api/2/worklog/list`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Get IDs of updated worklogs
    #
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/api/'2/worklog/updated(map<string|string[]> headers = {}, *GetIdsOfWorklogsModifiedSinceQueries queries) returns ChangedWorklogs|error {
        string resourcePath = string `/rest/api/2/worklog/updated`;
        resourcePath = resourcePath + check getPathForQueryParam(queries);
        return self.clientEp->get(resourcePath, headers);
    }

    # Get app properties
    #
    # + addonKey - The key of the app, as defined in its descriptor.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/atlassian\-connect/'1/addons/[string addonKey]/properties(map<string|string[]> headers = {}) returns PropertyKeys|error {
        string resourcePath = string `/rest/atlassian-connect/1/addons/${getEncodedUri(addonKey)}/properties`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Get app property
    #
    # + addonKey - The key of the app, as defined in its descriptor.
    # + propertyKey - The key of the property.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/atlassian\-connect/'1/addons/[string addonKey]/properties/[string propertyKey](map<string|string[]> headers = {}) returns EntityProperty|error {
        string resourcePath = string `/rest/atlassian-connect/1/addons/${getEncodedUri(addonKey)}/properties/${getEncodedUri(propertyKey)}`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Set app property
    #
    # + addonKey - The key of the app, as defined in its descriptor.
    # + propertyKey - The key of the property.
    # + headers - Headers to be sent with the request
    # + return - Returned if the property is updated.
    resource isolated function put rest/atlassian\-connect/'1/addons/[string addonKey]/properties/[string propertyKey](json payload, map<string|string[]> headers = {}) returns OperationMessage|error {
        string resourcePath = string `/rest/atlassian-connect/1/addons/${getEncodedUri(addonKey)}/properties/${getEncodedUri(propertyKey)}`;
        http:Request request = new;
        request.setPayload(payload, "application/json");
        return self.clientEp->put(resourcePath, request, headers);
    }

    # Delete app property
    #
    # + addonKey - The key of the app, as defined in its descriptor.
    # + propertyKey - The key of the property.
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function delete rest/atlassian\-connect/'1/addons/[string addonKey]/properties/[string propertyKey](map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/rest/atlassian-connect/1/addons/${getEncodedUri(addonKey)}/properties/${getEncodedUri(propertyKey)}`;
        return self.clientEp->delete(resourcePath, headers = headers);
    }

    # Get modules
    #
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function get rest/atlassian\-connect/'1/app/module/dynamic(map<string|string[]> headers = {}) returns ConnectModules|error {
        string resourcePath = string `/rest/atlassian-connect/1/app/module/dynamic`;
        return self.clientEp->get(resourcePath, headers);
    }

    # Register modules
    #
    # + headers - Headers to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function post rest/atlassian\-connect/'1/app/module/dynamic(ConnectModules payload, map<string|string[]> headers = {}) returns error? {
        string resourcePath = string `/rest/atlassian-connect/1/app/module/dynamic`;
        http:Request request = new;
        json jsonBody = jsondata:toJson(payload);
        request.setPayload(jsonBody, "application/json");
        return self.clientEp->post(resourcePath, request, headers);
    }

    # Remove modules
    #
    # + headers - Headers to be sent with the request
    # + queries - Queries to be sent with the request
    # + return - Returned if the request is successful.
    resource isolated function delete rest/atlassian\-connect/'1/app/module/dynamic(map<string|string[]> headers = {}, *DynamicModulesResourceRemoveModulesDeleteQueries queries) returns error? {
        string resourcePath = string `/rest/atlassian-connect/1/app/module/dynamic`;
        map<Encoding> queryParamEncoding = {"moduleKey": {style: FORM, explode: true}};
        resourcePath = resourcePath + check getPathForQueryParam(queries, queryParamEncoding);
        return self.clientEp->delete(resourcePath, headers = headers);
    }
}

type SimpleBasicType string|boolean|int|float|decimal;

# Represents encoding mechanism details.
type Encoding record {
    # Defines how multiple values are delimited
    string style = FORM;
    # Specifies whether arrays and objects should generate as separate fields
    boolean explode = true;
    # Specifies the custom content type
    string contentType?;
    # Specifies the custom headers
    map<any> headers?;
};

enum EncodingStyle {
    DEEPOBJECT, FORM, SPACEDELIMITED, PIPEDELIMITED
}

final Encoding & readonly defaultEncoding = {};

# Serialize the record according to the deepObject style.
#
# + parent - Parent record name
# + anyRecord - Record to be serialized
# + return - Serialized record as a string
isolated function getDeepObjectStyleRequest(string parent, record {} anyRecord) returns string {
    string[] recordArray = [];
    foreach [string, anydata] [key, value] in anyRecord.entries() {
        if value is SimpleBasicType {
            recordArray.push(parent + "[" + key + "]" + "=" + getEncodedUri(value.toString()));
        } else if value is SimpleBasicType[] {
            recordArray.push(getSerializedArray(parent + "[" + key + "]" + "[]", value, DEEPOBJECT, true));
        } else if value is record {} {
            string nextParent = parent + "[" + key + "]";
            recordArray.push(getDeepObjectStyleRequest(nextParent, value));
        } else if value is record {}[] {
            string nextParent = parent + "[" + key + "]";
            recordArray.push(getSerializedRecordArray(nextParent, value, DEEPOBJECT));
        }
        recordArray.push("&");
    }
    _ = recordArray.pop();
    return string:'join("", ...recordArray);
}

# Serialize the record according to the form style.
#
# + parent - Parent record name
# + anyRecord - Record to be serialized
# + explode - Specifies whether arrays and objects should generate separate parameters
# + return - Serialized record as a string
isolated function getFormStyleRequest(string parent, record {} anyRecord, boolean explode = true) returns string {
    string[] recordArray = [];
    if explode {
        foreach [string, anydata] [key, value] in anyRecord.entries() {
            if value is SimpleBasicType {
                recordArray.push(key, "=", getEncodedUri(value.toString()));
            } else if value is SimpleBasicType[] {
                recordArray.push(getSerializedArray(key, value, explode = explode));
            } else if value is record {} {
                recordArray.push(getFormStyleRequest(parent, value, explode));
            }
            recordArray.push("&");
        }
        _ = recordArray.pop();
    } else {
        foreach [string, anydata] [key, value] in anyRecord.entries() {
            if value is SimpleBasicType {
                recordArray.push(key, ",", getEncodedUri(value.toString()));
            } else if value is SimpleBasicType[] {
                recordArray.push(getSerializedArray(key, value, explode = false));
            } else if value is record {} {
                recordArray.push(getFormStyleRequest(parent, value, explode));
            }
            recordArray.push(",");
        }
        _ = recordArray.pop();
    }
    return string:'join("", ...recordArray);
}

# Serialize arrays.
#
# + arrayName - Name of the field with arrays
# + anyArray - Array to be serialized
# + style - Defines how multiple values are delimited
# + explode - Specifies whether arrays and objects should generate separate parameters
# + return - Serialized array as a string
isolated function getSerializedArray(string arrayName, anydata[] anyArray, string style = "form", boolean explode = true) returns string {
    string key = arrayName;
    string[] arrayValues = [];
    if anyArray.length() > 0 {
        if style == FORM && !explode {
            arrayValues.push(key, "=");
            foreach anydata i in anyArray {
                arrayValues.push(getEncodedUri(i.toString()), ",");
            }
        } else if style == SPACEDELIMITED && !explode {
            arrayValues.push(key, "=");
            foreach anydata i in anyArray {
                arrayValues.push(getEncodedUri(i.toString()), "%20");
            }
        } else if style == PIPEDELIMITED && !explode {
            arrayValues.push(key, "=");
            foreach anydata i in anyArray {
                arrayValues.push(getEncodedUri(i.toString()), "|");
            }
        } else if style == DEEPOBJECT {
            foreach anydata i in anyArray {
                arrayValues.push(key, "[]", "=", getEncodedUri(i.toString()), "&");
            }
        } else {
            foreach anydata i in anyArray {
                arrayValues.push(key, "=", getEncodedUri(i.toString()), "&");
            }
        }
        _ = arrayValues.pop();
    }
    return string:'join("", ...arrayValues);
}

# Serialize the array of records according to the form style.
#
# + parent - Parent record name
# + value - Array of records to be serialized
# + style - Defines how multiple values are delimited
# + explode - Specifies whether arrays and objects should generate separate parameters
# + return - Serialized record as a string
isolated function getSerializedRecordArray(string parent, record {}[] value, string style = FORM, boolean explode = true) returns string {
    string[] serializedArray = [];
    if style == DEEPOBJECT {
        int arayIndex = 0;
        foreach var recordItem in value {
            serializedArray.push(getDeepObjectStyleRequest(parent + "[" + arayIndex.toString() + "]", recordItem), "&");
            arayIndex = arayIndex + 1;
        }
    } else {
        if !explode {
            serializedArray.push(parent, "=");
        }
        foreach var recordItem in value {
            serializedArray.push(getFormStyleRequest(parent, recordItem, explode), ",");
        }
    }
    _ = serializedArray.pop();
    return string:'join("", ...serializedArray);
}

# Get Encoded URI for a given value.
#
# + value - Value to be encoded
# + return - Encoded string
isolated function getEncodedUri(anydata value) returns string {
    string|error encoded = url:encode(value.toString(), "UTF8");
    if encoded is string {
        return encoded;
    } else {
        return value.toString();
    }
}

# Generate query path with query parameter.
#
# + queryParam - Query parameter map
# + encodingMap - Details on serialization mechanism
# + return - Returns generated Path or error at failure of client initialization
isolated function getPathForQueryParam(map<anydata> queryParam, map<Encoding> encodingMap = {}) returns string|error {
    map<anydata> queriesMap = http:getQueryMap(queryParam);
    string[] param = [];
    if queriesMap.length() > 0 {
        param.push("?");
        foreach var [key, value] in queriesMap.entries() {
            if value is () {
                _ = queriesMap.remove(key);
                continue;
            }
            Encoding encodingData = encodingMap.hasKey(key) ? encodingMap.get(key) : defaultEncoding;
            if value is SimpleBasicType {
                param.push(key, "=", getEncodedUri(value.toString()));
            } else if value is SimpleBasicType[] {
                param.push(getSerializedArray(key, value, encodingData.style, encodingData.explode));
            } else if value is record {} {
                if encodingData.style == DEEPOBJECT {
                    param.push(getDeepObjectStyleRequest(key, value));
                } else {
                    param.push(getFormStyleRequest(key, value, encodingData.explode));
                }
            } else {
                param.push(key, "=", value.toString());
            }
            param.push("&");
        }
        _ = param.pop();
    }
    string restOfPath = string:'join("", ...param);
    return restOfPath;
}

isolated function createBodyParts(record {|anydata...;|} anyRecord, map<Encoding> encodingMap = {})
returns mime:Entity[]|error {
    mime:Entity[] entities = [];
    foreach [string, anydata] [key, value] in anyRecord.entries() {
        Encoding encodingData = encodingMap.hasKey(key) ? encodingMap.get(key) : {};
        string contentDisposition = string `form-data; name=${key};`;
        if value is record {byte[] fileContent; string fileName;} {
            string fileContentDisposition = string `${contentDisposition} filename=${value.fileName}`;
            mime:Entity entity = check constructEntity(fileContentDisposition, encodingData,
                    value.fileContent);
            entities.push(entity);
        } else if value is byte[] {
            mime:Entity entity = check constructEntity(contentDisposition, encodingData, value);
            entities.push(entity);
        } else if value is SimpleBasicType {
            mime:Entity entity = check constructEntity(contentDisposition, encodingData,
                    value.toString());
            entities.push(entity);
        } else if value is SimpleBasicType[] {
            if encodingData.explode {
                foreach SimpleBasicType member in value {
                    mime:Entity entity = check constructEntity(contentDisposition, encodingData,
                            member.toString());
                    entities.push(entity);
                }
            } else {
                string[] valueStrArray = from SimpleBasicType val in value
                    select val.toString();
                mime:Entity entity = check constructEntity(contentDisposition, encodingData,
                        string:'join(",", ...valueStrArray));
                entities.push(entity);
            }
        } else if value is record {} {
            mime:Entity entity = check constructEntity(contentDisposition, encodingData,
                    value.toString());
            entities.push(entity);
        } else if value is record {}[] {
            if encodingData.explode {
                foreach record {} member in value {
                    mime:Entity entity = check constructEntity(contentDisposition, encodingData,
                            member.toString());
                    entities.push(entity);
                }
            } else {
                string[] valueStrArray = from record {} val in value
                    select val.toJsonString();
                mime:Entity entity = check constructEntity(contentDisposition, encodingData,
                        string:'join(",", ...valueStrArray));
                entities.push(entity);
            }
        }
    }
    return entities;
}

isolated function constructEntity(string contentDisposition, Encoding encoding,
        string|byte[]|record {} data) returns mime:Entity|error {
    mime:Entity entity = new mime:Entity();
    entity.setContentDisposition(mime:getContentDispositionObject(contentDisposition));
    if data is byte[] {
        entity.setByteArray(data);
    } else if data is string {
        entity.setText(data);
    } else {
        entity.setJson(data.toJson());
    }
    check populateEncodingInfo(entity, encoding);
    return entity;
}

isolated function populateEncodingInfo(mime:Entity entity, Encoding encoding) returns error? {
    if encoding?.contentType is string {
        check entity.setContentType(encoding?.contentType.toString());
    }
    map<any>? headers = encoding?.headers;
    if headers is map<any> {
        foreach var [headerName, headerValue] in headers.entries() {
            if headerValue is SimpleBasicType {
                entity.setHeader(headerName, headerValue.toString());
            }
        }
    }
}

# Properties of a workflow status.
public type WorkflowStatusProperties record {|
    # Whether issues are editable in this status.
    boolean issueEditable;
|};

# Details about a notification associated with an event.
public type EventNotification record {|
    # Expand options that include additional event notification details in the response.
    string expand?;
    # The ID of the notification.
    int id?;
    # Identifies the recipients of the notification.
    "CurrentAssignee"|"Reporter"|"CurrentUser"|"ProjectLead"|"ComponentLead"|"User"|"Group"|"ProjectRole"|"EmailAddress"|"AllWatchers"|"UserCustomField"|"GroupCustomField" notificationType?;
    # The value of the `notificationType`:
    #
    #  *  `User` The `parameter` is the user account ID.
    #  *  `Group` The `parameter` is the group name.
    #  *  `ProjectRole` The `parameter` is the project role ID.
    #  *  `UserCustomField` The `parameter` is the ID of the custom field.
    #  *  `GroupCustomField` The `parameter` is the ID of the custom field.
    string 'parameter?;
    # The specified group.
    GroupName group?;
    # The custom user or group field.
    FieldDetails 'field?;
    # The email address.
    string emailAddress?;
    # The specified project role.
    ProjectRole projectRole?;
    # The specified user.
    UserDetails user?;
|};

# Represents the Queries record for the operation: deleteProjectRoleActorsFromRole
public type DeleteProjectRoleActorsFromRoleQueries record {
    # The user account ID of the user to remove as a default actor.
    string user?;
    # The group name of the group to be removed as a default actor.
    string group?;
};

# List of issue transitions.
public type Transitions record {|
    # Expand options that include additional transitions details in the response.
    string expand?;
    # List of issue transitions.
    IssueTransition[] transitions?;
|};

# Represents the Queries record for the operation: getContextsForField
public type GetContextsForFieldQueries record {
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 50;
    # The list of context IDs. To include multiple contexts, separate IDs with ampersand: `contextId=10000&contextId=10001`.
    int[] contextId?;
    # Whether to return contexts that apply to all issue types.
    boolean isAnyIssueType?;
    # Whether to return contexts that apply to all projects.
    boolean isGlobalContext?;
    # The index of the first item to return in a page of results (page offset).
    int startAt = 0;
};

# Represents the Queries record for the operation: deleteActor
public type DeleteActorQueries record {
    # The user account ID of the user to remove from the project role.
    string user?;
    # The name of the group to remove from the project role.
    string group?;
};

# List of user account IDs.
public type UserKey record {|
    # This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
    string 'key?;
    # The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. Returns *unknown* if the record is deleted and corrupted, for example, as the result of a server import.
    @constraint:String {maxLength: 128}
    string accountId?;
|};

# Properties that identify a workflow.
public type WorkflowId record {|
    # The name of the workflow.
    string name;
    # Whether the workflow is in the draft state.
    boolean draft;
|};

# Represents the Queries record for the operation: getWorkflowSchemeProjectAssociations
public type GetWorkflowSchemeProjectAssociationsQueries record {
    # The ID of a project to return the workflow schemes for. To include multiple projects, provide an ampersand-Jim: oneseparated list. For example, `projectId=10000&projectId=10001`.
    @constraint:Array {maxLength: 100, minLength: 1}
    int[] projectId;
};

# The linked item.
public type RemoteObject record {
    # The URL of the item.
    string url;
    # The title of the item.
    string title;
    # The summary details of the item.
    string summary?;
    # Details of the icon for the item. If no icon is defined, the default link icon is used in Jira.
    Icon icon?;
    # The status of the item.
    Status status?;
};

# Details of an issue type.
public type IssueTypeInfo record {|
    # The ID of the issue type.
    int id?;
    # The name of the issue type.
    string name?;
    # The avatar of the issue type.
    int avatarId?;
|};

# Details of the options for a select list issue field.
public type IssueFieldOption record {|
    # The unique identifier for the option. This is only unique within the select field's set of options.
    int id;
    # The option's name, which is displayed in Jira.
    string value;
    # The properties of the object, as arbitrary key-value pairs. These properties can be searched using JQL, if the extractions (see [Issue Field Option Property Index](https://developer.atlassian.com/cloud/jira/platform/modules/issue-field-option-property-index/)) are defined in the descriptor for the issue field module.
    record {} properties?;
    IssueFieldOptionConfiguration config?;
|};

# Details of a field configuration.
public type FieldConfiguration record {|
    # The ID of the field configuration.
    int id;
    # The name of the field configuration.
    string name;
    # The description of the field configuration.
    string description;
    # Whether the field configuration is the default.
    boolean isDefault?;
|};

# Represents the Queries record for the operation: getWorkflowsPaginated
public type GetWorkflowsPaginatedQueries record {
    # Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:
    #
    #  *  `transitions` For each workflow, returns information about the transitions inside the workflow.
    #  *  `transitions.rules` For each workflow transition, returns information about its rules. Transitions are included automatically if this expand is requested.
    #  *  `statuses` For each workflow, returns information about the statuses inside the workflow.
    #  *  `statuses.properties` For each workflow status, returns information about its properties. Statuses are included automatically if this expand is requested.
    #  *  `default` For each workflow, returns information about whether this is the default workflow.
    string expand?;
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 50;
    # The name of a workflow to return.
    string[] workflowName?;
    # The index of the first item to return in a page of results (page offset).
    int startAt = 0;
};

# The status of the item.
public type Status record {
    # Whether the item is resolved. If set to "true", the link to the issue is displayed in a strikethrough font, otherwise the link displays in normal font.
    boolean resolved?;
    # Details of the icon representing the status. If not provided, no status icon displays in Jira.
    Icon icon?;
};

# Details of a changed worklog.
public type ChangedWorklog record {|
    # The ID of the worklog.
    int worklogId?;
    # The datetime of the change.
    int updatedTime?;
    # Details of properties associated with the change.
    EntityProperty[] properties?;
|};

# Represents the Queries record for the operation: getFiltersPaginated
public type GetFiltersPaginatedQueries record {
    # This parameter is deprecated because of privacy changes. Use `accountId` instead. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. User name used to return filters with the matching `owner.name`. This parameter cannot be used with `accountId`.
    string owner?;
    # User account ID used to return filters with the matching `owner.accountId`. This parameter cannot be used with `owner`.
    @constraint:String {maxLength: 128}
    string accountId?;
    # Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:
    #
    #  *  `description` Returns the description of the filter.
    #  *  `favourite` Returns an indicator of whether the user has set the filter as a favorite.
    #  *  `favouritedCount` Returns a count of how many users have set this filter as a favorite.
    #  *  `jql` Returns the JQL query that the filter uses.
    #  *  `owner` Returns the owner of the filter.
    #  *  `searchUrl` Returns a URL to perform the filter's JQL query.
    #  *  `sharePermissions` Returns the share permissions defined for the filter.
    #  *  `subscriptions` Returns the users that are subscribed to the filter.
    #  *  `viewUrl` Returns a URL to view the filter.
    string expand?;
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 50;
    # String used to perform a case-insensitive partial match with `name`.
    string filterName?;
    # [Order](#ordering) the results by a field:
    #
    #  *  `description` Sorts by filter description. Note that this sorting works independently of whether the expand to display the description field is in use.
    #  *  `favourite_count` Sorts by the count of how many users have this filter as a favorite.
    #  *  `is_favourite` Sorts by whether the filter is marked as a favorite.
    #  *  `id` Sorts by filter ID.
    #  *  `name` Sorts by filter name.
    #  *  `owner` Sorts by the ID of the filter owner.
    "description"|"-description"|"+description"|"favorite_count"|"-favorite_count"|"+favorite_count"|"id"|"-id"|"+id"|"is_favorite"|"-is_favorite"|"+is_favorite"|"name"|"-name"|"+name"|"owner"|"-owner"|"+owner" orderBy = "name";
    # The list of filter IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`.
    int[] id?;
    # Group name used to returns filters that are shared with a group that matches `sharePermissions.group.groupname`.
    string groupname?;
    # Project ID used to returns filters that are shared with a project that matches `sharePermissions.project.id`.
    int projectId?;
    # The index of the first item to return in a page of results (page offset).
    int startAt = 0;
};

public type BulkOperationErrorResult record {|
    int:Signed32 status?;
    ErrorCollection elementErrors?;
    int:Signed32 failedElementNumber?;
|};

# List of issues and JQL queries.
public type IssuesAndJQLQueries record {|
    # A list of JQL queries.
    string[] jqls;
    # A list of issue IDs.
    int[] issueIds;
|};

# Represents the Queries record for the operation: getUserProperty
public type GetUserPropertyQueries record {
    # The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
    @constraint:String {maxLength: 128}
    string accountId?;
    # This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
    string userKey?;
    # This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
    string username?;
};

# A workflow transition rule.
public type ConnectWorkflowTransitionRule record {|
    # The ID of the transition rule.
    string id;
    # The key of the rule, as defined in the Connect app descriptor.
    string 'key;
    RuleConfiguration configuration;
    WorkflowTransition transition?;
|};

# Represents the Queries record for the operation: updateWorklog
public type UpdateWorklogQueries record {
    # The value to set as the issue's remaining time estimate, as days (\#d), hours (\#h), or minutes (\#m or \#). For example, *2d*. Required when `adjustEstimate` is `new`.
    string newEstimate?;
    # Defines how to update the issue's time estimate, the options are:
    #
    #  *  `new` Sets the estimate to a specific value, defined in `newEstimate`.
    #  *  `leave` Leaves the estimate unchanged.
    #  *  `auto` Updates the estimate by the difference between the original and updated value of `timeSpent` or `timeSpentSeconds`.
    "new"|"leave"|"manual"|"auto" adjustEstimate = "auto";
    # Use [expand](#expansion) to include additional information about worklogs in the response. This parameter accepts `properties`, which returns worklog properties.
    string expand = "";
    # Whether the worklog should be added to the issue even if the issue is not editable. For example, because the issue is closed. Only connect app users with admin permissions can use this flag.
    boolean overrideEditableFlag = false;
    # Whether users watching the issue are notified by email.
    boolean notifyUsers = true;
};

public type SimpleListWrapperGroupName record {|
    int:Signed32 size?;
    GroupName[] items?;
    ListWrapperCallbackGroupName pagingCallback?;
    ListWrapperCallbackGroupName callback?;
    int:Signed32 max\-results?;
|};

# The details of a workflow.
public type CreateWorkflowDetails record {|
    # The name of the workflow. The name must be unique. The maximum length is 255 characters. Characters can be separated by a whitespace but the name cannot start or end with a whitespace.
    string name;
    # The description of the workflow. The maximum length is 1000 characters.
    string description?;
    # The transitions of the workflow. For the request to be valid, these transitions must:
    #
    #  *  include one *initial* transition.
    #  *  not use the same name for a *global* and *directed* transition.
    #  *  have a unique name for each *global* transition.
    #  *  have a unique 'to' status for each *global* transition.
    #  *  have unique names for each transition from a status.
    #  *  not have a 'from' status on *initial* and *global* transitions.
    #  *  have a 'from' status on *directed* transitions.
    #
    # All the transition statuses must be included in `statuses`.
    CreateWorkflowTransitionDetails[] transitions;
    # The statuses of the workflow. Any status that does not include a transition is added to the workflow without a transition.
    CrateWorkflowStatusDetails[] statuses;
|};

# A page of items.
public type PageBeanFieldConfigurationItem record {|
    # The URL of the page.
    string self?;
    # If there is another page of results, the URL of the next page.
    string nextPage?;
    # The maximum number of items that could be returned.
    int:Signed32 maxResults?;
    # The index of the first item returned.
    int startAt?;
    # The number of items returned.
    int total?;
    # Whether this is the last page.
    boolean isLast?;
    # The list of items.
    FieldConfigurationItem[] values?;
|};

public type SimpleListWrapperApplicationRole record {|
    int:Signed32 size?;
    ApplicationRole[] items?;
    ListWrapperCallbackApplicationRole pagingCallback?;
    ListWrapperCallbackApplicationRole callback?;
    int:Signed32 max\-results?;
|};

# Details of the projects the option is available in.
public type IssueFieldOptionConfiguration record {|
    # Defines the projects that the option is available in. If the scope is not defined, then the option is available in all projects.
    IssueFieldOptionScopeBean scope?;
    # DEPRECATED
    ("notSelectable"|"defaultValue")[] attributes?;
|};

# The details of a created custom field context.
public type CreateCustomFieldContext record {|
    # The ID of the context.
    string id?;
    # The name of the context.
    string name;
    # The description of the context.
    string description?;
    # The list of project IDs associated with the context. If the list is empty, the context is global.
    string[] projectIds?;
    # The list of issue types IDs for the context. If the list is empty, the context refers to all issue types.
    string[] issueTypeIds?;
|};

# Represents the Queries record for the operation: getMyFilters
public type GetMyFiltersQueries record {
    # Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:
    #
    #  *  `sharedUsers` Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don't specify `sharedUsers`, then the `sharedUsers` object is returned but it doesn't list any users. The list of users returned is limited to 1000, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 1000 users, use `?expand=sharedUsers[1001:2000]`.
    #  *  `subscriptions` Returns the users that are subscribed to the filter. If you don't specify `subscriptions`, the `subscriptions` object is returned but it doesn't list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append `[start-index:end-index]` to the expand request. For example, to access the next 1000 subscriptions, use `?expand=subscriptions[1001:2000]`.
    string expand?;
    # Include the user's favorite filters in the response.
    boolean includeFavourites = false;
};

# List of issue level security items in a project.
public type ProjectIssueSecurityLevels record {|
    # Issue level security items list.
    SecurityLevel[] levels;
|};

# Represents the Queries record for the operation: deleteProjectRole
public type DeleteProjectRoleQueries record {
    # The ID of the project role that will replace the one being deleted.
    int swap?;
};

# A list of projects in which a user is granted permissions.
public type PermittedProjects record {|
    # A list of projects.
    ProjectIdentifierBean[] projects?;
|};

# Details about the complexity of the analysed Jira expression.
public type JiraExpressionComplexity record {|
    # Information that can be used to determine how many [expensive operations](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/#expensive-operations) the evaluation of the expression will perform. This information may be a formula or number. For example:
    #
    #  *  `issues.map(i => i.comments)` performs as many expensive operations as there are issues on the issues list. So this parameter returns `N`, where `N` is the size of issue list.
    #  *  `new Issue(10010).comments` gets comments for one issue, so its complexity is `2` (`1` to retrieve issue 10010 from the database plus `1` to get its comments).
    string expensiveOperations;
    # Variables used in the formula, mapped to the parts of the expression they refer to.
    record {|string...;|} variables?;
|};

# A list of webhooks.
public type WebhookDetails record {|
    # The JQL filter that specifies which issues the webhook is sent for. Only a subset of JQL can be used. The supported elements are:
    #
    #  *  Fields: `issueKey`, `project`, `issuetype`, `status`, `assignee`, `reporter`, `issue.property`, and `cf[id]` (for custom fields—only the epic label custom field is supported).
    #  *  Operators: `=`, `!=`, `IN`, and `NOT IN`.
    string jqlFilter;
    # The Jira events that trigger the webhook.
    ("jira:issue_created"|"jira:issue_updated"|"jira:issue_deleted"|"comment_created"|"comment_updated"|"comment_deleted"|"issue_property_set"|"issue_property_deleted")[] events;
|};

# Details of a permission scheme.
public type PermissionScheme record {
    # The expand options available for the permission scheme.
    string expand?;
    # The ID of the permission scheme.
    int id?;
    # The URL of the permission scheme.
    string self?;
    # The name of the permission scheme. Must be unique.
    string name;
    # A description for the permission scheme.
    string description?;
    # The scope of the permission scheme.
    Scope scope?;
    # The permission scheme to create or update. See [About permission schemes and grants](../api-group-permission-schemes/#about-permission-schemes-and-grants) for more information.
    PermissionGrant[] permissions?;
};

# Details of a custom field option and its cascading options.
public type CustomFieldOptionDetails record {|
    # The ID of the custom field option.
    int id?;
    # The value of the custom field option.
    string value?;
    # The cascading options.
    string[] cascadingOptions?;
|};

# A page of items.
public type PageBeanContext record {|
    # The URL of the page.
    string self?;
    # If there is another page of results, the URL of the next page.
    string nextPage?;
    # The maximum number of items that could be returned.
    int:Signed32 maxResults?;
    # The index of the first item returned.
    int startAt?;
    # The number of items returned.
    int total?;
    # Whether this is the last page.
    boolean isLast?;
    # The list of items.
    Context[] values?;
|};

# Represents the Queries record for the operation: setUserColumns
public type SetUserColumnsQueries record {
    # The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
    @constraint:String {maxLength: 128}
    string accountId?;
};

@constraint:String {maxLength: 128}
public type BulkGetUsersQueriesAccountIdItemsString string;

# A page of items.
public type PageBeanWebhook record {|
    # The URL of the page.
    string self?;
    # If there is another page of results, the URL of the next page.
    string nextPage?;
    # The maximum number of items that could be returned.
    int:Signed32 maxResults?;
    # The index of the first item returned.
    int startAt?;
    # The number of items returned.
    int total?;
    # Whether this is the last page.
    boolean isLast?;
    # The list of items.
    Webhook[] values?;
|};

# Details about a notification.
public type Notification record {
    # The subject of the email notification for the issue. If this is not specified, then the subject is set to the issue key and summary.
    string subject?;
    # The plain text body of the email notification for the issue.
    string textBody?;
    # The HTML body of the email notification for the issue.
    string htmlBody?;
    # The recipients of the email notification for the issue.
    NotificationRecipients to?;
    # Restricts the notifications to users with the specified permissions.
    NotificationRecipientsRestrictions restrict?;
};

public type UserWriteBean record {
    # The URL of the user.
    string self?;
    # The key for the user. When provided with `name`, overrides the value in `name` to set both `name` and `key`. This property is deprecated because of privacy changes. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
    string 'key?;
    # The username for the user. This property is deprecated because of privacy changes. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
    string name?;
    # A password for the user. If a password is not set, a random password is generated.
    string password?;
    # The email address for the user.
    string emailAddress;
    # The display name for the user.
    string displayName;
    # Deprecated, do not use.
    string[] applicationKeys?;
};

# Represents the Queries record for the operation: getUserGroups
public type GetUserGroupsQueries record {
    # The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
    @constraint:String {maxLength: 128}
    string accountId;
    # This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
    string 'key?;
    # This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
    string username?;
};

# This object is used as follows:
#
#  *  In the [ issueLink](#api-rest-api-2-issueLink-post) resource it defines and reports on the type of link between the issues. Find a list of issue link types with [Get issue link types](#api-rest-api-2-issueLinkType-get).
#  *  In the [ issueLinkType](#api-rest-api-2-issueLinkType-post) resource it defines and reports on issue link types.
public type IssueLinkType record {|
    # The ID of the issue link type and is used as follows:
    #
    #  *  In the [ issueLink](#api-rest-api-2-issueLink-post) resource it is the type of issue link. Required on create when `name` isn't provided. Otherwise, read only.
    #  *  In the [ issueLinkType](#api-rest-api-2-issueLinkType-post) resource it is read only.
    string id?;
    # The name of the issue link type and is used as follows:
    #
    #  *  In the [ issueLink](#api-rest-api-2-issueLink-post) resource it is the type of issue link. Required on create when `id` isn't provided. Otherwise, read only.
    #  *  In the [ issueLinkType](#api-rest-api-2-issueLinkType-post) resource it is required on create and optional on update. Otherwise, read only.
    string name?;
    # The description of the issue link type inward link and is used as follows:
    #
    #  *  In the [ issueLink](#api-rest-api-2-issueLink-post) resource it is read only.
    #  *  In the [ issueLinkType](#api-rest-api-2-issueLinkType-post) resource it is required on create and optional on update. Otherwise, read only.
    string inward?;
    # The description of the issue link type outward link and is used as follows:
    #
    #  *  In the [ issueLink](#api-rest-api-2-issueLink-post) resource it is read only.
    #  *  In the [ issueLinkType](#api-rest-api-2-issueLinkType-post) resource it is required on create and optional on update. Otherwise, read only.
    string outward?;
    # The URL of the issue link type. Read only.
    string self?;
|};

# Status details for an issue type.
public type IssueTypeWithStatus record {|
    # The URL of the issue type's status details.
    string self;
    # The ID of the issue type.
    string id;
    # The name of the issue type.
    string name;
    # Whether this issue type represents subtasks.
    boolean subtask;
    # List of status details for the issue type.
    StatusDetails[] statuses;
|};

# A status category.
public type StatusCategory record {
    # The URL of the status category.
    string self?;
    # The ID of the status category.
    int id?;
    # The key of the status category.
    string 'key?;
    # The name of the color used to represent the status category.
    string colorName?;
    # The name of the status category.
    string name?;
};

# Details of a worklog.
public type Worklog record {
    # The URL of the worklog item.
    string self?;
    # Details of the user who created the worklog.
    UserDetails author?;
    # Details of the user who last updated the worklog.
    UserDetails updateAuthor?;
    # A comment about the worklog. Optional when creating or updating a worklog.
    string comment?;
    # The datetime on which the worklog was created.
    string created?;
    # The datetime on which the worklog was last updated.
    string updated?;
    # Details about any restrictions in the visibility of the worklog. Optional when creating or updating a worklog.
    Visibility visibility?;
    # The datetime on which the worklog effort was started. Required when creating a worklog. Optional when updating a worklog.
    string started?;
    # The time spent working on the issue as days (\#d), hours (\#h), or minutes (\#m or \#). Required when creating a worklog if `timeSpentSeconds` isn't provided. Optional when updating a worklog. Cannot be provided if `timeSpentSecond` is provided.
    string timeSpent?;
    # The time in seconds spent working on the issue. Required when creating a worklog if `timeSpent` isn't provided. Optional when updating a worklog. Cannot be provided if `timeSpent` is provided.
    int timeSpentSeconds?;
    # The ID of the worklog record.
    string id?;
    # The ID of the issue this worklog is for.
    string issueId?;
    # Details of properties for the worklog. Optional when creating or updating a worklog.
    EntityProperty[] properties?;
};

# Details about a licensed Jira application.
public type LicensedApplication record {|
    # The ID of the application.
    string id;
    # The licensing plan.
    "UNLICENSED"|"FREE"|"PAID" plan;
|};

# An operand that can be part of a list operand.
public type JqlQueryUnitaryOperand ValueOperand|FunctionOperand|KeywordOperand;

# The field configuration for an issue type.
public type FieldConfigurationIssueTypeItem record {|
    # The ID of the field configuration scheme.
    string fieldConfigurationSchemeId;
    # The ID of the issue type or *default*. When set to *default* this field configuration issue type item applies to all issue types without a field configuration.
    string issueTypeId;
    # The ID of the field configuration.
    string fieldConfigurationId;
|};

# Details of names changed in the record event.
public type ChangedValueBean record {|
    # The name of the field changed.
    string fieldName?;
    # The value of the field before the change.
    string changedFrom?;
    # The value of the field after the change.
    string changedTo?;
|};

# A workflow transition rule.
public type WorkflowTransitionRule record {|
    # The type of the transition rule.
    string 'type;
    # The configuration of the transition rule. This is currently returned only for some of the rule types. Availability of this property is subject to change.
    anydata configuration?;
|};

# Bulk issue property update request details.
public type BulkIssuePropertyUpdateRequest record {|
    # The value of the property. The value must be a [valid](https://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.
    anydata value?;
    # EXPERIMENTAL. The Jira expression to calculate the value of the property. The value of the expression must be an object that can be converted to JSON, such as a number, boolean, string, list, or map. The context variables available to the expression are `issue` and `user`. Issues for which the expression returns a value whose JSON representation is longer than 32768 characters are ignored.
    string expression?;
    # The bulk operation filter.
    IssueFilterForBulkPropertySet filter?;
|};

public type PermissionsKeysBean record {|
    # A list of permission keys.
    string[] permissions;
|};

# The details of a workflow transition.
public type CreateWorkflowTransitionDetails record {|
    # The name of the transition. The maximum length is 60 characters.
    string name;
    # The description of the transition. The maximum length is 1000 characters.
    string description?;
    # The statuses the transition can start from.
    string[] 'from?;
    # The status the transition goes to.
    string to;
    # The type of the transition.
    "global"|"initial"|"directed" 'type;
|};

# An operand that is a user-provided value.
public type ValueOperand record {
    # The operand value.
    string value;
};

# List of all permission schemes.
public type PermissionSchemes record {|
    # Permission schemes list.
    PermissionScheme[] permissionSchemes?;
|};

# Represents the Queries record for the operation: deleteWorkflowTransitionProperty
public type DeleteWorkflowTransitionPropertyQueries record {
    # The workflow status. Set to `live` for inactive workflows or `draft` for draft workflows. Active workflows cannot be edited.
    "live"|"draft" workflowMode?;
    # The name of the workflow that the transition belongs to.
    string workflowName;
    # The name of the transition property to delete, also known as the name of the property.
    string 'key;
};

# A page of items.
public type PageBeanScreen record {|
    # The URL of the page.
    string self?;
    # If there is another page of results, the URL of the next page.
    string nextPage?;
    # The maximum number of items that could be returned.
    int:Signed32 maxResults?;
    # The index of the first item returned.
    int startAt?;
    # The number of items returned.
    int total?;
    # Whether this is the last page.
    boolean isLast?;
    # The list of items.
    Screen[] values?;
|};

# Details about the roles in a project.
public type ProjectRole record {|
    # The URL the project role details.
    string self?;
    # The name of the project role.
    string name?;
    # The ID of the project role.
    int id?;
    # The description of the project role.
    string description?;
    # The list of users who act in this role.
    RoleActor[] actors?;
    # The scope of the role. Indicated for roles associated with [next-gen projects](https://confluence.atlassian.com/x/loMyO).
    Scope scope?;
    # The translated name of the project role.
    string translatedName?;
    # Whether the calling user is part of this role.
    boolean currentUserRole?;
    # Whether the roles are configurable for this project.
    boolean roleConfigurable?;
    # Whether this role is the admin role for the project.
    boolean admin?;
    # Whether this role is the default role for the project
    boolean default?;
|};

# The ID of an issue type scheme.
public type IssueTypeSchemeID record {|
    # The ID of the issue type scheme.
    string issueTypeSchemeId;
|};

# A page of items.
public type PageBeanIssueTypeToContextMapping record {|
    # The URL of the page.
    string self?;
    # If there is another page of results, the URL of the next page.
    string nextPage?;
    # The maximum number of items that could be returned.
    int:Signed32 maxResults?;
    # The index of the first item returned.
    int startAt?;
    # The number of items returned.
    int total?;
    # Whether this is the last page.
    boolean isLast?;
    # The list of items.
    IssueTypeToContextMapping[] values?;
|};

# Represents the Queries record for the operation: getUserEmailBulk
public type GetUserEmailBulkQueries record {
    # The account IDs of the users for which emails are required. An `accountId` is an identifier that uniquely identifies the user across all Atlassian products. For example, `5b10ac8d82e05b22cc7d4ef5`. Note, this should be treated as an opaque identifier (that is, do not assume any structure in the value).
    GetUserEmailBulkQueriesAccountIdItemsString[] accountId;
};

public type IssueTypeUpdateBean record {|
    # The unique name for the issue type. The maximum length is 60 characters.
    string name?;
    # The description of the issue type.
    string description?;
    # The ID of an issue type avatar.
    int avatarId?;
|};

# A workflow transition.
public type WorkflowTransition record {|
    # The transition ID.
    int:Signed32 id;
    # The transition name.
    string name;
|};

# Details of any errors encountered while updating workflow transition rules for a workflow.
public type WorkflowTransitionRulesUpdateErrorDetails record {|
    WorkflowId workflowId;
    # A list of transition rule update errors, indexed by the transition rule ID. Any transition rule that appears here wasn't updated.
    record {|string[]...;|} ruleUpdateErrors;
    # The list of errors that specify why the workflow update failed. The workflow was not updated if the list contains any entries.
    string[] updateErrors;
|};

# A screen with tab details.
public type ScreenWithTab record {|
    # The ID of the screen.
    int id?;
    # The name of the screen.
    string name?;
    # The description of the screen.
    string description?;
    # The scope of the screen.
    Scope scope?;
    # The tab for the screen
    ScreenableTab tab?;
|};

# Property key details.
public type PropertyKey record {|
    # The URL of the property.
    string self?;
    # The key of the property.
    string 'key?;
|};

# Error messages from an operation.
public type ErrorCollection record {|
    # The list of error messages produced by this operation. For example, "input parameter 'key' must be provided"
    string[] errorMessages?;
    # The list of errors by parameter returned by the operation. For example,"projectKey": "Project keys must start with an uppercase letter, followed by one or more uppercase alphanumeric characters."
    record {|string...;|} errors?;
    int:Signed32 status?;
|};

public type IncludedFields record {|
    string[] actuallyIncluded?;
    string[] included?;
    string[] excluded?;
|};

# Represents the Queries record for the operation: getProjectVersions
public type GetProjectVersionsQueries record {
    # Use [expand](#expansion) to include additional information in the response. This parameter accepts `operations`, which returns actions that can be performed on the version.
    string expand?;
};

public type NestedResponse record {|
    int:Signed32 status?;
    ErrorCollection errorCollection?;
|};

# A page of changelogs.
public type PageOfChangelogs record {|
    # The index of the first item returned on the page.
    int:Signed32 startAt?;
    # The maximum number of results that could be on the page.
    int:Signed32 maxResults?;
    # The number of results on the page.
    int:Signed32 total?;
    # The list of changelogs.
    Changelog[] histories?;
|};

# Details of an item associated with the changed record.
public type AssociatedItemBean record {|
    # The ID of the associated record.
    string id?;
    # The name of the associated record.
    string name?;
    # The type of the associated record.
    string typeName?;
    # The ID of the associated parent record.
    string parentId?;
    # The name of the associated parent record.
    string parentName?;
|};

# Details about an attachment.
public type Attachment record {
    # The URL of the attachment details response.
    string self?;
    # The ID of the attachment.
    string id?;
    # The file name of the attachment.
    string filename?;
    # Details of the user who added the attachment.
    UserDetails author?;
    # The datetime the attachment was created.
    string created?;
    # The size of the attachment.
    int size?;
    # The MIME type of the attachment.
    string mimeType?;
    # The content of the attachment.
    string content?;
    # The URL of a thumbnail representing the attachment.
    string thumbnail?;
};

# Represents the Queries record for the operation: getChangeLogs
public type GetChangeLogsQueries record {
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 100;
    # The index of the first item to return in a page of results (page offset).
    int:Signed32 startAt = 0;
};

# Details of a field that can be used in advanced searches.
public type FieldReferenceData record {|
    # The field identifier.
    string value?;
    # The display name contains the following:
    #
    #  *  for system fields, the field name. For example, `Summary`.
    #  *  for collapsed custom fields, the field name followed by a hyphen and then the field name and field type. For example, `Component - Component[Dropdown]`.
    #  *  for other custom fields, the field name followed by a hyphen and then the custom field ID. For example, `Component - cf[10061]`.
    string displayName?;
    # Whether the field can be used in a query's `ORDER BY` clause.
    "true"|"false" orderable?;
    # Whether the content of this field can be searched.
    "true"|"false" searchable?;
    # Whether the field provide auto-complete suggestions.
    "true"|"false" auto?;
    # If the item is a custom field, the ID of the custom field.
    string cfid?;
    # The valid search operators for the field.
    string[] operators?;
    # The data types of items in the field.
    string[] types?;
|};

# An operand that is a list of values.
public type ListOperand record {
    # The list of operand values.
    JqlQueryUnitaryOperand[] values;
};

# Details of the scope of the default sharing for new filters and dashboards.
public type DefaultShareScope record {|
    # The scope of the default sharing for new filters and dashboards:
    #
    #  *  `AUTHENTICATED` Shared with all logged-in users.
    #  *  `GLOBAL` Shared with all logged-in users. This shows as `AUTHENTICATED` in the response.
    #  *  `PRIVATE` Not shared with any users.
    "GLOBAL"|"AUTHENTICATED"|"PRIVATE" scope;
|};

# Details of webhooks to register.
public type WebhookRegistrationDetails record {|
    # A list of webhooks.
    WebhookDetails[] webhooks;
    # The URL that specifies where to send the webhooks. This URL must use the same base URL as the Connect app.
    string url;
|};

# Represents the Queries record for the operation: getScreensForField
public type GetScreensForFieldQueries record {
    # Use [expand](#expansion) to include additional information about screens in the response. This parameter accepts `tab` which returns details about the screen tabs the field is used in.
    string expand?;
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 100;
    # The index of the first item to return in a page of results (page offset).
    int startAt = 0;
};

# Details about a project version.
public type Version record {|
    # Use [expand](em>#expansion) to include additional information about version in the response. This parameter accepts a comma-separated list. Expand options include:
    #
    #  *  `operations` Returns the list of operations available for this version.
    #  *  `issuesstatus` Returns the count of issues in this version for each of the status categories *to do*, *in progress*, *done*, and *unmapped*. The *unmapped* property contains a count of issues with a status other than *to do*, *in progress*, and *done*.
    #
    # Optional for create and update.
    string expand?;
    # The URL of the version.
    string self?;
    # The ID of the version.
    string id?;
    # The description of the version. Optional when creating or updating a version.
    string description?;
    # The unique name of the version. Required when creating a version. Optional when updating a version. The maximum length is 255 characters.
    string name?;
    # Indicates that the version is archived. Optional when creating or updating a version.
    boolean archived?;
    # Indicates that the version is released. If the version is released a request to release again is ignored. Not applicable when creating a version. Optional when updating a version.
    boolean released?;
    # The start date of the version. Expressed in ISO 8601 format (yyyy-mm-dd). Optional when creating or updating a version.
    string startDate?;
    # The release date of the version. Expressed in ISO 8601 format (yyyy-mm-dd). Optional when creating or updating a version.
    string releaseDate?;
    # Indicates that the version is overdue.
    boolean overdue?;
    # The date on which work on this version is expected to start, expressed in the instance's *Day/Month/Year Format* date format.
    string userStartDate?;
    # The date on which work on this version is expected to finish, expressed in the instance's *Day/Month/Year Format* date format.
    string userReleaseDate?;
    # Deprecated. Use `projectId`.
    string project?;
    # The ID of the project to which this version is attached. Required when creating a version. Not applicable when updating a version.
    int projectId?;
    # The URL of the self link to the version to which all unfixed issues are moved when a version is released. Not applicable when creating a version. Optional when updating a version.
    string moveUnfixedIssuesTo?;
    # If the expand option `operations` is used, returns the list of operations available for this version.
    SimpleLink[] operations?;
    # If the expand option `issuesstatus` is used, returns the count of issues in this version for each of the status categories *to do*, *in progress*, *done*, and *unmapped*. The *unmapped* property contains a count of issues with a status other than *to do*, *in progress*, and *done*.
    VersionIssuesStatus issuesStatusForFixVersion?;
|};

# Details of an issue level security item.
public type SecurityLevel record {|
    # The URL of the issue level security item.
    string self?;
    # The ID of the issue level security item.
    string id?;
    # The description of the issue level security item.
    string description?;
    # The name of the issue level security item.
    string name?;
|};

# Details of a custom field context.
public type CustomFieldContextUpdateDetails record {|
    # The name of the custom field context. The name must be unique. The maximum length is 255 characters.
    string name?;
    # The description of the custom field context. The maximum length is 255 characters.
    string description?;
|};

# Details about a security scheme.
public type SecurityScheme record {|
    # The URL of the issue security scheme.
    string self?;
    # The ID of the issue security scheme.
    int id?;
    # The name of the issue security scheme.
    string name?;
    # The description of the issue security scheme.
    string description?;
    # The ID of the default security level.
    int defaultSecurityLevelId?;
    SecurityLevel[] levels?;
|};

# Details about a workflow.
public type DeprecatedWorkflow record {|
    # The name of the workflow.
    string name?;
    # The description of the workflow.
    string description?;
    # The datetime the workflow was last modified.
    string lastModifiedDate?;
    # This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
    string lastModifiedUser?;
    # The account ID of the user that last modified the workflow.
    string lastModifiedUserAccountId?;
    # The number of steps included in the workflow.
    int:Signed32 steps?;
    # The scope where this workflow applies
    Scope scope?;
    boolean default?;
|};

# A page of items.
public type PageBeanCustomFieldContextDefaultValue record {|
    # The URL of the page.
    string self?;
    # If there is another page of results, the URL of the next page.
    string nextPage?;
    # The maximum number of items that could be returned.
    int:Signed32 maxResults?;
    # The index of the first item returned.
    int startAt?;
    # The number of items returned.
    int total?;
    # Whether this is the last page.
    boolean isLast?;
    # The list of items.
    CustomFieldContextDefaultValue[] values?;
|};

# Represents the Queries record for the operation: getIssueWorklog
public type GetIssueWorklogQueries record {
    # Use [expand](#expansion) to include additional information about worklogs in the response. This parameter accepts`properties`, which returns worklog properties.
    string expand = "";
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 1048576;
    # The worklog start date and time, as a UNIX timestamp in milliseconds, after which worklogs are returned.
    int startedAfter?;
    # The index of the first item to return in a page of results (page offset).
    int startAt = 0;
};

# A page of items.
public type PageBeanFieldConfigurationSchemeProjects record {|
    # The URL of the page.
    string self?;
    # If there is another page of results, the URL of the next page.
    string nextPage?;
    # The maximum number of items that could be returned.
    int:Signed32 maxResults?;
    # The index of the first item returned.
    int startAt?;
    # The number of items returned.
    int total?;
    # Whether this is the last page.
    boolean isLast?;
    # The list of items.
    FieldConfigurationSchemeProjects[] values?;
|};

# Details of an application property.
public type ApplicationProperty record {|
    # The ID of the application property. The ID and key are the same.
    string id?;
    # The key of the application property. The ID and key are the same.
    string 'key?;
    # The new value.
    string value?;
    # The name of the application property.
    string name?;
    # The description of the application property.
    string desc?;
    # The data type of the application property.
    string 'type?;
    # The default value of the application property.
    string defaultValue?;
    string example?;
    # The allowed values, if applicable.
    string[] allowedValues?;
|};

# Properties that identify a published workflow.
public type PublishedWorkflowId record {|
    # The name of the workflow.
    string name;
    # The entity ID of the workflow.
    string entityId?;
|};

# Container for a list of webhook IDs.
public type ContainerForWebhookIDs record {|
    # A list of webhook IDs.
    int[] webhookIds;
|};

# Represents the Queries record for the operation: getWorkflowTransitionRuleConfigurations
public type GetWorkflowTransitionRuleConfigurationsQueries record {
    # The types of the transition rules to return.
    ("postfunction"|"condition"|"validator")[] types;
    # Use [expand](#expansion) to include additional information in the response. This parameter accepts `transition`, which, for each rule, returns information about the transition the rule is assigned to.
    string expand?;
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 10;
    # The transition rule class keys, as defined in the Connect app descriptor, of the transition rules to return.
    string[] keys?;
    # The index of the first item to return in a page of results (page offset).
    int startAt = 0;
};

# Default value for a multi-select custom field.
public type CustomFieldContextDefaultValueMultipleOption record {
    # The ID of the context.
    string contextId;
    # The list of IDs of the default options.
    string[] optionIds;
    string 'type;
};

# Details of an operation to perform on a field.
public type FieldUpdateOperation record {|
    # A map containing the name of a field and the value to add to it.
    anydata add?;
    # A map containing the name of a field and the value to set in it.
    anydata set?;
    # A map containing the name of a field and the value to removed from it.
    anydata remove?;
    # A map containing the name of a field and the value to edit in it.
    anydata edit?;
|};

# An icon. If no icon is defined:
#
#  *  for a status icon, no status icon displays in Jira.
#  *  for the remote object icon, the default link icon displays in Jira.
public type Icon record {
    # The URL of an icon that displays at 16x16 pixel in Jira.
    string url16x16?;
    # The title of the icon. This is used as follows:
    #
    #  *  For a status icon it is used as a tooltip on the icon. If not set, the status icon doesn't display a tooltip in Jira.
    #  *  For the remote object icon it is used in conjunction with the application name to display a tooltip for the link's icon. The tooltip takes the format "\[application name\] icon title". Blank itemsare excluded from the tooltip title. If both items are blank, the icon tooltop displays as "Web Link".
    string title?;
    # The URL of the tooltip, used only for a status icon. If not set, the status icon in Jira is not clickable.
    string link?;
};

public type SearchRequestBean record {|
    # A [JQL](https://confluence.atlassian.com/x/egORLQ) expression.
    string jql?;
    # The index of the first item to return in the page of results (page offset). The base index is `0`.
    int:Signed32 startAt?;
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 50;
    # A list of fields to return for each issue, use it to retrieve a subset of fields. This parameter accepts a comma-separated list. Expand options include:
    #
    #  *  `*all` Returns all fields.
    #  *  `*navigable` Returns navigable fields.
    #  *  Any issue field, prefixed with a minus to exclude.
    #
    # The default is `*navigable`.
    #
    # Examples:
    #
    #  *  `summary,comment` Returns the summary and comments fields only.
    #  *  `-description` Returns all navigable (default) fields except description.
    #  *  `*all,-comment` Returns all fields except comments.
    #
    # Multiple `fields` parameters can be included in a request.
    #
    # Note: All navigable fields are returned by default. This differs from [GET issue](#api-rest-api-2-issue-issueIdOrKey-get) where the default is all fields.
    string[] fields?;
    # Determines how to validate the JQL query and treat the validation results. Supported values:
    #
    #  *  `strict` Returns a 400 response code if any errors are found, along with a list of all errors (and warnings).
    #  *  `warn` Returns all errors as warnings.
    #  *  `none` No validation is performed.
    #  *  `true` *Deprecated* A legacy synonym for `strict`.
    #  *  `false` *Deprecated* A legacy synonym for `warn`.
    #
    # The default is `strict`.
    #
    # Note: If the JQL is not correctly formed a 400 response code is returned, regardless of the `validateQuery` value.
    "strict"|"warn"|"none"|"true"|"false" validateQuery?;
    # Use [expand](em>#expansion) to include additional information about issues in the response. Note that, unlike the majority of instances where `expand` is specified, `expand` is defined as a list of values. The expand options are:
    #
    #  *  `renderedFields` Returns field values rendered in HTML format.
    #  *  `names` Returns the display name of each field.
    #  *  `schema` Returns the schema describing a field type.
    #  *  `transitions` Returns all possible transitions for the issue.
    #  *  `operations` Returns all possible operations for the issue.
    #  *  `editmeta` Returns information about how each field can be edited.
    #  *  `changelog` Returns a list of recent updates to an issue, sorted by date, starting from the most recent.
    #  *  `versionedRepresentations` Instead of `fields`, returns `versionedRepresentations` a JSON array containing each version of a field's value, with the highest numbered item representing the most recent version.
    string[] expand?;
    # A list of up to 5 issue properties to include in the results. This parameter accepts a comma-separated list.
    string[] properties?;
    # Reference fields by their key (rather than ID). The default is `false`.
    boolean fieldsByKeys?;
|};

# Represents the Queries record for the operation: updateDraftWorkflowMapping
public type UpdateDraftWorkflowMappingQueries record {
    # The name of the workflow.
    string workflowName;
};

public type AddFieldBean record {|
    # The ID of the field to add.
    string fieldId;
|};

# A field within a field configuration.
public type FieldConfigurationItem record {|
    # The ID of the field within the field configuration.
    string id;
    # The description of the field within the field configuration.
    string description?;
    # Whether the field is hidden in the field configuration.
    boolean isHidden?;
    # Whether the field is required in the field configuration.
    boolean isRequired?;
|};

# Bulk operation filter details.
public type IssueFilterForBulkPropertySet record {|
    # List of issues to perform the bulk operation on.
    int[] entityIds?;
    # The value of properties to perform the bulk operation on.
    anydata currentValue?;
    # Whether the bulk operation occurs only when the property is present on or absent from an issue.
    boolean hasProperty?;
|};

# Details of a custom field option for a context.
public type CustomFieldOptionUpdate record {|
    # The ID of the custom field option.
    string id;
    # The value of the custom field option.
    string value?;
    # Whether the option is disabled.
    boolean disabled?;
|};

# Represents the Queries record for the operation: storeAvatar
public type StoreAvatarQueries record {
    # The length of each side of the crop region.
    int:Signed32 size;
    # The X coordinate of the top-left corner of the crop region.
    int:Signed32 x = 0;
    # The Y coordinate of the top-left corner of the crop region.
    int:Signed32 y = 0;
};

# A list of parsed JQL queries.
public type ParsedJqlQueries record {|
    # A list of parsed JQL queries.
    ParsedJqlQuery[] queries;
|};

# The ID of a screen scheme.
public type UpdateDefaultScreenScheme record {|
    # The ID of the screen scheme.
    string screenSchemeId;
|};

# Details about the default workflow.
public type DefaultWorkflow record {|
    # The name of the workflow to set as the default workflow.
    string workflow;
    # Whether a draft workflow scheme is created or updated when updating an active workflow scheme. The draft is updated with the new default workflow. Defaults to `false`.
    boolean updateDraftIfNeeded?;
|};

# List of changed worklogs.
public type ChangedWorklogs record {|
    # Changed worklog list.
    ChangedWorklog[] values?;
    # The datetime of the first worklog item in the list.
    int since?;
    # The datetime of the last worklog item in the list.
    int until?;
    # The URL of this changed worklogs list.
    string self?;
    # The URL of the next list of changed worklogs.
    string nextPage?;
    boolean lastPage?;
|};

# The date the newly refreshed webhooks expire.
public type WebhooksExpirationDate record {|
    int expirationDate;
|};

# Paginated list of worklog details
public type PageOfWorklogs record {
    # The index of the first item returned on the page.
    int:Signed32 startAt?;
    # The maximum number of results that could be on the page.
    int:Signed32 maxResults?;
    # The number of results on the page.
    int:Signed32 total?;
    # List of worklogs.
    Worklog[] worklogs?;
};

# A container for a list of workflow schemes together with the projects they are associated with.
public type ContainerOfWorkflowSchemeAssociations record {|
    # A list of workflow schemes together with projects they are associated with.
    WorkflowSchemeAssociations[] values;
|};

# Details of a field.
public type Field record {|
    # The ID of the field.
    string id;
    # The name of the field.
    string name;
    JsonTypeBean schema;
    # The description of the field.
    string description?;
    # The key of the field.
    string 'key?;
    # Whether the field is locked.
    boolean isLocked?;
    # The searcher key of the field. Returned for custom fields.
    string searcherKey?;
    # Number of screens where the field is used.
    int screensCount?;
    # Number of contexts where the field is used.
    int contextsCount?;
    FieldLastUsed lastUsed?;
|};

# Details about the Jira instance.
public type ServerInformation record {|
    # The base URL of the Jira instance.
    string baseUrl?;
    # The version of Jira.
    string version?;
    # The major, minor, and revision version numbers of the Jira version.
    int:Signed32[] versionNumbers?;
    # The type of server deployment. This is always returned as *Cloud*.
    string deploymentType?;
    # The build number of the Jira version.
    int:Signed32 buildNumber?;
    # The timestamp when the Jira version was built.
    string buildDate?;
    # The time in Jira when this request was responded to.
    string serverTime?;
    # The unique identifier of the Jira version.
    string scmInfo?;
    # The name of the Jira instance.
    string serverTitle?;
    # Jira instance health check results. Deprecated and no longer returned.
    HealthCheckResult[] healthChecks?;
|};

# Represents the Queries record for the operation: getDraftWorkflow
public type GetDraftWorkflowQueries record {
    # The name of a workflow in the scheme. Limits the results to the workflow-issue type mapping for the specified workflow.
    string workflowName?;
};

# Details of a custom option for a field.
public type CustomFieldOption record {|
    # The URL of these custom field option details.
    string self?;
    # The value of the custom field option.
    string value?;
|};

# Default value for a cascading select custom field.
public type CustomFieldContextDefaultValueCascadingOption record {
    # The ID of the context.
    string contextId;
    # The ID of the default option.
    string optionId;
    # The ID of the default cascading option.
    string cascadingOptionId?;
    string 'type;
};

# The project and issue type mapping.
public type ProjectIssueTypeMapping record {|
    # The ID of the project.
    string projectId;
    # The ID of the issue type.
    string issueTypeId;
|};

# Details about a project component.
public type Component record {|
    # The URL of the component.
    string self?;
    # The unique identifier for the component.
    string id?;
    # The unique name for the component in the project. Required when creating a component. Optional when updating a component. The maximum length is 255 characters.
    string name?;
    # The description for the component. Optional when creating or updating a component.
    string description?;
    # The user details for the component's lead user.
    User lead?;
    # This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
    string leadUserName?;
    # The accountId of the component's lead user. The accountId uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
    @constraint:String {maxLength: 128}
    string leadAccountId?;
    # The nominal user type used to determine the assignee for issues created with this component. See `realAssigneeType` for details on how the type of the user, and hence the user, assigned to issues is determined. Can take the following values:
    #
    #  *  `PROJECT_LEAD` the assignee to any issues created with this component is nominally the lead for the project the component is in.
    #  *  `COMPONENT_LEAD` the assignee to any issues created with this component is nominally the lead for the component.
    #  *  `UNASSIGNED` an assignee is not set for issues created with this component.
    #  *  `PROJECT_DEFAULT` the assignee to any issues created with this component is nominally the default assignee for the project that the component is in.
    #
    # Default value: `PROJECT_DEFAULT`.
    # Optional when creating or updating a component.
    "PROJECT_DEFAULT"|"COMPONENT_LEAD"|"PROJECT_LEAD"|"UNASSIGNED" assigneeType?;
    # The details of the user associated with `assigneeType`, if any. See `realAssignee` for details of the user assigned to issues created with this component.
    User assignee?;
    # The type of the assignee that is assigned to issues created with this component, when an assignee cannot be set from the `assigneeType`. For example, `assigneeType` is set to `COMPONENT_LEAD` but no component lead is set. This property is set to one of the following values:
    #
    #  *  `PROJECT_LEAD` when `assigneeType` is `PROJECT_LEAD` and the project lead has permission to be assigned issues in the project that the component is in.
    #  *  `COMPONENT_LEAD` when `assignee`Type is `COMPONENT_LEAD` and the component lead has permission to be assigned issues in the project that the component is in.
    #  *  `UNASSIGNED` when `assigneeType` is `UNASSIGNED` and Jira is configured to allow unassigned issues.
    #  *  `PROJECT_DEFAULT` when none of the preceding cases are true.
    "PROJECT_DEFAULT"|"COMPONENT_LEAD"|"PROJECT_LEAD"|"UNASSIGNED" realAssigneeType?;
    # The user assigned to issues created with this component, when `assigneeType` does not identify a valid assignee.
    User realAssignee?;
    # Whether a user is associated with `assigneeType`. For example, if the `assigneeType` is set to `COMPONENT_LEAD` but the component lead is not set, then `false` is returned.
    boolean isAssigneeTypeValid?;
    # The key of the project the component is assigned to. Required when creating a component. Can't be updated.
    string project?;
    # The ID of the project the component is assigned to.
    int projectId?;
|};

# A paginated list of users sharing the filter. This includes users that are members of the groups or can browse the projects that the filter is shared with.
public type UserList record {|
    # The number of items on the page.
    int:Signed32 size?;
    # The list of items.
    User[] items?;
    # The maximum number of results that could be on the page.
    int:Signed32 max\-results?;
    # The index of the first item returned on the page.
    int:Signed32 start\-index?;
    # The index of the last item returned on the page.
    int:Signed32 end\-index?;
|};

# Represents the Queries record for the operation: getIssue
public type GetIssueQueries record {
    # Use [expand](#expansion) to include additional information about the issues in the response. This parameter accepts a comma-separated list. Expand options include:
    #
    #  *  `renderedFields` Returns field values rendered in HTML format.
    #  *  `names` Returns the display name of each field.
    #  *  `schema` Returns the schema describing a field type.
    #  *  `transitions` Returns all possible transitions for the issue.
    #  *  `editmeta` Returns information about how each field can be edited.
    #  *  `changelog` Returns a list of recent updates to an issue, sorted by date, starting from the most recent.
    #  *  `versionedRepresentations` Returns a JSON array for each version of a field's value, with the highest number representing the most recent version. Note: When included in the request, the `fields` parameter is ignored.
    string expand?;
    # Whether fields in `fields` are referenced by keys rather than IDs. This parameter is useful where fields have been added by a connect app and a field's key may differ from its ID.
    boolean fieldsByKeys = false;
    # A list of fields to return for the issue. This parameter accepts a comma-separated list. Use it to retrieve a subset of fields. Allowed values:
    #
    #  *  `*all` Returns all fields.
    #  *  `*navigable` Returns navigable fields.
    #  *  Any issue field, prefixed with a minus to exclude.
    #
    # Examples:
    #
    #  *  `summary,comment` Returns only the summary and comments fields.
    #  *  `-description` Returns all (default) fields except description.
    #  *  `*navigable,-comment` Returns all navigable fields except comment.
    #
    # This parameter may be specified multiple times. For example, `fields=field1,field2& fields=field3`.
    #
    # Note: All fields are returned by default. This differs from [Search for issues using JQL (GET)](#api-rest-api-2-search-get) and [Search for issues using JQL (POST)](#api-rest-api-2-search-post) where the default is all navigable fields.
    string[] fields?;
    # A list of issue properties to return for the issue. This parameter accepts a comma-separated list. Allowed values:
    #
    #  *  `*all` Returns all issue properties.
    #  *  Any issue property key, prefixed with a minus to exclude.
    #
    # Examples:
    #
    #  *  `*all` Returns all properties.
    #  *  `*all,-prop1` Returns all properties except `prop1`.
    #  *  `prop1,prop2` Returns `prop1` and `prop2` properties.
    #
    # This parameter may be specified multiple times. For example, `properties=prop1,prop2& properties=prop3`.
    string[] properties?;
    # Whether the project in which the issue is created is added to the user's **Recently viewed** project list, as shown under **Projects** in Jira. This also populates the [JQL issues search](#api-rest-api-2-search-get) `lastViewed` field.
    boolean updateHistory = false;
};

# A page containing dashboard details.
public type PageOfDashboards record {|
    # The index of the first item returned on the page.
    int:Signed32 startAt?;
    # The maximum number of results that could be on the page.
    int:Signed32 maxResults?;
    # The number of results on the page.
    int:Signed32 total?;
    # The URL of the previous page of results, if any.
    string prev?;
    # The URL of the next page of results, if any.
    string next?;
    # List of dashboards.
    Dashboard[] dashboards?;
|};

# Represents the Queries record for the operation: getProjectRoleDetails
public type GetProjectRoleDetailsQueries record {
    # Whether the roles should be filtered to include only those the user is assigned to.
    boolean currentMember = false;
    boolean excludeConnectAddons = false;
};

# Issue type screen scheme with a list of the projects that use it.
public type IssueTypeScreenSchemesProjects record {|
    # Details of an issue type screen scheme.
    IssueTypeScreenScheme issueTypeScreenScheme;
    # The IDs of the projects using the issue type screen scheme.
    string[] projectIds;
|};

# Details of the identifiers for a created or updated remote issue link.
public type RemoteIssueLinkIdentifies record {|
    # The ID of the remote issue link, such as the ID of the item on the remote system.
    int id?;
    # The URL of the remote issue link.
    string self?;
|};

# Represents the Queries record for the operation: getWorkflowSchemeIssueType
public type GetWorkflowSchemeIssueTypeQueries record {
    # Returns the mapping from the workflow scheme's draft rather than the workflow scheme, if set to true. If no draft exists, the mapping from the workflow scheme is returned.
    boolean returnDraftIfExists = false;
};

# A list of issue IDs and the value to update a custom field to.
public type CustomFieldValueUpdate record {|
    # The list of issue IDs.
    int[] issueIds;
    # The value for the custom field. The value must be compatible with the [custom field type](https://developer.atlassian.com/platform/forge/manifest-reference/modules/#data-types) as follows:
    #
    #  *  `string` – the value must be a string.
    #  *  `number` – the value must be a number.
    #  *  `datetime` – the value must be a string that represents a date in the ISO format, for example `"2021-01-18T12:00:00-03:00"`.
    #  *  `user` – the value must be an object that contains the `accountId` field.
    #  *  `group` – the value must be an object that contains the group `name` field.
    #
    # A list of appropriate values must be provided if the field is of the `list` [collection type](https://developer.atlassian.com/platform/forge/manifest-reference/modules/#collection-types).
    anydata value;
|};

# A page of items.
public type PageBeanIssueTypeScreenSchemeItem record {|
    # The URL of the page.
    string self?;
    # If there is another page of results, the URL of the next page.
    string nextPage?;
    # The maximum number of items that could be returned.
    int:Signed32 maxResults?;
    # The index of the first item returned.
    int startAt?;
    # The number of items returned.
    int total?;
    # Whether this is the last page.
    boolean isLast?;
    # The list of items.
    IssueTypeScreenSchemeItem[] values?;
|};

# Details of an avatar.
public type Avatar record {|
    # The ID of the avatar.
    string id;
    # The owner of the avatar. For a system avatar the owner is null (and nothing is returned). For non-system avatars this is the appropriate identifier, such as the ID for a project or the account ID for a user.
    string owner?;
    # Whether the avatar is a system avatar.
    boolean isSystemAvatar?;
    # Whether the avatar is used in Jira. For example, shown as a project's avatar.
    boolean isSelected?;
    # Whether the avatar can be deleted.
    boolean isDeletable?;
    # The file name of the avatar icon. Returned for system avatars.
    string fileName?;
    # The list of avatar icon URLs.
    record {|string...;|} urls?;
|};

# Details of how to filter and list search auto complete information.
public type SearchAutoCompleteFilter record {|
    # List of project IDs used to filter the visible field details returned.
    int[] projectIds?;
    # Include collapsed fields for fields that have non-unique names.
    boolean includeCollapsedFields = false;
|};

# Represents the Queries record for the operation: createPermissionGrant
public type CreatePermissionGrantQueries record {
    # Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are always included when you specify any value. Expand options include:
    #
    #  *  `permissions` Returns all permission grants for each permission scheme.
    #  *  `user` Returns information about the user who is granted the permission.
    #  *  `group` Returns information about the group that is granted the permission.
    #  *  `projectRole` Returns information about the project role granted the permission.
    #  *  `field` Returns information about the custom field granted the permission.
    #  *  `all` Returns all expandable information.
    string expand?;
};

# The description of the page of issues loaded by the provided JQL query.
public type IssuesJqlMetaDataBean record {|
    # The index of the first issue.
    int startAt;
    # The maximum number of issues that could be loaded in this evaluation.
    int:Signed32 maxResults;
    # The number of issues that were loaded in this evaluation.
    int:Signed32 count;
    # The total number of issues the JQL returned.
    int totalCount;
    # Any warnings related to the JQL query. Present only if the validation mode was set to `warn`.
    string[] validationWarnings?;
|};

# List of custom fields using the version.
public type VersionUsageInCustomField record {|
    # The name of the custom field.
    string fieldName?;
    # The ID of the custom field.
    int customFieldId?;
    # Count of the issues where the custom field contains the version.
    int issueCountWithVersionInCustomField?;
|};

# Represents the Queries record for the operation: findUsersAndGroups
public type FindUsersAndGroupsQueries record {
    # Whether Connect app users and groups should be excluded from the search results. If an invalid value is provided, the default value is used.
    boolean excludeConnectAddons = false;
    # The ID of an issue type that returned users and groups must have permission to view. To include multiple issue types, provide an ampersand-separated list. For example, `issueTypeId=10000&issueTypeId=10001`. Special values, such as `-1` (all standard issue types) and `-2` (all subtask issue types), are supported. This parameter is only used when `fieldId` is present.
    string[] issueTypeId?;
    # The maximum number of items to return in each list.
    int:Signed32 maxResults = 50;
    # The search string.
    string query;
    # Whether the search for groups should be case insensitive.
    boolean caseInsensitive = false;
    # Whether the user avatar should be returned. If an invalid value is provided, the default value is used.
    boolean showAvatar = false;
    # The ID of a project that returned users and groups must have permission to view. To include multiple projects, provide an ampersand-separated list. For example, `projectId=10000&projectId=10001`. This parameter is only used when `fieldId` is present.
    string[] projectId?;
    # The size of the avatar to return. If an invalid value is provided, the default value is used.
    "xsmall"|"xsmall@2x"|"xsmall@3x"|"small"|"small@2x"|"small@3x"|"medium"|"medium@2x"|"medium@3x"|"large"|"large@2x"|"large@3x"|"xlarge"|"xlarge@2x"|"xlarge@3x"|"xxlarge"|"xxlarge@2x"|"xxlarge@3x"|"xxxlarge"|"xxxlarge@2x"|"xxxlarge@3x" avatarSize = "xsmall";
    # The custom field ID of the field this request is for.
    string fieldId?;
};

# A page of items.
public type PageBeanIssueTypeSchemeMapping record {|
    # The URL of the page.
    string self?;
    # If there is another page of results, the URL of the next page.
    string nextPage?;
    # The maximum number of items that could be returned.
    int:Signed32 maxResults?;
    # The index of the first item returned.
    int startAt?;
    # The number of items returned.
    int total?;
    # Whether this is the last page.
    boolean isLast?;
    # The list of items.
    IssueTypeSchemeMapping[] values?;
|};

# Details of options to create for a custom field.
public type BulkCreateCustomFieldOptionRequest record {|
    # Details of options to create.
    CustomFieldOptionValue[] options?;
|};

# Details about the issues created and the errors for requests that failed.
public type CreatedIssues record {|
    # Details of the issues created.
    CreatedIssue[] issues?;
    # Error details for failed issue creation requests.
    BulkOperationErrorResult[] errors?;
|};

# Represents the Queries record for the operation: getValidProjectKey
public type GetValidProjectKeyQueries record {
    # The project key.
    string 'key?;
};

# Represents the Queries record for the operation: getCurrentUser
public type GetCurrentUserQueries record {
    # Use [expand](#expansion) to include additional information about user in the response. This parameter accepts a comma-separated list. Expand options include:
    #
    #  *  `groups` Returns all groups, including nested groups, the user belongs to.
    #  *  `applicationRoles` Returns the application roles the user is assigned to.
    string expand?;
};

# Count of a version's unresolved issues.
public type VersionUnresolvedIssuesCount record {|
    # The URL of these count details.
    string self?;
    # Count of unresolved issues.
    int issuesUnresolvedCount?;
    # Count of issues.
    int issuesCount?;
|};

public type WorklogIdsRequestBean record {|
    # A list of worklog IDs.
    int[] ids;
|};

# Details about a license for the Jira instance.
public type License record {|
    # The applications under this license.
    LicensedApplication[] applications;
|};

# Details of an issue remote link.
public type RemoteIssueLink record {|
    # The ID of the link.
    int id?;
    # The URL of the link.
    string self?;
    # The global ID of the link, such as the ID of the item on the remote system.
    string globalId?;
    # Details of the remote application the linked item is in.
    Application application?;
    # Description of the relationship between the issue and the linked item.
    string relationship?;
    # Details of the item linked to.
    RemoteObject 'object?;
|};

# Represents the Queries record for the operation: assignPermissionScheme
public type AssignPermissionSchemeQueries record {
    # Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are included when you specify any value. Expand options include:
    #
    #  *  `all` Returns all expandable information.
    #  *  `field` Returns information about the custom field granted the permission.
    #  *  `group` Returns information about the group that is granted the permission.
    #  *  `permissions` Returns all permission grants for each permission scheme.
    #  *  `projectRole` Returns information about the project role granted the permission.
    #  *  `user` Returns information about the user who is granted the permission.
    string expand?;
};

public type JsonNode record {|
    record {} fieldNames?;
    record {} elements?;
    boolean pojo?;
    boolean containerNode?;
    boolean missingNode?;
    boolean 'object?;
    boolean valueNode?;
    boolean number?;
    boolean integralNumber?;
    boolean floatingPointNumber?;
    boolean 'int?;
    boolean long?;
    boolean double?;
    boolean bigDecimal?;
    boolean bigInteger?;
    boolean textual?;
    boolean 'boolean?;
    boolean binary?;
    decimal numberValue?;
    "INT"|"LONG"|"BIG_INTEGER"|"FLOAT"|"DOUBLE"|"BIG_DECIMAL" numberType?;
    int:Signed32 intValue?;
    int longValue?;
    int bigIntegerValue?;
    decimal doubleValue?;
    decimal decimalValue?;
    boolean booleanValue?;
    string[] binaryValue?;
    int:Signed32 valueAsInt?;
    int valueAsLong?;
    decimal valueAsDouble?;
    boolean valueAsBoolean?;
    string textValue?;
    string valueAsText?;
    boolean array?;
    record {} fields?;
    boolean 'null?;
|};

public type IssueTypeCreateBean record {|
    # The unique name for the issue type. The maximum length is 60 characters.
    string name;
    # The description of the issue type.
    string description?;
    # Whether the issue type is `subtype` or `standard`. Defaults to `standard`.
    "subtask"|"standard" 'type?;
|};

# Details about a created issue or subtask.
public type CreatedIssue record {|
    # The ID of the created issue or subtask.
    string id?;
    # The key of the created issue or subtask.
    string 'key?;
    # The URL of the created issue or subtask.
    string self?;
    # The response code and messages related to any requested transition.
    NestedResponse transition?;
|};

# Represents the Queries record for the operation: getNotificationSchemes
public type GetNotificationSchemesQueries record {
    # Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:
    #
    #  *  `all` Returns all expandable information.
    #  *  `field` Returns information about any custom fields assigned to receive an event.
    #  *  `group` Returns information about any groups assigned to receive an event.
    #  *  `notificationSchemeEvents` Returns a list of event associations. This list is returned for all expandable information.
    #  *  `projectRole` Returns information about any project roles assigned to receive an event.
    #  *  `user` Returns information about any users assigned to receive an event.
    string expand?;
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 50;
    # The index of the first item to return in a page of results (page offset).
    int startAt = 0;
};

public type ProjectInputBean record {|
    # Project keys must be unique and start with an uppercase letter followed by one or more uppercase alphanumeric characters. The maximum length is 10 characters. Required when creating a project. Optional when updating a project.
    string 'key?;
    # The name of the project. Required when creating a project. Optional when updating a project.
    string name?;
    # The [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes), which dictates the application-specific feature set. Required when creating a project. Not applicable for the Update project resource.
    "software"|"service_desk"|"business" projectTypeKey?;
    # A prebuilt configuration for a project. The type of the `projectTemplateKey` must match with the type of the `projectTypeKey`. Required when creating a project. Not applicable for the Update project resource.
    "com.pyxis.greenhopper.jira:gh-simplified-agility-kanban"|"com.pyxis.greenhopper.jira:gh-simplified-agility-scrum"|"com.pyxis.greenhopper.jira:gh-simplified-basic"|"com.pyxis.greenhopper.jira:gh-simplified-kanban-classic"|"com.pyxis.greenhopper.jira:gh-simplified-scrum-classic"|"com.atlassian.servicedesk:simplified-it-service-desk"|"com.atlassian.servicedesk:simplified-internal-service-desk"|"com.atlassian.servicedesk:simplified-external-service-desk"|"com.atlassian.servicedesk:simplified-hr-service-desk"|"com.atlassian.servicedesk:simplified-facilities-service-desk"|"com.atlassian.jira-core-project-templates:jira-core-simplified-content-management"|"com.atlassian.jira-core-project-templates:jira-core-simplified-document-approval"|"com.atlassian.jira-core-project-templates:jira-core-simplified-lead-tracking"|"com.atlassian.jira-core-project-templates:jira-core-simplified-process-control"|"com.atlassian.jira-core-project-templates:jira-core-simplified-procurement"|"com.atlassian.jira-core-project-templates:jira-core-simplified-project-management"|"com.atlassian.jira-core-project-templates:jira-core-simplified-recruitment"|"com.atlassian.jira-core-project-templates:jira-core-simplified-task-" projectTemplateKey?;
    # A brief description of the project.
    string description?;
    # This parameter is deprecated because of privacy changes. Use `leadAccountId` instead. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. The user name of the project lead. Either `lead` or `leadAccountId` must be set when creating a project. Optional when updating a project. Cannot be provided with `leadAccountId`.
    string lead?;
    # The account ID of the project lead. Either `lead` or `leadAccountId` must be set when creating a project. Optional when updating a project. Cannot be provided with `lead`.
    @constraint:String {maxLength: 128}
    string leadAccountId?;
    # A link to information about this project, such as project documentation
    string url?;
    # The default assignee when creating issues for this project.
    "PROJECT_LEAD"|"UNASSIGNED" assigneeType?;
    # An integer value for the project's avatar.
    int avatarId?;
    # The ID of the issue security scheme for the project, which enables you to control who can and cannot view issues. Use the [Get issue security schemes](#api-rest-api-2-issuesecurityschemes-get) resource to get all issue security scheme IDs.
    int issueSecurityScheme?;
    # The ID of the permission scheme for the project. Use the [Get all permission schemes](#api-rest-api-2-permissionscheme-get) resource to see a list of all permission scheme IDs.
    int permissionScheme?;
    # The ID of the notification scheme for the project. Use the [Get notification schemes](#api-rest-api-2-notificationscheme-get) resource to get a list of notification scheme IDs.
    int notificationScheme?;
    # The ID of the project's category. A complete list of category IDs is found using the [Get all project categories](#api-rest-api-2-projectCategory-get) operation.
    int categoryId?;
|};

public type ConnectModules record {
    # A list of app modules in the same format as the `modules` property in the
    # [app descriptor](https://developer.atlassian.com/cloud/jira/platform/app-descriptor/).
    ConnectModule[] modules;
};

# Represents the Queries record for the operation: deleteIssueType
public type DeleteIssueTypeQueries record {
    # The ID of the replacement issue type.
    string alternativeIssueTypeId?;
};

# Default values to update.
public type CustomFieldContextDefaultValueUpdate record {|
    CustomFieldContextDefaultValue[] defaultValues?;
|};

# Represents the Queries record for the operation: getIssueTypeScreenSchemeProjectAssociations
public type GetIssueTypeScreenSchemeProjectAssociationsQueries record {
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 50;
    # The list of project IDs. To include multiple projects, separate IDs with ampersand: `projectId=10000&projectId=10001`.
    int[] projectId;
    # The index of the first item to return in a page of results (page offset).
    int startAt = 0;
};

# Represents the Queries record for the operation: getIdsOfWorklogsDeletedSince
public type GetIdsOfWorklogsDeletedSinceQueries record {
    # The date and time, as a UNIX timestamp in milliseconds, after which deleted worklogs are returned.
    int since = 0;
};

# The workflow conditions tree.
public type WorkflowConditionBean WorkflowSimpleCondition|WorkflowCompoundCondition;

# Represents the Queries record for the operation: getProjectComponentsPaginated
public type GetProjectComponentsPaginatedQueries record {
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 50;
    # Filter the results using a literal string. Components with a matching `name` or `description` are returned (case insensitive).
    string query?;
    # [Order](#ordering) the results by a field:
    #
    #  *  `description` Sorts by the component description.
    #  *  `issueCount` Sorts by the count of issues associated with the component.
    #  *  `lead` Sorts by the user key of the component's project lead.
    #  *  `name` Sorts by component name.
    "description"|"-description"|"+description"|"issueCount"|"-issueCount"|"+issueCount"|"lead"|"-lead"|"+lead"|"name"|"-name"|"+name" orderBy?;
    # The index of the first item to return in a page of results (page offset).
    int startAt = 0;
};

@constraint:String {maxLength: 128}
public type GetUserEmailBulkQueriesAccountIdItemsString string;

# Represents the Queries record for the operation: getValidProjectName
public type GetValidProjectNameQueries record {
    # The project name.
    string name;
};

# Represents the Queries record for the operation: findGroups
public type FindGroupsQueries record {
    # This parameter is deprecated, setting it does not affect the results. To find groups containing a particular user, use [Get user groups](#api-rest-api-2-user-groups-get).
    string accountId?;
    # The maximum number of groups to return. The maximum number of groups that can be returned is limited by the system property `jira.ajax.autocomplete.limit`.
    int:Signed32 maxResults?;
    # The string to find in group names.
    string query?;
    # A group to exclude from the result. To exclude multiple groups, provide an ampersand-separated list. For example, `exclude=group1&exclude=group2`.
    string[] exclude?;
    # This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
    string userName?;
};

# Details about a next-gen project.
public type ProjectForScope record {|
    # The URL of the project details.
    string self?;
    # The ID of the project.
    string id?;
    # The key of the project.
    string 'key?;
    # The name of the project.
    string name?;
    # The [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes) of the project.
    "software"|"service_desk"|"business" projectTypeKey?;
    # Whether or not the project is simplified.
    boolean simplified?;
    # The URLs of the project's avatars.
    AvatarUrlsBean avatarUrls?;
    # The category the project belongs to.
    UpdatedProjectCategory projectCategory?;
|};

# A page of items.
public type PageBeanContextForProjectAndIssueType record {|
    # The URL of the page.
    string self?;
    # If there is another page of results, the URL of the next page.
    string nextPage?;
    # The maximum number of items that could be returned.
    int:Signed32 maxResults?;
    # The index of the first item returned.
    int startAt?;
    # The number of items returned.
    int total?;
    # Whether this is the last page.
    boolean isLast?;
    # The list of items.
    ContextForProjectAndIssueType[] values?;
|};

# Details of a parsed JQL query.
public type ParsedJqlQuery record {|
    # The JQL query that was parsed and validated.
    string query;
    # The syntax tree of the query. Empty if the query was invalid.
    JqlQuery structure?;
    # The list of syntax or validation errors.
    string[] errors?;
|};

# Represents the Queries record for the operation: getOptionsForContext
public type GetOptionsForContextQueries record {
    # Whether only options are returned.
    boolean onlyOptions = false;
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 100;
    # The ID of the option.
    int optionId?;
    # The index of the first item to return in a page of results (page offset).
    int startAt = 0;
};

# A page of items.
public type PageBeanFilterDetails record {|
    # The URL of the page.
    string self?;
    # If there is another page of results, the URL of the next page.
    string nextPage?;
    # The maximum number of items that could be returned.
    int:Signed32 maxResults?;
    # The index of the first item returned.
    int startAt?;
    # The number of items returned.
    int total?;
    # Whether this is the last page.
    boolean isLast?;
    # The list of items.
    FilterDetails[] values?;
|};

# Represents the Queries record for the operation: getAllWorkflowSchemes
public type GetAllWorkflowSchemesQueries record {
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 50;
    # The index of the first item to return in a page of results (page offset).
    int startAt = 0;
};

# Represents the Queries record for the operation: getAllFieldConfigurationSchemes
public type GetAllFieldConfigurationSchemesQueries record {
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 50;
    # The list of field configuration scheme IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`.
    int[] id?;
    # The index of the first item to return in a page of results (page offset).
    int startAt = 0;
};

# Represents the Queries record for the operation: getAllIssueFieldOptions
public type GetAllIssueFieldOptionsQueries record {
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 50;
    # The index of the first item to return in a page of results (page offset).
    int startAt = 0;
};

# Container for a list of audit records.
public type AuditRecords record {|
    # The number of audit items skipped before the first item in this list.
    int:Signed32 offset?;
    # The requested or default limit on the number of audit items to be returned.
    int:Signed32 'limit?;
    # The total number of audit items returned.
    int total?;
    # The list of audit items.
    AuditRecordBean[] records?;
|};

# Represents the Queries record for the operation: getFavouriteFilters
public type GetFavouriteFiltersQueries record {
    # Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:
    #
    #  *  `sharedUsers` Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don't specify `sharedUsers`, then the `sharedUsers` object is returned but it doesn't list any users. The list of users returned is limited to 1000, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 1000 users, use `?expand=sharedUsers[1001:2000]`.
    #  *  `subscriptions` Returns the users that are subscribed to the filter. If you don't specify `subscriptions`, the `subscriptions` object is returned but it doesn't list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append `[start-index:end-index]` to the expand request. For example, to access the next 1000 subscriptions, use `?expand=subscriptions[1001:2000]`.
    string expand?;
};

# List of permission grants.
public type PermissionGrants record {|
    # Permission grants list.
    PermissionGrant[] permissions?;
    # Expand options that include additional permission grant details in the response.
    string expand?;
|};

# Details of the issue creation metadata for a project.
public type ProjectIssueCreateMetadata record {|
    # Expand options that include additional project issue create metadata details in the response.
    string expand?;
    # The URL of the project.
    string self?;
    # The ID of the project.
    string id?;
    # The key of the project.
    string 'key?;
    # The name of the project.
    string name?;
    # List of the project's avatars, returning the avatar size and associated URL.
    AvatarUrlsBean avatarUrls?;
    # List of the issue types supported by the project.
    IssueTypeIssueCreateMetadata[] issuetypes?;
|};

# Represents the Queries record for the operation: updateProject
public type UpdateProjectQueries record {
    # Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Note that the project description, issue types, and project lead are included in all responses by default. Expand options include:
    #
    #  *  `description` The project description.
    #  *  `issueTypes` The issue types associated with the project.
    #  *  `lead` The project lead.
    #  *  `projectKeys` All project keys associated with the project.
    string expand?;
};

# A page of items.
public type PageBeanChangelog record {|
    # The URL of the page.
    string self?;
    # If there is another page of results, the URL of the next page.
    string nextPage?;
    # The maximum number of items that could be returned.
    int:Signed32 maxResults?;
    # The index of the first item returned.
    int startAt?;
    # The number of items returned.
    int total?;
    # Whether this is the last page.
    boolean isLast?;
    # The list of items.
    Changelog[] values?;
|};

# Represents the Queries record for the operation: deleteProject
public type DeleteProjectQueries record {
    # Whether this project is placed in the Jira recycle bin where it will be available for restoration.
    boolean enableUndo = false;
};

# A clause that asserts whether a field was changed. For example, `status CHANGED AFTER startOfMonth(-1M)`.See [CHANGED](https://confluence.atlassian.com/x/dgiiLQ#Advancedsearching-operatorsreference-CHANGEDCHANGED) for more information about the CHANGED operator.
public type FieldChangedClause record {
    JqlQueryField 'field;
    # The operator applied to the field.
    "changed" operator;
    # The list of time predicates.
    JqlQueryClauseTimePredicate[] predicates;
};

# Represents the Queries record for the operation: removeWatcher
public type RemoveWatcherQueries record {
    # The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. Required.
    @constraint:String {maxLength: 128}
    string accountId?;
    # This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
    string username?;
};

# Represents the Queries record for the operation: getUserDefaultColumns
public type GetUserDefaultColumnsQueries record {
    # The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
    @constraint:String {maxLength: 128}
    string accountId?;
    # This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
    string username?;
};

# Metadata for an item in an attachment archive.
public type AttachmentArchiveItemReadable record {|
    # The path of the archive item.
    string path?;
    # The position of the item within the archive.
    int index?;
    # The size of the archive item.
    string size?;
    # The MIME type of the archive item.
    string mediaType?;
    # The label for the archive item.
    string label?;
|};

# The application the linked item is in.
public type Application record {
    # The name-spaced type of the application, used by registered rendering apps.
    string 'type?;
    # The name of the application. Used in conjunction with the (remote) object icon title to display a tooltip for the link's icon. The tooltip takes the format "\[application name\] icon title". Blank items are excluded from the tooltip title. If both items are blank, the icon tooltop displays as "Web Link". Grouping and sorting of links may place links without an application name last.
    string name?;
};

# Details of a filter.
public type FilterDetails record {|
    # The URL of the filter.
    string self?;
    # The unique identifier for the filter.
    string id?;
    # The name of the filter. Must be unique.
    string name;
    # A description of the filter.
    string description?;
    # The user who owns the filter. This is defaulted to the creator of the filter, however Jira administrators can change the owner of a shared filter in the admin settings.
    User owner?;
    # The JQL query for the filter. For example, *project = SSP AND issuetype = Bug*.
    string jql?;
    # A URL to view the filter results in Jira, using the ID of the filter. For example, *https://your-domain.atlassian.net/issues/?filter=10100*.
    string viewUrl?;
    # A URL to view the filter results in Jira, using the [Search for issues using JQL](#api-rest-api-2-filter-search-get) operation with the filter's JQL string to return the filter results. For example, *https://your-domain.atlassian.net/rest/api/2/search?jql=project+%3D+SSP+AND+issuetype+%3D+Bug*.
    string searchUrl?;
    # Whether the filter is selected as a favorite by any users, not including the filter owner.
    boolean favourite?;
    # The count of how many users have selected this filter as a favorite, including the filter owner.
    int favouritedCount?;
    # The groups and projects that the filter is shared with. This can be specified when updating a filter, but not when creating a filter.
    SharePermission[] sharePermissions?;
    # The users that are subscribed to the filter.
    FilterSubscription[] subscriptions?;
|};

public type ProjectScopeBean record {|
    # The ID of the project that the option's behavior applies to.
    int id?;
    # Defines the behavior of the option in the project.If notSelectable is set, the option cannot be set as the field's value. This is useful for archiving an option that has previously been selected but shouldn't be used anymore.If defaultValue is set, the option is selected by default.
    ("notSelectable"|"defaultValue")[] attributes?;
|};

# Represents the Queries record for the operation: getDashboardsPaginated
public type GetDashboardsPaginatedQueries record {
    # This parameter is deprecated because of privacy changes. Use `accountId` instead. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. User name used to return dashboards with the matching `owner.name`. This parameter cannot be used with the `accountId` parameter.
    string owner?;
    # User account ID used to return dashboards with the matching `owner.accountId`. This parameter cannot be used with the `owner` parameter.
    @constraint:String {maxLength: 128}
    string accountId?;
    # Use [expand](#expansion) to include additional information about dashboard in the response. This parameter accepts a comma-separated list. Expand options include:
    #
    #  *  `description` Returns the description of the dashboard.
    #  *  `owner` Returns the owner of the dashboard.
    #  *  `viewUrl` Returns the URL that is used to view the dashboard.
    #  *  `favourite` Returns `isFavourite`, an indicator of whether the user has set the dashboard as a favorite.
    #  *  `favouritedCount` Returns `popularity`, a count of how many users have set this dashboard as a favorite.
    #  *  `sharePermissions` Returns details of the share permissions defined for the dashboard.
    string expand?;
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 50;
    # [Order](#ordering) the results by a field:
    #
    #  *  `description` Sorts by dashboard description. Note that this sort works independently of whether the expand to display the description field is in use.
    #  *  `favourite_count` Sorts by dashboard popularity.
    #  *  `id` Sorts by dashboard ID.
    #  *  `is_favourite` Sorts by whether the dashboard is marked as a favorite.
    #  *  `name` Sorts by dashboard name.
    #  *  `owner` Sorts by dashboard owner name.
    "description"|"-description"|"+description"|"favorite_count"|"-favorite_count"|"+favorite_count"|"id"|"-id"|"+id"|"is_favorite"|"-is_favorite"|"+is_favorite"|"name"|"-name"|"+name"|"owner"|"-owner"|"+owner" orderBy = "name";
    # Group name used to returns dashboards that are shared with a group that matches `sharePermissions.group.name`.
    string groupname?;
    # Project ID used to returns dashboards that are shared with a project that matches `sharePermissions.project.id`.
    int projectId?;
    # The index of the first item to return in a page of results (page offset).
    int startAt = 0;
    # String used to perform a case-insensitive partial match with `name`.
    string dashboardName?;
};

# Represents the Queries record for the operation: findUsers
public type FindUsersQueries record {
    # A query string that is matched exactly against a user `accountId`. Required, unless `query` or `property` is specified.
    @constraint:String {maxLength: 128}
    string accountId?;
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 50;
    # A query string that is matched against user attributes ( `displayName`, and `emailAddress`) to find relevant users. The string can match the prefix of the attribute's value. For example, *query=john* matches a user with a `displayName` of *John Smith* and a user with an `emailAddress` of *johnson@example.com*. Required, unless `accountId` or `property` is specified.
    string query?;
    # A query string used to search properties. Property keys are specified by path, so property keys containing dot (.) or equals (=) characters cannot be used. The query string cannot be specified using a JSON object. Example: To search for the value of `nested` from `{"something":{"nested":1,"other":2}}` use `thepropertykey.something.nested=1`. Required, unless `accountId` or `query` is specified.
    string property?;
    # The index of the first item to return in a page of results (page offset).
    int:Signed32 startAt = 0;
    string username?;
};

# Details about a notification scheme.
public type NotificationScheme record {|
    # Expand options that include additional notification scheme details in the response.
    string expand?;
    # The ID of the notification scheme.
    int id?;
    string self?;
    # The name of the notification scheme.
    string name?;
    # The description of the notification scheme.
    string description?;
    # The notification events and associated recipients.
    NotificationSchemeEvent[] notificationSchemeEvents?;
    # The scope of the notification scheme.
    Scope scope?;
|};

public type UserBeanAvatarUrls record {|
    # The URL of the user's 16x16 pixel avatar.
    string '16x16?;
    # The URL of the user's 24x24 pixel avatar.
    string '24x24?;
    # The URL of the user's 32x32 pixel avatar.
    string '32x32?;
    # The URL of the user's 48x48 pixel avatar.
    string '48x48?;
|};

# Represents the Queries record for the operation: getPermissionSchemeGrants
public type GetPermissionSchemeGrantsQueries record {
    # Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are always included when you specify any value. Expand options include:
    #
    #  *  `permissions` Returns all permission grants for each permission scheme.
    #  *  `user` Returns information about the user who is granted the permission.
    #  *  `group` Returns information about the group that is granted the permission.
    #  *  `projectRole` Returns information about the project role granted the permission.
    #  *  `field` Returns information about the custom field granted the permission.
    #  *  `all` Returns all expandable information.
    string expand?;
};

# Represents the Queries record for the operation: getVisibleIssueFieldOptions
public type GetVisibleIssueFieldOptionsQueries record {
    # The maximum number of items to return per page.
    int:Signed32 maxResults?;
    # Filters the results to options that are only available in the specified project.
    int projectId?;
    # The index of the first item to return in a page of results (page offset).
    int startAt = 0;
};

# Represents the Queries record for the operation: parseJqlQueries
public type ParseJqlQueriesQueries record {
    # How to validate the JQL query and treat the validation results. Validation options include:
    #
    #  *  `strict` Returns all errors. If validation fails, the query structure is not returned.
    #  *  `warn` Returns all errors. If validation fails but the JQL query is correctly formed, the query structure is returned.
    #  *  `none` No validation is performed. If JQL query is correctly formed, the query structure is returned.
    "strict"|"warn"|"none" validation = "strict";
};

# A page of items.
public type PageBeanIssueTypeSchemeProjects record {|
    # The URL of the page.
    string self?;
    # If there is another page of results, the URL of the next page.
    string nextPage?;
    # The maximum number of items that could be returned.
    int:Signed32 maxResults?;
    # The index of the first item returned.
    int startAt?;
    # The number of items returned.
    int total?;
    # Whether this is the last page.
    boolean isLast?;
    # The list of items.
    IssueTypeSchemeProjects[] values?;
|};

# Details of the time tracking configuration.
public type TimeTrackingConfiguration record {|
    # The number of hours in a working day.
    decimal workingHoursPerDay;
    # The number of days in a working week.
    decimal workingDaysPerWeek;
    # The format that will appear on an issue's *Time Spent* field.
    "pretty"|"days"|"hours" timeFormat;
    # The default unit of time applied to logged time.
    "minute"|"hour"|"day"|"week" defaultUnit;
|};

# JQL queries that contained users that could not be found
public type JQLQueryWithUnknownUsers record {|
    # The original query, for reference
    string originalQuery?;
    # The converted query, with accountIDs instead of user identifiers, or 'unknown' for users that could not be found
    string convertedQuery?;
|};

public type AttachmentArchiveEntry record {|
    string mediaType?;
    int entryIndex?;
    string abbreviatedName?;
    string name?;
    int size?;
|};

# A page of items.
public type PageBeanNotificationScheme record {|
    # The URL of the page.
    string self?;
    # If there is another page of results, the URL of the next page.
    string nextPage?;
    # The maximum number of items that could be returned.
    int:Signed32 maxResults?;
    # The index of the first item returned.
    int startAt?;
    # The number of items returned.
    int total?;
    # Whether this is the last page.
    boolean isLast?;
    # The list of items.
    NotificationScheme[] values?;
|};

# The identifiers for a project.
public type ProjectIdentifierBean record {|
    # The ID of the project.
    int id?;
    # The key of the project.
    string 'key?;
|};

# Details of an operand in a JQL clause.
public type JqlQueryClauseOperand ListOperand|ValueOperand|FunctionOperand|KeywordOperand;

# Details about a failed webhook.
public type FailedWebhook record {|
    # The webhook ID, as sent in the `X-Atlassian-Webhook-Identifier` header with the webhook.
    string id;
    # The webhook body.
    string body?;
    # The original webhook destination.
    string url;
    # The time the webhook was added to the list of failed webhooks (that is, the time of the last failed retry).
    int failureTime;
|};

# The details of an issue type screen scheme.
public type IssueTypeScreenSchemeDetails record {|
    # The name of the issue type screen scheme. The name must be unique. The maximum length is 255 characters.
    string name;
    # The description of the issue type screen scheme. The maximum length is 255 characters.
    string description?;
    # The IDs of the screen schemes for the issue type IDs and *default*. A *default* entry is required to create an issue type screen scheme, it defines the mapping for all issue types without a screen scheme.
    IssueTypeScreenSchemeMapping[] issueTypeMappings;
|};

# An associated workflow scheme and project.
public type WorkflowSchemeProjectAssociation record {|
    # The ID of the workflow scheme. If the workflow scheme ID is `null`, the operation assigns the default workflow scheme.
    string workflowSchemeId?;
    # The ID of the project.
    string projectId;
|};

# Details about the time tracking provider.
public type TimeTrackingProvider record {|
    # The key for the time tracking provider. For example, *JIRA*.
    string 'key;
    # The name of the time tracking provider. For example, *JIRA provided time tracking*.
    string name?;
    # The URL of the configuration page for the time tracking provider app. For example, */example/config/url*. This property is only returned if the `adminPageKey` property is set in the module descriptor of the time tracking provider app.
    string url?;
|};

# A page of items.
public type PageBeanDashboard record {|
    # The URL of the page.
    string self?;
    # If there is another page of results, the URL of the next page.
    string nextPage?;
    # The maximum number of items that could be returned.
    int:Signed32 maxResults?;
    # The index of the first item returned.
    int startAt?;
    # The number of items returned.
    int total?;
    # Whether this is the last page.
    boolean isLast?;
    # The list of items.
    Dashboard[] values?;
|};

# Details of a screen scheme.
public type ScreenSchemeDetails record {|
    # The name of the screen scheme. The name must be unique. The maximum length is 255 characters.
    string name;
    # The description of the screen scheme. The maximum length is 255 characters.
    string description?;
    # The IDs of the screens for the screen types of the screen scheme. Only screens used in classic projects are accepted.
    ScreenTypes screens;
|};

public type GlobalScopeBean record {|
    # Defines the behavior of the option in the global context.If notSelectable is set, the option cannot be set as the field's value. This is useful for archiving an option that has previously been selected but shouldn't be used anymore.If defaultValue is set, the option is selected by default.
    ("notSelectable"|"defaultValue")[] attributes?;
|};

# Represents the Queries record for the operation: deleteUserProperty
public type DeleteUserPropertyQueries record {
    # The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
    @constraint:String {maxLength: 128}
    string accountId?;
    # This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
    string userKey?;
    # This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
    string username?;
};

public type StringList record {|
|};

# A group found in a search.
public type FoundGroup record {|
    # The name of the group.
    string name?;
    # The group name with the matched query string highlighted with the HTML bold tag.
    string html?;
    GroupLabel[] labels?;
    # The ID of the group, if available, which uniquely identifies the group across all Atlassian products. For example, *952d12c3-5b5b-4d04-bb32-44d383afc4b2*.
    string groupId?;
|};

# Represents the Queries record for the operation: updateWorkflowTransitionProperty
public type UpdateWorkflowTransitionPropertyQueries record {
    # The workflow status. Set to `live` for inactive workflows or `draft` for draft workflows. Active workflows cannot be edited.
    "live"|"draft" workflowMode?;
    # The name of the workflow that the transition belongs to.
    string workflowName;
    # The key of the property being updated, also known as the name of the property. Set this to the same value as the `key` defined in the request body.
    string 'key;
};

# Jira instance health check results. Deprecated and no longer returned.
public type HealthCheckResult record {|
    # The name of the Jira health check item.
    string name?;
    # The description of the Jira health check item.
    string description?;
    # Whether the Jira health check item passed or failed.
    boolean passed?;
|};

# Container for a request to toggle the state of the feature to ENABLED or DISABLED.
public type ProjectFeatureToggleRequest record {|
    # The new state for the feature
    "ENABLED"|"DISABLED"|"COMING_SOON" state?;
|};

# The IDs of the screens for the screen types of the screen scheme.
public type UpdateScreenTypes record {|
    # The ID of the edit screen. To remove the screen association, pass a null.
    string edit?;
    # The ID of the create screen. To remove the screen association, pass a null.
    string create?;
    # The ID of the view screen. To remove the screen association, pass a null.
    string view?;
    # The ID of the default screen. When specified, must include a screen ID as a default screen is required.
    string default?;
|};

# Details of a workflow status.
public type WorkflowStatus record {|
    # The ID of the issue status.
    string id;
    # The name of the status in the workflow.
    string name;
    WorkflowStatusProperties properties?;
|};

# A page of comments.
public type PageOfComments record {
    # The index of the first item returned.
    int startAt?;
    # The maximum number of items that could be returned.
    int:Signed32 maxResults?;
    # The number of items returned.
    int total?;
    # The list of comments.
    Comment[] comments?;
};

# Details of global and project permissions granted to the user.
public type BulkPermissionGrants record {|
    # List of project permissions and the projects and issues those permissions provide access to.
    BulkProjectPermissionGrants[] projectPermissions;
    # List of permissions granted to the user.
    string[] globalPermissions;
|};

# Represents the Queries record for the operation: getWorklogsForIds
public type GetWorklogsForIdsQueries record {
    # Use [expand](#expansion) to include additional information about worklogs in the response. This parameter accepts `properties` that returns the properties of each worklog.
    string expand = "";
};

# Represents the Queries record for the operation: getDefaultValues
public type GetDefaultValuesQueries record {
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 50;
    # The IDs of the contexts.
    int[] contextId?;
    # The index of the first item to return in a page of results (page offset).
    int startAt = 0;
};

# Details about the analysed Jira expression.
public type JiraExpressionsAnalysis record {|
    # The results of Jira expressions analysis.
    JiraExpressionAnalysis[] results;
|};

# Details of a workflow transition.
public type Transition record {|
    # The ID of the transition.
    string id;
    # The name of the transition.
    string name;
    # The description of the transition.
    string description;
    # The statuses the transition can start from.
    string[] 'from;
    # The status the transition goes to.
    string to;
    # The type of the transition.
    "global"|"initial"|"directed" 'type;
    ScreenID screen?;
    WorkflowRules rules?;
|};

# A project category.
public type UpdatedProjectCategory record {|
    # The URL of the project category.
    string self?;
    # The ID of the project category.
    string id?;
    # The name of the project category.
    string description?;
    # The description of the project category.
    string name?;
|};

# Represents the Queries record for the operation: getMyPermissions
public type GetMyPermissionsQueries record {
    # The key of project. Ignored if `projectId` is provided.
    string projectKey?;
    # The ID of the issue.
    string issueId?;
    # The key of the issue. Ignored if `issueId` is provided.
    string issueKey?;
    # A list of permission keys. (Required) This parameter accepts a comma-separated list. To get the list of available permissions, use [Get all permissions](#api-rest-api-2-permissions-get).
    string permissions?;
    string projectConfigurationUuid?;
    # The ID of project.
    string projectId?;
    string projectUuid?;
};

# Details about the analysed Jira expression.
public type JiraExpressionAnalysis record {|
    # The analysed expression.
    string expression;
    # A list of validation errors. Not included if the expression is valid.
    JiraExpressionValidationError[] errors?;
    # Whether the expression is valid and the interpreter will evaluate it. Note that the expression may fail at runtime (for example, if it executes too many expensive operations).
    boolean valid;
    # EXPERIMENTAL. The inferred type of the expression.
    string 'type?;
    JiraExpressionComplexity complexity?;
|};

# Represents the Queries record for the operation: getTransitions
public type GetTransitionsQueries record {
    # Use [expand](#expansion) to include additional information about transitions in the response. This parameter accepts `transitions.fields`, which returns information about the fields in the transition screen for each transition. Fields hidden from the screen are not returned. Use this information to populate the `fields` and `update` fields in [Transition issue](#api-rest-api-2-issue-issueIdOrKey-transitions-post).
    string expand?;
    # Whether transitions with the condition *Hide From User Condition* are included in the response.
    boolean skipRemoteOnlyCondition = false;
    # The ID of the transition.
    string transitionId?;
    # Whether details of transitions that fail a condition are included in the response
    boolean includeUnavailableTransitions = false;
    # Whether the transitions are sorted by ops-bar sequence value first then category order (Todo, In Progress, Done) or only by ops-bar sequence value.
    boolean sortByOpsBarAndStatus = false;
};

# Represents the Queries record for the operation: getIssueSecurityLevelMembers
public type GetIssueSecurityLevelMembersQueries record {
    # Use expand to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:
    #
    #  *  `all` Returns all expandable information.
    #  *  `field` Returns information about the custom field granted the permission.
    #  *  `group` Returns information about the group that is granted the permission.
    #  *  `projectRole` Returns information about the project role granted the permission.
    #  *  `user` Returns information about the user who is granted the permission.
    string expand?;
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 50;
    # The list of issue security level IDs. To include multiple issue security levels separate IDs with ampersand: `issueSecurityLevelId=10000&issueSecurityLevelId=10001`.
    int[] issueSecurityLevelId?;
    # The index of the first item to return in a page of results (page offset).
    int startAt = 0;
};

# Represents the Queries record for the operation: getGroup
public type GetGroupQueries record {
    # List of fields to expand.
    string expand?;
    # The name of the group.
    string groupname;
};

# Details of a locale.
public type Locale record {|
    # The locale code. The Java the locale format is used: a two character language code (ISO 639), an underscore, and two letter country code (ISO 3166). For example, en\_US represents a locale of English (United States). Required on create.
    string locale?;
|};

# Container for a list of registered webhooks. Webhook details are returned in the same order as the request.
public type ContainerForRegisteredWebhooks record {|
    # A list of registered webhooks.
    RegisteredWebhook[] webhookRegistrationResult?;
|};

public type UpdateUserToGroupBean record {
    # This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
    string name?;
    # The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
    @constraint:String {maxLength: 128}
    string accountId?;
};

# The converted JQL queries.
public type ConvertedJQLQueries record {|
    # The list of converted query strings with account IDs in place of user identifiers.
    string[] queryStrings?;
    # List of queries containing user information that could not be mapped to an existing user
    JQLQueryWithUnknownUsers[] queriesWithUnknownUsers?;
|};

# Represents the Queries record for the operation: evaluateJiraExpression
public type EvaluateJiraExpressionQueries record {
    # Use [expand](#expansion) to include additional information in the response. This parameter accepts `meta.complexity` that returns information about the expression complexity. For example, the number of expensive operations used by the expression and how close the expression is to reaching the [complexity limit](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/#restrictions). Useful when designing and debugging your expressions.
    string expand?;
};

# An ordered list of issue type IDs and information about where to move them.
public type OrderOfIssueTypes record {|
    # A list of the issue type IDs to move. The order of the issue type IDs in the list is the order they are given after the move.
    string[] issueTypeIds;
    # The ID of the issue type to place the moved issue types after. Required if `position` isn't provided.
    string after?;
    # The position the issue types should be moved to. Required if `after` isn't provided.
    "First"|"Last" position?;
|};

# Represents the Queries record for the operation: updateComment
public type UpdateCommentQueries record {
    # Use [expand](#expansion) to include additional information about comments in the response. This parameter accepts `renderedBody`, which returns the comment body rendered in HTML.
    string expand?;
};

# The JQL queries to be converted.
public type JQLPersonalDataMigrationRequest record {|
    # A list of queries with user identifiers. Maximum of 100 queries.
    string[] queryStrings?;
|};

# Represents the Queries record for the operation: DynamicModulesResource.removeModules_delete
public type DynamicModulesResourceRemoveModulesDeleteQueries record {
    # The key of the module to remove. To include multiple module keys, provide multiple copies of this parameter.
    # For example, `moduleKey=dynamic-attachment-entity-property&moduleKey=dynamic-select-field`.
    # Nonexistent keys are ignored.
    string[] moduleKey?;
};

# A page of items.
public type PageBeanFieldConfigurationScheme record {|
    # The URL of the page.
    string self?;
    # If there is another page of results, the URL of the next page.
    string nextPage?;
    # The maximum number of items that could be returned.
    int:Signed32 maxResults?;
    # The index of the first item returned.
    int startAt?;
    # The number of items returned.
    int total?;
    # Whether this is the last page.
    boolean isLast?;
    # The list of items.
    FieldConfigurationScheme[] values?;
|};

# Details about the mapping between issue types and a workflow.
public type IssueTypesWorkflowMapping record {|
    # The name of the workflow. Optional if updating the workflow-issue types mapping.
    string workflow?;
    # The list of issue type IDs.
    string[] issueTypes?;
    # Whether the workflow is the default workflow for the workflow scheme.
    boolean defaultMapping?;
    # Whether a draft workflow scheme is created or updated when updating an active workflow scheme. The draft is updated with the new workflow-issue types mapping. Defaults to `false`.
    boolean updateDraftIfNeeded?;
|};

# Details of the instance's attachment settings.
public type AttachmentSettings record {|
    # Whether the ability to add attachments is enabled.
    boolean enabled?;
    # The maximum size of attachments permitted, in bytes.
    int uploadLimit?;
|};

# A page of items.
public type PageBeanField record {|
    # The URL of the page.
    string self?;
    # If there is another page of results, the URL of the next page.
    string nextPage?;
    # The maximum number of items that could be returned.
    int:Signed32 maxResults?;
    # The index of the first item returned.
    int startAt?;
    # The number of items returned.
    int total?;
    # Whether this is the last page.
    boolean isLast?;
    # The list of items.
    Field[] values?;
|};

public type JiraExpressionsComplexityBean record {|
    # The number of steps it took to evaluate the expression, where a step is a high-level operation performed by the expression. A step is an operation such as arithmetic, accessing a property, accessing a context variable, or calling a function.
    JiraExpressionsComplexityValueBean steps;
    # The number of expensive operations executed while evaluating the expression. Expensive operations are those that load additional data, such as entity properties, comments, or custom fields.
    JiraExpressionsComplexityValueBean expensiveOperations;
    # The number of Jira REST API beans returned in the response.
    JiraExpressionsComplexityValueBean beans;
    # The number of primitive values returned in the response.
    JiraExpressionsComplexityValueBean primitiveValues;
|};

# Represents the Queries record for the operation: deleteRemoteIssueLinkByGlobalId
public type DeleteRemoteIssueLinkByGlobalIdQueries record {
    # The global ID of a remote issue link.
    string globalId;
};

# Details of an issue type scheme.
public type IssueTypeScheme record {|
    # The ID of the issue type scheme.
    string id;
    # The name of the issue type scheme.
    string name;
    # The description of the issue type scheme.
    string description?;
    # The ID of the default issue type of the issue type scheme.
    string defaultIssueTypeId?;
    # Whether the issue type scheme is the default.
    boolean isDefault?;
|};

# Represents the Queries record for the operation: getIdsOfWorklogsModifiedSince
public type GetIdsOfWorklogsModifiedSinceQueries record {
    # Use [expand](#expansion) to include additional information about worklogs in the response. This parameter accepts `properties` that returns the properties of each worklog.
    string expand = "";
    # The date and time, as a UNIX timestamp in milliseconds, after which updated worklogs are returned.
    int since = 0;
};

# User details permitted by the user's Atlassian Account privacy settings. However, be aware of these exceptions:
#
#  *  User record deleted from Atlassian: This occurs as the result of a right to be forgotten request. In this case, `displayName` provides an indication and other parameters have default values or are blank (for example, email is blank).
#  *  User record corrupted: This occurs as a results of events such as a server import and can only happen to deleted users. In this case, `accountId` returns *unknown* and all other parameters have fallback values.
#  *  User record unavailable: This usually occurs due to an internal service outage. In this case, all parameters have fallback values.
public type UserDetails record {|
    # The URL of the user.
    string self?;
    # This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
    string name?;
    # This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
    string 'key?;
    # The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
    @constraint:String {maxLength: 128}
    string accountId?;
    # The email address of the user. Depending on the user’s privacy settings, this may be returned as null.
    string emailAddress?;
    # The avatars of the user.
    AvatarUrlsBean avatarUrls?;
    # The display name of the user. Depending on the user’s privacy settings, this may return an alternative value.
    string displayName?;
    # Whether the user is active.
    boolean active?;
    # The time zone specified in the user's profile. Depending on the user’s privacy settings, this may be returned as null.
    string timeZone?;
    # The type of account represented by this user. This will be one of 'atlassian' (normal users), 'app' (application user) or 'customer' (Jira Service Desk customer user)
    string accountType?;
|};

# Details about the operations available in this version.
public type SimpleLink record {|
    string id?;
    string styleClass?;
    string iconClass?;
    string label?;
    string title?;
    string href?;
    int:Signed32 weight?;
|};

# A list of project IDs.
public type ProjectIds record {|
    # The IDs of projects.
    string[] projectIds;
|};

# A page of items.
public type PageBeanIssueTypeScheme record {|
    # The URL of the page.
    string self?;
    # If there is another page of results, the URL of the next page.
    string nextPage?;
    # The maximum number of items that could be returned.
    int:Signed32 maxResults?;
    # The index of the first item returned.
    int startAt?;
    # The number of items returned.
    int total?;
    # Whether this is the last page.
    boolean isLast?;
    # The list of items.
    IssueTypeScheme[] values?;
|};

# A screen scheme.
public type ScreenScheme record {|
    # The ID of the screen scheme.
    int id?;
    # The name of the screen scheme.
    string name?;
    # The description of the screen scheme.
    string description?;
    # The IDs of the screens for the screen types of the screen scheme.
    ScreenTypes screens?;
    # Details of the issue type screen schemes associated with the screen scheme.
    PageBeanIssueTypeScreenScheme issueTypeScreenSchemes?;
|};

# A list of the issues matched to a JQL query or details of errors encountered during matching.
public type IssueMatchesForJQL record {|
    # A list of issue IDs.
    int[] matchedIssues;
    # A list of errors.
    string[] errors;
|};

# Represents the Queries record for the operation: getIssueTypeMappingsForContexts
public type GetIssueTypeMappingsForContextsQueries record {
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 50;
    # The ID of the context. To include multiple contexts, provide an ampersand-separated list. For example, `contextId=10001&contextId=10002`.
    int[] contextId?;
    # The index of the first item to return in a page of results (page offset).
    int startAt = 0;
};

# The details of a transition status.
public type CrateWorkflowStatusDetails record {|
    # The ID of the status.
    string id;
|};

# List of users and groups found in a search.
public type FoundUsersAndGroups record {|
    FoundUsers users?;
    FoundGroups groups?;
|};

public type HierarchyLevel record {|
    # The ID of the hierarchy level. This property is deprecated, see [Change notice: Removing hierarchy level IDs from next-gen APIs](https://developer.atlassian.com/cloud/jira/platform/change-notice-removing-hierarchy-level-ids-from-next-gen-apis/).
    int id?;
    # The name of this hierarchy level.
    string name?;
    # The ID of the level above this one in the hierarchy. This property is deprecated, see [Change notice: Removing hierarchy level IDs from next-gen APIs](https://developer.atlassian.com/cloud/jira/platform/change-notice-removing-hierarchy-level-ids-from-next-gen-apis/).
    int aboveLevelId?;
    # The ID of the level below this one in the hierarchy. This property is deprecated, see [Change notice: Removing hierarchy level IDs from next-gen APIs](https://developer.atlassian.com/cloud/jira/platform/change-notice-removing-hierarchy-level-ids-from-next-gen-apis/).
    int belowLevelId?;
    # The ID of the project configuration. This property is deprecated, see [Change oticen: Removing hierarchy level IDs from next-gen APIs](https://developer.atlassian.com/cloud/jira/platform/change-notice-removing-hierarchy-level-ids-from-next-gen-apis/).
    int projectConfigurationId?;
    # The level of this item in the hierarchy.
    int:Signed32 level?;
    # The issue types available in this hierarchy level.
    int[] issueTypeIds?;
    # The external UUID of the hierarchy level. This property is deprecated, see [Change notice: Removing hierarchy level IDs from next-gen APIs](https://developer.atlassian.com/cloud/jira/platform/change-notice-removing-hierarchy-level-ids-from-next-gen-apis/).
    string externalUuid?;
    "SUBTASK"|"BASE"|"EPIC" globalHierarchyLevel?;
|};

# Details of the permission.
public type RestrictedPermission record {
    # The ID of the permission. Either `id` or `key` must be specified. Use [Get all permissions](#api-rest-api-2-permissions-get) to get the list of permissions.
    string id?;
    # The key of the permission. Either `id` or `key` must be specified. Use [Get all permissions](#api-rest-api-2-permissions-get) to get the list of permissions.
    string 'key?;
};

# Details of the users and groups to receive the notification.
public type NotificationRecipients record {
    # Whether the notification should be sent to the issue's reporter.
    boolean reporter?;
    # Whether the notification should be sent to the issue's assignees.
    boolean assignee?;
    # Whether the notification should be sent to the issue's watchers.
    boolean watchers?;
    # Whether the notification should be sent to the issue's voters.
    boolean voters?;
    # List of users to receive the notification.
    UserDetails[] users?;
    # List of groups to receive the notification.
    GroupName[] groups?;
};

# Details about a workflow configuration update request.
public type WorkflowTransitionRulesUpdate record {|
    # The list of workflows with transition rules to update.
    WorkflowTransitionRules[] workflows;
|};

@constraint:String {minLength: 1}
public type JqlQueriesToParseQueriesItemsString string;

# Represents the Queries record for the operation: removeUser
public type RemoveUserQueries record {
    # The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
    @constraint:String {maxLength: 128}
    string accountId;
    # This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
    string 'key?;
    # This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
    string username?;
};

# Represents the Queries record for the operation: getAuditRecords
public type GetAuditRecordsQueries record {
    # The query string.
    string filter?;
    # The number of records to skip before returning the first result.
    int:Signed32 offset = 0;
    # The maximum number of results to return.
    int:Signed32 'limit = 1000;
    # The date and time on or after which returned audit records must have been created. If `to` is provided `from` must be before `to` or no audit records are returned.
    string 'from?;
    # The date and time on or before which returned audit results must have been created. If `from` is provided `to` must be after `from` or no audit records are returned.
    string to?;
};

# A page of items.
public type PageBeanComponentWithIssueCount record {|
    # The URL of the page.
    string self?;
    # If there is another page of results, the URL of the next page.
    string nextPage?;
    # The maximum number of items that could be returned.
    int:Signed32 maxResults?;
    # The index of the first item returned.
    int startAt?;
    # The number of items returned.
    int total?;
    # Whether this is the last page.
    boolean isLast?;
    # The list of items.
    ComponentWithIssueCount[] values?;
|};

# A page of items.
public type PageBeanIssueFieldOption record {|
    # The URL of the page.
    string self?;
    # If there is another page of results, the URL of the next page.
    string nextPage?;
    # The maximum number of items that could be returned.
    int:Signed32 maxResults?;
    # The index of the first item returned.
    int startAt?;
    # The number of items returned.
    int total?;
    # Whether this is the last page.
    boolean isLast?;
    # The list of items.
    IssueFieldOption[] values?;
|};

public type IdBean record {|
    # The ID of the permission scheme to associate with the project. Use the [Get all permission schemes](#api-rest-api-2-permissionscheme-get) resource to get a list of permission scheme IDs.
    int id;
|};

# The group or role to which this item is visible.
public type Visibility record {
    # Whether visibility of this item is restricted to a group or role.
    "group"|"role" 'type?;
    # The name of the group or role to which visibility of this item is restricted.
    string value?;
};

# Represents the Queries record for the operation: getFilter
public type GetFilterQueries record {
    # Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:
    #
    #  *  `sharedUsers` Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don't specify `sharedUsers`, then the `sharedUsers` object is returned but it doesn't list any users. The list of users returned is limited to 1000, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 1000 users, use `?expand=sharedUsers[1001:2000]`.
    #  *  `subscriptions` Returns the users that are subscribed to the filter. If you don't specify `subscriptions`, the `subscriptions` object is returned but it doesn't list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append `[start-index:end-index]` to the expand request. For example, to access the next 1000 subscriptions, use `?expand=subscriptions[1001:2000]`.
    string expand?;
};

# Represents the Queries record for the operation: removeUserFromGroup
public type RemoveUserFromGroupQueries record {
    # The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
    @constraint:String {maxLength: 128}
    string accountId;
    # The name of the group.
    string groupname;
    # This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
    string username?;
};

# A project's sender email address.
public type ProjectEmailAddress record {|
    # The email address.
    string emailAddress?;
|};

# Represents the Queries record for the operation: bulkGetGroups
public type BulkGetGroupsQueries record {
    # The name of a group. To specify multiple names, pass multiple `groupName` parameters. For example, `groupName=administrators&groupName=jira-software-users`.
    string[] groupName?;
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 50;
    # The ID of a group. To specify multiple IDs, pass multiple `groupId` parameters. For example, `groupId=5b10a2844c20165700ede21g&groupId=5b10ac8d82e05b22cc7d4ef5`.
    string[] groupId?;
    # The index of the first item to return in a page of results (page offset).
    int startAt = 0;
};

# Represents the Queries record for the operation: validateProjectKey
public type ValidateProjectKeyQueries record {
    # The project key.
    string 'key?;
};

# A clause that asserts the current value of a field. For example, `summary ~ test`.
public type FieldValueClause record {
    JqlQueryField 'field;
    # The operator between the field and operand.
    "="|"!="|">"|"<"|">="|"<="|"in"|"not in"|"~"|"~="|"is"|"is not" operator;
    JqlQueryClauseOperand operand;
};

# Represents the Queries record for the operation: getPermissionScheme
public type GetPermissionSchemeQueries record {
    # Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are included when you specify any value. Expand options include:
    #
    #  *  `all` Returns all expandable information.
    #  *  `field` Returns information about the custom field granted the permission.
    #  *  `group` Returns information about the group that is granted the permission.
    #  *  `permissions` Returns all permission grants for each permission scheme.
    #  *  `projectRole` Returns information about the project role granted the permission.
    #  *  `user` Returns information about the user who is granted the permission.
    string expand?;
};

# Represents the Queries record for the operation: deleteFavouriteForFilter
public type DeleteFavouriteForFilterQueries record {
    # Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:
    #
    #  *  `sharedUsers` Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don't specify `sharedUsers`, then the `sharedUsers` object is returned but it doesn't list any users. The list of users returned is limited to 1000, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 1000 users, use `?expand=sharedUsers[1001:2000]`.
    #  *  `subscriptions` Returns the users that are subscribed to the filter. If you don't specify `subscriptions`, the `subscriptions` object is returned but it doesn't list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append `[start-index:end-index]` to the expand request. For example, to access the next 1000 subscriptions, use `?expand=subscriptions[1001:2000]`.
    string expand?;
};

# Represents the Queries record for the operation: createIssueTypeAvatar
public type CreateIssueTypeAvatarQueries record {
    # The length of each side of the crop region.
    int:Signed32 size;
    # The X coordinate of the top-left corner of the crop region.
    int:Signed32 x = 0;
    # The Y coordinate of the top-left corner of the crop region.
    int:Signed32 y = 0;
};

# A page of items.
public type PageBeanUserDetails record {|
    # The URL of the page.
    string self?;
    # If there is another page of results, the URL of the next page.
    string nextPage?;
    # The maximum number of items that could be returned.
    int:Signed32 maxResults?;
    # The index of the first item returned.
    int startAt?;
    # The number of items returned.
    int total?;
    # Whether this is the last page.
    boolean isLast?;
    # The list of items.
    UserDetails[] values?;
|};

# Issue type scheme item.
public type IssueTypeSchemeMapping record {|
    # The ID of the issue type scheme.
    string issueTypeSchemeId;
    # The ID of the issue type.
    string issueTypeId;
|};

# An operand that is a function. See [Advanced searching - functions reference](https://confluence.atlassian.com/x/dwiiLQ) for more information about JQL functions.
public type FunctionOperand record {
    # The name of the function.
    string 'function;
    # The list of function arguments.
    string[] arguments;
};

# Represents the Queries record for the operation: getFieldAutoCompleteForQueryString
public type GetFieldAutoCompleteForQueryStringQueries record {
    # The partial predicate item name entered by the user.
    string predicateValue?;
    # The name of the field.
    string fieldName?;
    # The name of the [ CHANGED operator predicate](https://confluence.atlassian.com/x/hQORLQ#Advancedsearching-operatorsreference-CHANGEDCHANGED) for which the suggestions are generated. The valid predicate operators are *by*, *from*, and *to*.
    string predicateName?;
    # The partial field item name entered by the user.
    string fieldValue?;
};

# A JQL query clause that consists of nested clauses. For example, `(labels in (urgent, blocker) OR lastCommentedBy = currentUser()). Note that, where nesting is not defined, the parser nests JQL clauses based on the operator precedence. For example, "A OR B AND C" is parsed as "(A OR B) AND C". See Setting the precedence of operators for more information about precedence in JQL queries.`
public type CompoundClause record {
    # The list of nested clauses.
    JqlQueryClause[] clauses;
    # The operator between the clauses.
    "and"|"or"|"not" operator;
};

# A page of items.
public type PageBeanProject record {|
    # The URL of the page.
    string self?;
    # If there is another page of results, the URL of the next page.
    string nextPage?;
    # The maximum number of items that could be returned.
    int:Signed32 maxResults?;
    # The index of the first item returned.
    int startAt?;
    # The number of items returned.
    int total?;
    # Whether this is the last page.
    boolean isLast?;
    # The list of items.
    Project[] values?;
|};

# Details about the mapping between an issue type and a workflow.
public type IssueTypeWorkflowMapping record {|
    # The ID of the issue type. Not required if updating the issue type-workflow mapping.
    string issueType?;
    # The name of the workflow.
    string workflow?;
    # Set to true to create or update the draft of a workflow scheme and update the mapping in the draft, when the workflow scheme cannot be edited. Defaults to `false`. Only applicable when updating the workflow-issue types mapping.
    boolean updateDraftIfNeeded?;
|};

# Represents the Queries record for the operation: createFilter
public type CreateFilterQueries record {
    # Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:
    #
    #  *  `sharedUsers` Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don't specify `sharedUsers`, then the `sharedUsers` object is returned but it doesn't list any users. The list of users returned is limited to 1000, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 1000 users, use `?expand=sharedUsers[1001:2000]`.
    #  *  `subscriptions` Returns the users that are subscribed to the filter. If you don't specify `subscriptions`, the `subscriptions` object is returned but it doesn't list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append `[start-index:end-index]` to the expand request. For example, to access the next 1000 subscriptions, use `?expand=subscriptions[1001:2000]`.
    string expand?;
};

# Represents the Queries record for the operation: createPermissionScheme
public type CreatePermissionSchemeQueries record {
    # Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are always included when you specify any value. Expand options include:
    #
    #  *  `all` Returns all expandable information.
    #  *  `field` Returns information about the custom field granted the permission.
    #  *  `group` Returns information about the group that is granted the permission.
    #  *  `permissions` Returns all permission grants for each permission scheme.
    #  *  `projectRole` Returns information about the project role granted the permission.
    #  *  `user` Returns information about the user who is granted the permission.
    string expand?;
};

public type UserBean record {|
    # This property is deprecated in favor of `accountId` because of privacy changes. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
    # The key of the user.
    string 'key?;
    # The URL of the user.
    string self?;
    # This property is deprecated in favor of `accountId` because of privacy changes. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
    # The username of the user.
    string name?;
    # The display name of the user. Depending on the user’s privacy setting, this may return an alternative value.
    string displayName?;
    # Whether the user is active.
    boolean active?;
    # The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
    @constraint:String {maxLength: 128}
    string accountId?;
    # The avatars of the user.
    UserBeanAvatarUrls avatarUrls?;
|};

# Details of the options to create for a custom field.
public type BulkCustomFieldOptionCreateRequest record {|
    # Details of options to create.
    CustomFieldOptionCreate[] options?;
|};

# The ID of a screen scheme.
public type ScreenSchemeId record {|
    # The ID of the screen scheme.
    int id;
|};

# Details of a share permission for the filter.
public type SharePermission record {|
    # The unique identifier of the share permission.
    int id?;
    # The type of share permission:
    #
    #  *  `group` Shared with a group. If set in a request, then specify `sharePermission.group` as well.
    #  *  `project` Shared with a project. If set in a request, then specify `sharePermission.project` as well.
    #  *  `projectRole` Share with a project role in a project. This value is not returned in responses. It is used in requests, where it needs to be specify with `projectId` and `projectRoleId`.
    #  *  `global` Shared globally. If set in a request, no other `sharePermission` properties need to be specified.
    #  *  `loggedin` Shared with all logged-in users. Note: This value is set in a request by specifying `authenticated` as the `type`.
    #  *  `project-unknown` Shared with a project that the user does not have access to. Cannot be set in a request.
    "group"|"project"|"projectRole"|"global"|"loggedin"|"authenticated"|"project-unknown" 'type;
    # The project that the filter is shared with. This is similar to the project object returned by [Get project](#api-rest-api-2-project-projectIdOrKey-get) but it contains a subset of the properties, which are: `self`, `id`, `key`, `assigneeType`, `name`, `roles`, `avatarUrls`, `projectType`, `simplified`.
    # For a request, specify the `id` for the project.
    Project project?;
    # The project role that the filter is shared with.
    # For a request, specify the `id` for the role. You must also specify the `project` object and `id` for the project that the role is in.
    ProjectRole role?;
    # The group that the filter is shared with. For a request, specify the `name` property for the group.
    GroupName group?;
|};

# Represents the Queries record for the operation: getAllUsers
public type GetAllUsersQueries record {
    # The maximum number of items to return.
    int:Signed32 maxResults = 50;
    # The index of the first item to return.
    int:Signed32 startAt = 0;
};

# A comment.
public type Comment record {
    # The URL of the comment.
    string self?;
    # The ID of the comment.
    string id?;
    # The ID of the user who created the comment.
    UserDetails author?;
    # The comment text.
    string body?;
    # The rendered version of the comment.
    string renderedBody?;
    # The ID of the user who updated the comment last.
    UserDetails updateAuthor?;
    # The date and time at which the comment was created.
    string created?;
    # The date and time at which the comment was updated last.
    string updated?;
    # The group or role to which this comment is visible. Optional on create and update.
    Visibility visibility?;
    # Whether the comment is visible in Jira Service Desk. Defaults to true when comments are created in the Jira Cloud Platform. This includes when the site doesn't use Jira Service Desk or the project isn't a Jira Service Desk project and, therefore, there is no Jira Service Desk for the issue to be visible on. To create a comment with its visibility in Jira Service Desk set to false, use the Jira Service Desk REST API [Create request comment](https://developer.atlassian.com/cloud/jira/service-desk/rest/#api-rest-servicedeskapi-request-issueIdOrKey-comment-post) operation.
    boolean jsdPublic?;
    # A list of comment properties. Optional on create and update.
    EntityProperty[] properties?;
};

# A workflow scheme along with a list of projects that use it.
public type WorkflowSchemeAssociations record {|
    # The list of projects that use the workflow scheme.
    string[] projectIds;
    # The workflow scheme.
    WorkflowScheme workflowScheme;
|};

# Details of a custom field option to rename.
public type RenamedOption record {|
    # The current option value.
    string value;
    # The new value of the option.
    @constraint:String {maxLength: 255}
    string newValue;
    # The new values for the cascading options of this option. Only used for Select List (cascading) fields.
    RenamedCascadingOption[] cascadingOptions?;
|};

# A page of items.
public type PageBeanScreenWithTab record {|
    # The URL of the page.
    string self?;
    # If there is another page of results, the URL of the next page.
    string nextPage?;
    # The maximum number of items that could be returned.
    int:Signed32 maxResults?;
    # The index of the first item returned.
    int startAt?;
    # The number of items returned.
    int total?;
    # Whether this is the last page.
    boolean isLast?;
    # The list of items.
    ScreenWithTab[] values?;
|};

# A page of items.
public type PageBeanIssueSecurityLevelMember record {|
    # The URL of the page.
    string self?;
    # If there is another page of results, the URL of the next page.
    string nextPage?;
    # The maximum number of items that could be returned.
    int:Signed32 maxResults?;
    # The index of the first item returned.
    int startAt?;
    # The number of items returned.
    int total?;
    # Whether this is the last page.
    boolean isLast?;
    # The list of items.
    IssueSecurityLevelMember[] values?;
|};

# Details of an issue type screen scheme.
public type IssueTypeScreenSchemeUpdateDetails record {|
    # The name of the issue type screen scheme. The name must be unique. The maximum length is 255 characters.
    string name?;
    # The description of the issue type screen scheme. The maximum length is 255 characters.
    string description?;
|};

# The list of users found in a search, including header text (Showing X of Y matching users) and total of matched users.
public type FoundUsers record {|
    UserPickerUser[] users?;
    # The total number of users found in the search.
    int:Signed32 total?;
    # Header text indicating the number of users in the response and the total number of users found in the search.
    string header?;
|};

# A clause that asserts a previous value of a field. For example, `status WAS "Resolved" BY currentUser() BEFORE "2019/02/02"`. See [WAS](https://confluence.atlassian.com/x/dgiiLQ#Advancedsearching-operatorsreference-WASWAS) for more information about the WAS operator.
public type FieldWasClause record {
    JqlQueryField 'field;
    # The operator between the field and operand.
    "was"|"was in"|"was not in"|"was not" operator;
    JqlQueryClauseOperand operand;
    # The list of time predicates.
    JqlQueryClauseTimePredicate[] predicates;
};

public type JiraExpressionEvaluationMetaDataBean record {|
    # Contains information about the expression complexity. For example, the number of steps it took to evaluate the expression.
    JiraExpressionsComplexityBean complexity?;
    # Contains information about the `issues` variable in the context. For example, is the issues were loaded with JQL, information about the page will be included here.
    IssuesMetaBean issues?;
|};

# An audit record.
public type AuditRecordBean record {|
    # The ID of the audit record.
    int id?;
    # The summary of the audit record.
    string summary?;
    # The URL of the computer where the creation of the audit record was initiated.
    string remoteAddress?;
    # Deprecated, use `authorAccountId` instead. The key of the user who created the audit record.
    string authorKey?;
    # The date and time on which the audit record was created.
    string created?;
    # The category of the audit record. For a list of these categories, see the help article [Auditing in Jira applications](https://confluence.atlassian.com/x/noXKM).
    string category?;
    # The event the audit record originated from.
    string eventSource?;
    # The description of the audit record.
    string description?;
    AssociatedItemBean objectItem?;
    # The list of values changed in the record event.
    ChangedValueBean[] changedValues?;
    # The list of items associated with the changed record.
    AssociatedItemBean[] associatedItems?;
|};

# List of project permissions and the projects and issues those permissions grant access to.
public type BulkProjectPermissionGrants record {|
    # A project permission,
    string permission;
    # IDs of the issues the user has the permission for.
    int[] issues;
    # IDs of the projects the user has the permission for.
    int[] projects;
|};

# Represents the Queries record for the operation: removePreference
public type RemovePreferenceQueries record {
    # The key of the preference.
    string 'key;
};

# Represents the Queries record for the operation: analyseExpression
public type AnalyseExpressionQueries record {
    # The check to perform:
    #
    #  *  `syntax` Each expression's syntax is checked to ensure the expression can be parsed. Also, syntactic limits are validated. For example, the expression's length.
    #  *  `type` EXPERIMENTAL. Each expression is type checked and the final type of the expression inferred. Any type errors that would result in the expression failure at runtime are reported. For example, accessing properties that don't exist or passing the wrong number of arguments to functions. Also performs the syntax check.
    #  *  `complexity` EXPERIMENTAL. Determines the formulae for how many [expensive operations](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/#expensive-operations) each expression may execute.
    "syntax"|"type"|"complexity" 'check = "syntax";
};

# Details of the custom field options for a context.
public type CustomFieldContextOption record {|
    # The ID of the custom field option.
    string id;
    # The value of the custom field option.
    string value;
    # For cascading options, the ID of the custom field option containing the cascading option.
    string optionId?;
    # Whether the option is disabled.
    boolean disabled;
|};

# ID of a screen.
public type ScreenID record {|
    # The ID of the screen.
    string id;
|};

# Represents the Queries record for the operation: replaceIssueFieldOption
public type ReplaceIssueFieldOptionQueries record {
    # A JQL query that specifies the issues to be updated. For example, *project=10000*.
    string jql?;
    # The ID of the option that will replace the currently selected option.
    int replaceWith?;
};

# A group label.
public type GroupLabel record {|
    # The group label name.
    string text?;
    # The title of the group label.
    string title?;
    # The type of the group label.
    "ADMIN"|"SINGLE"|"MULTIPLE" 'type?;
|};

# Represents the Queries record for the operation: getAllProjects
public type GetAllProjectsQueries record {
    # Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expanded options include:
    #
    #  *  `description` Returns the project description.
    #  *  `issueTypes` Returns all issue types associated with the project.
    #  *  `lead` Returns information about the project lead.
    #  *  `projectKeys` Returns all project keys associated with the project.
    string expand?;
    # Returns the user's most recently accessed projects. You may specify the number of results to return up to a maximum of 20. If access is anonymous, then the recently accessed projects are based on the current HTTP session.
    int:Signed32 recent?;
    # A list of project properties to return for the project. This parameter accepts a comma-separated list.
    string[] properties?;
};

# A field used in a JQL query. See [Advanced searching - fields reference](https://confluence.atlassian.com/x/dAiiLQ) for more information about fields in JQL queries.
public type JqlQueryField record {|
    # The name of the field.
    string name;
    # When the field refers to a value in an entity property, details of the entity property value.
    JqlQueryFieldEntityProperty[] property?;
|};

# Represents the Queries record for the operation: findUsersWithBrowsePermission
public type FindUsersWithBrowsePermissionQueries record {
    # A query string that is matched exactly against user `accountId`. Required, unless `query` is specified.
    @constraint:String {maxLength: 128}
    string accountId?;
    # The project key for the project (case sensitive). Required, unless `issueKey` is specified.
    string projectKey?;
    # The issue key for the issue. Required, unless `projectKey` is specified.
    string issueKey?;
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 50;
    # A query string that is matched against user attributes, such as `displayName` and `emailAddress`, to find relevant users. The string can match the prefix of the attribute's value. For example, *query=john* matches a user with a `displayName` of *John Smith* and a user with an `emailAddress` of *johnson@example.com*. Required, unless `accountId` is specified.
    string query?;
    # The index of the first item to return in a page of results (page offset).
    int:Signed32 startAt = 0;
    # This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
    string username?;
};

# Details about the configuration of Jira.
public type Configuration record {|
    # Whether the ability for users to vote on issues is enabled. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.
    boolean votingEnabled?;
    # Whether the ability for users to watch issues is enabled. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.
    boolean watchingEnabled?;
    # Whether the ability to create unassigned issues is enabled. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.
    boolean unassignedIssuesAllowed?;
    # Whether the ability to create subtasks for issues is enabled.
    boolean subTasksEnabled?;
    # Whether the ability to link issues is enabled.
    boolean issueLinkingEnabled?;
    # Whether the ability to track time is enabled. This property is deprecated.
    boolean timeTrackingEnabled?;
    # Whether the ability to add attachments to issues is enabled.
    boolean attachmentsEnabled?;
    # The configuration of time tracking.
    TimeTrackingConfiguration timeTrackingConfiguration?;
|};

# Represents the Queries record for the operation: getSelectableIssueFieldOptions
public type GetSelectableIssueFieldOptionsQueries record {
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 50;
    # Filters the results to options that are only available in the specified project.
    int projectId?;
    # The index of the first item to return in a page of results (page offset).
    int startAt = 0;
};

# A type of issue suggested for use in auto-completion.
public type IssuePickerSuggestionsIssueType record {|
    # The label of the type of issues suggested for use in auto-completion.
    string label?;
    # If issue suggestions are found, returns a message indicating the number of issues suggestions found and returned.
    string sub?;
    # The ID of the type of issues suggested for use in auto-completion.
    string id?;
    # If no issue suggestions are found, returns a message indicating no suggestions were found,
    string msg?;
    # A list of issues suggested for use in auto-completion.
    SuggestedIssue[] issues?;
|};

# Represents the Queries record for the operation: addWorklog
public type AddWorklogQueries record {
    # The value to set as the issue's remaining time estimate, as days (\#d), hours (\#h), or minutes (\#m or \#). For example, *2d*. Required when `adjustEstimate` is `new`.
    string newEstimate?;
    # Defines how to update the issue's time estimate, the options are:
    #
    #  *  `new` Sets the estimate to a specific value, defined in `newEstimate`.
    #  *  `leave` Leaves the estimate unchanged.
    #  *  `manual` Reduces the estimate by amount specified in `reduceBy`.
    #  *  `auto` Reduces the estimate by the value of `timeSpent` in the worklog.
    "new"|"leave"|"manual"|"auto" adjustEstimate = "auto";
    # The amount to reduce the issue's remaining estimate by, as days (\#d), hours (\#h), or minutes (\#m). For example, *2d*. Required when `adjustEstimate` is `manual`.
    string reduceBy?;
    # Use [expand](#expansion) to include additional information about work logs in the response. This parameter accepts `properties`, which returns worklog properties.
    string expand = "";
    # Whether the worklog entry should be added to the issue even if the issue is not editable, because jira.issue.editable set to false or missing. For example, the issue is closed. Only connect app users with admin scope permission can use this flag.
    boolean overrideEditableFlag = false;
    # Whether users watching the issue are notified by email.
    boolean notifyUsers = true;
};

# Details of the association between an issue type scheme and project.
public type IssueTypeSchemeProjectAssociation record {|
    # The ID of the issue type scheme.
    string issueTypeSchemeId;
    # The ID of the project.
    string projectId;
|};

public type IssueFieldOptionCreateBean record {
    # The option's name, which is displayed in Jira.
    string value;
    # The properties of the option as arbitrary key-value pairs. These properties can be searched using JQL, if the extractions (see https://developer.atlassian.com/cloud/jira/platform/modules/issue-field-option-property-index/) are defined in the descriptor for the issue field module.
    record {} properties?;
    IssueFieldOptionConfiguration config?;
};

# Details of Jira expressions for analysis.
public type JiraExpressionForAnalysis record {|
    # The list of Jira expressions to analyse.
    string[] expressions;
    # Context variables and their types. The type checker assumes that [common context variables](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/#context-variables), such as `issue` or `project`, are available in context and sets their type. Use this property to override the default types or provide details of new variables.
    record {|string...;|} contextVariables?;
|};

# Details of the group membership or permissions needed to receive the notification.
public type NotificationRecipientsRestrictions record {|
    # List of group memberships required to receive the notification.
    GroupName[] groups?;
    # List of permissions required to receive the notification.
    RestrictedPermission[] permissions?;
|};

# The details of watchers on an issue.
public type Watchers record {|
    # The URL of these issue watcher details.
    string self?;
    # Whether the calling user is watching this issue.
    boolean isWatching?;
    # The number of users watching this issue.
    int:Signed32 watchCount?;
    # Details of the users watching this issue.
    UserDetails[] watchers?;
|};

# Details of a custom field option to create.
public type CustomFieldOptionCreate record {|
    # The value of the custom field option.
    string value;
    # For cascading options, the ID of the custom field object containing the cascading option.
    string optionId?;
    # Whether the option is disabled.
    boolean disabled?;
|};

# The hierarchy of issue types within a project.
public type ProjectIssueTypeHierarchy record {|
    # The ID of the project.
    int projectId?;
    # Details of an issue type hierarchy level.
    ProjectIssueTypesHierarchyLevel[] hierarchy?;
|};

# The ID or key of a linked issue.
public type LinkedIssue record {|
    # The ID of an issue. Required if `key` isn't provided.
    string id?;
    # The key of an issue. Required if `id` isn't provided.
    string 'key?;
    # The URL of the issue.
    string self?;
    # The fields associated with the issue.
    Fields fields?;
|};

# Provides a set of configurations for controlling the behaviours when communicating with a remote HTTP endpoint.
@display {label: "Connection Config"}
public type ConnectionConfig record {|
    # Configurations related to client authentication
    OAuth2PasswordGrantConfig|http:CredentialsConfig auth;
    # The HTTP version understood by the client
    http:HttpVersion httpVersion = http:HTTP_2_0;
    # Configurations related to HTTP/1.x protocol
    http:ClientHttp1Settings http1Settings = {};
    # Configurations related to HTTP/2 protocol
    http:ClientHttp2Settings http2Settings = {};
    # The maximum time to wait (in seconds) for a response before closing the connection
    decimal timeout = 30;
    # The choice of setting `forwarded`/`x-forwarded` header
    string forwarded = "disable";
    # Configurations associated with Redirection
    http:FollowRedirects followRedirects?;
    # Configurations associated with request pooling
    http:PoolConfiguration poolConfig?;
    # HTTP caching related configurations
    http:CacheConfig cache = {};
    # Specifies the way of handling compression (`accept-encoding`) header
    http:Compression compression = http:COMPRESSION_AUTO;
    # Configurations associated with the behaviour of the Circuit Breaker
    http:CircuitBreakerConfig circuitBreaker?;
    # Configurations associated with retrying
    http:RetryConfig retryConfig?;
    # Configurations associated with cookies
    http:CookieConfig cookieConfig?;
    # Configurations associated with inbound response size limits
    http:ResponseLimitConfigs responseLimits = {};
    # SSL/TLS-related options
    http:ClientSecureSocket secureSocket?;
    # Proxy server related options
    http:ProxyConfig proxy?;
    # Provides settings related to client socket configuration
    http:ClientSocketConfig socketConfig = {};
    # Enables the inbound payload validation functionality which provided by the constraint package. Enabled by default
    boolean validation = true;
    # Enables relaxed data binding on the client side. When enabled, `nil` values are treated as optional,
    # and absent fields are handled as `nilable` types. Enabled by default.
    boolean laxDataBinding = true;
|};

# Represents the Queries record for the operation: getNotificationSchemeForProject
public type GetNotificationSchemeForProjectQueries record {
    # Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:
    #
    #  *  `all` Returns all expandable information.
    #  *  `field` Returns information about any custom fields assigned to receive an event.
    #  *  `group` Returns information about any groups assigned to receive an event.
    #  *  `notificationSchemeEvents` Returns a list of event associations. This list is returned for all expandable information.
    #  *  `projectRole` Returns information about any project roles assigned to receive an event.
    #  *  `user` Returns information about any users assigned to receive an event.
    string expand?;
};

# Details of a link between issues.
public type IssueLink record {|
    # The ID of the issue link.
    string id?;
    # The URL of the issue link.
    string self?;
    # The type of link between the issues.
    IssueLinkType 'type;
    # The issue the link joins to.
    LinkedIssue inwardIssue;
    # The issue the link originates from.
    LinkedIssue outwardIssue;
|};

# Represents the Queries record for the operation: getPreference
public type GetPreferenceQueries record {
    # The key of the preference.
    string 'key;
};

# Represents the Queries record for the operation: getDefaultWorkflow
public type GetDefaultWorkflowQueries record {
    # Set to `true` to return the default workflow for the workflow scheme's draft rather than scheme itself. If the workflow scheme does not have a draft, then the default workflow for the workflow scheme is returned.
    boolean returnDraftIfExists = false;
};

# Represents the Queries record for the operation: getIssuePickerResource
public type GetIssuePickerResourceQueries record {
    # The ID of a project that suggested issues must belong to.
    string currentProjectId?;
    # A string to match against text fields in the issue such as title, description, or comments.
    string query?;
    # The key of an issue to exclude from search results. For example, the issue the user is viewing when they perform this query.
    string currentIssueKey?;
    # A JQL query defining a list of issues to search for the query term. Note that `username` and `userkey` cannot be used as search terms for this parameter, due to privacy reasons. Use `accountId` instead.
    string currentJQL?;
    # Indicate whether to include subtasks in the suggestions list.
    boolean showSubTasks?;
    # When `currentIssueKey` is a subtask, whether to include the parent issue in the suggestions if it matches the query.
    boolean showSubTaskParent?;
};

# Represents the Queries record for the operation: getFilters
public type GetFiltersQueries record {
    # Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:
    #
    #  *  `sharedUsers` Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don't specify `sharedUsers`, then the `sharedUsers` object is returned but it doesn't list any users. The list of users returned is limited to 1000, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 1000 users, use `?expand=sharedUsers[1001:2000]`.
    #  *  `subscriptions` Returns the users that are subscribed to the filter. If you don't specify `subscriptions`, the `subscriptions` object is returned but it doesn't list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append `[start-index:end-index]` to the expand request. For example, to access the next 1000 subscriptions, use `?expand=subscriptions[1001:2000]`.
    string expand?;
};

# Represents the Queries record for the operation: getIssueTypeSchemeForProjects
public type GetIssueTypeSchemeForProjectsQueries record {
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 50;
    # The list of project IDs. To include multiple project IDs, provide an ampersand-separated list. For example, `projectId=10000&projectId=10001`.
    int[] projectId;
    # The index of the first item to return in a page of results (page offset).
    int startAt = 0;
};

# Details about a workflow.
public type Workflow record {|
    PublishedWorkflowId id;
    # The description of the workflow.
    string description;
    # The transitions of the workflow.
    Transition[] transitions?;
    # The statuses of the workflow.
    WorkflowStatus[] statuses?;
    # Whether this is the default workflow.
    boolean isDefault?;
|};

# Represents the Queries record for the operation: deleteWorklog
public type DeleteWorklogQueries record {
    # The value to set as the issue's remaining time estimate, as days (\#d), hours (\#h), or minutes (\#m or \#). For example, *2d*. Required when `adjustEstimate` is `new`.
    string newEstimate?;
    # Defines how to update the issue's time estimate, the options are:
    #
    #  *  `new` Sets the estimate to a specific value, defined in `newEstimate`.
    #  *  `leave` Leaves the estimate unchanged.
    #  *  `manual` Increases the estimate by amount specified in `increaseBy`.
    #  *  `auto` Reduces the estimate by the value of `timeSpent` in the worklog.
    "new"|"leave"|"manual"|"auto" adjustEstimate = "auto";
    # Whether the work log entry should be added to the issue even if the issue is not editable, because jira.issue.editable set to false or missing. For example, the issue is closed. Only connect app users with admin permissions can use this flag.
    boolean overrideEditableFlag = false;
    # Whether users watching the issue are notified by email.
    boolean notifyUsers = true;
    # The amount to increase the issue's remaining estimate by, as days (\#d), hours (\#h), or minutes (\#m or \#). For example, *2d*. Required when `adjustEstimate` is `manual`.
    string increaseBy?;
};

# Represents the Queries record for the operation: deleteDraftWorkflowMapping
public type DeleteDraftWorkflowMappingQueries record {
    # The name of the workflow.
    string workflowName;
};

# Details of a custom field.
public type UpdateCustomFieldDetails record {|
    # The name of the custom field. It doesn't have to be unique. The maximum length is 255 characters.
    string name?;
    # The description of the custom field. The maximum length is 40000 characters.
    string description?;
    # The searcher that defines the way the field is searched in Jira. It can be set to `null`, otherwise you must specify the valid searcher for the field type, as listed below (abbreviated values shown):
    #
    #  *  `cascadingselect`: `cascadingselectsearcher`
    #  *  `datepicker`: `daterange`
    #  *  `datetime`: `datetimerange`
    #  *  `float`: `exactnumber` or `numberrange`
    #  *  `grouppicker`: `grouppickersearcher`
    #  *  `importid`: `exactnumber` or `numberrange`
    #  *  `labels`: `labelsearcher`
    #  *  `multicheckboxes`: `multiselectsearcher`
    #  *  `multigrouppicker`: `multiselectsearcher`
    #  *  `multiselect`: `multiselectsearcher`
    #  *  `multiuserpicker`: `userpickergroupsearcher`
    #  *  `multiversion`: `versionsearcher`
    #  *  `project`: `projectsearcher`
    #  *  `radiobuttons`: `multiselectsearcher`
    #  *  `readonlyfield`: `textsearcher`
    #  *  `select`: `multiselectsearcher`
    #  *  `textarea`: `textsearcher`
    #  *  `textfield`: `textsearcher`
    #  *  `url`: `exacttextsearcher`
    #  *  `userpicker`: `userpickergroupsearcher`
    #  *  `version`: `versionsearcher`
    "com.atlassian.jira.plugin.system.customfieldtypes:cascadingselectsearcher"|"com.atlassian.jira.plugin.system.customfieldtypes:daterange"|"com.atlassian.jira.plugin.system.customfieldtypes:datetimerange"|"com.atlassian.jira.plugin.system.customfieldtypes:exactnumber"|"com.atlassian.jira.plugin.system.customfieldtypes:exacttextsearcher"|"com.atlassian.jira.plugin.system.customfieldtypes:grouppickersearcher"|"com.atlassian.jira.plugin.system.customfieldtypes:labelsearcher"|"com.atlassian.jira.plugin.system.customfieldtypes:multiselectsearcher"|"com.atlassian.jira.plugin.system.customfieldtypes:numberrange"|"com.atlassian.jira.plugin.system.customfieldtypes:projectsearcher"|"com.atlassian.jira.plugin.system.customfieldtypes:textsearcher"|"com.atlassian.jira.plugin.system.customfieldtypes:userpickergroupsearcher"|"com.atlassian.jira.plugin.system.customfieldtypes:versionsearcher" searcherKey?;
|};

# The list of groups found in a search, including header text (Showing X of Y matching groups) and total of matched groups.
public type FoundGroups record {|
    # Header text indicating the number of groups in the response and the total number of groups found in the search.
    string header?;
    # The total number of groups found in the search.
    int:Signed32 total?;
    FoundGroup[] groups?;
|};

# A list of JQL queries to parse.
public type JqlQueriesToParse record {|
    # A list of queries to parse.
    JqlQueriesToParseQueriesItemsString[] queries;
|};

# A page of items.
public type PageBeanIssueTypeScreenSchemesProjects record {|
    # The URL of the page.
    string self?;
    # If there is another page of results, the URL of the next page.
    string nextPage?;
    # The maximum number of items that could be returned.
    int:Signed32 maxResults?;
    # The index of the first item returned.
    int startAt?;
    # The number of items returned.
    int total?;
    # Whether this is the last page.
    boolean isLast?;
    # The list of items.
    IssueTypeScreenSchemesProjects[] values?;
|};

# Details about a project.
public type Project record {|
    # Expand options that include additional project details in the response.
    string expand?;
    # The URL of the project details.
    string self?;
    # The ID of the project.
    string id?;
    # The key of the project.
    string 'key?;
    # A brief description of the project.
    string description?;
    # The username of the project lead.
    User lead?;
    # List of the components contained in the project.
    Component[] components?;
    # List of the issue types available in the project.
    IssueTypeDetails[] issueTypes?;
    # A link to information about this project, such as project documentation.
    string url?;
    # An email address associated with the project.
    string email?;
    # The default assignee when creating issues for this project.
    "PROJECT_LEAD"|"UNASSIGNED" assigneeType?;
    # The versions defined in the project. For more information, see [Create version](#api-rest-api-2-version-post).
    Version[] versions?;
    # The name of the project.
    string name?;
    # The name and self URL for each role defined in the project. For more information, see [Create project role](#api-rest-api-2-role-post).
    record {|string...;|} roles?;
    # The URLs of the project's avatars.
    AvatarUrlsBean avatarUrls?;
    # The category the project belongs to.
    ProjectCategory projectCategory?;
    # The [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes) of the project.
    "software"|"service_desk"|"business" projectTypeKey?;
    # Whether the project is simplified.
    boolean simplified?;
    # The type of the project.
    "classic"|"next-gen" style?;
    # Whether the project is selected as a favorite.
    boolean favourite?;
    # Whether the project is private.
    boolean isPrivate?;
    # The issue type hierarchy for the project.
    Hierarchy issueTypeHierarchy?;
    # User permissions on the project
    ProjectPermissions permissions?;
    # Map of project properties
    record {} properties?;
    # Unique ID for next-gen projects.
    string uuid?;
    # Insights about the project.
    ProjectInsight insight?;
    # Whether the project is marked as deleted.
    boolean deleted?;
    # The date when the project is deleted permanently.
    string retentionTillDate?;
    # The date when the project was marked as deleted.
    string deletedDate?;
    # The user who marked the project as deleted.
    User deletedBy?;
    # Whether the project is archived.
    boolean archived?;
    # The date when the project was archived.
    string archivedDate?;
    # The user who archived the project.
    User archivedBy?;
|};

# OAuth2 Password Grant Configs
public type OAuth2PasswordGrantConfig record {|
    *http:OAuth2PasswordGrantConfig;
    # Token URL
    string tokenUrl = "https://auth.atlassian.com/oauth/token";
|};

# List of project avatars.
public type ProjectAvatars record {|
    # List of avatars included with Jira. These avatars cannot be deleted.
    Avatar[] system?;
    # List of avatars added to Jira. These avatars may be deleted.
    Avatar[] custom?;
|};

# Details of the user associated with the role.
public type ProjectRoleUser record {|
    # The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. Returns *unknown* if the record is deleted and corrupted, for example, as the result of a server import.
    @constraint:String {maxLength: 128}
    string accountId?;
|};

public type LinkIssueRequestJsonBean record {|
    IssueLinkType 'type;
    LinkedIssue inwardIssue;
    LinkedIssue outwardIssue;
    Comment comment?;
|};

# Represents the Queries record for the operation: addUserToGroup
public type AddUserToGroupQueries record {
    # The name of the group (case sensitive).
    string groupname;
};

# Represents the Queries record for the operation: deleteDefaultWorkflow
public type DeleteDefaultWorkflowQueries record {
    # Set to true to create or update the draft of a workflow scheme and delete the mapping from the draft, when the workflow scheme cannot be edited. Defaults to `false`.
    boolean updateDraftIfNeeded?;
};

# A page of items.
public type PageBeanUser record {|
    # The URL of the page.
    string self?;
    # If there is another page of results, the URL of the next page.
    string nextPage?;
    # The maximum number of items that could be returned.
    int:Signed32 maxResults?;
    # The index of the first item returned.
    int startAt?;
    # The number of items returned.
    int total?;
    # Whether this is the last page.
    boolean isLast?;
    # The list of items.
    User[] values?;
|};

# Details of the issue creation metadata for an issue type.
public type IssueTypeIssueCreateMetadata record {|
    # The URL of these issue type details.
    string self?;
    # The ID of the issue type.
    string id?;
    # The description of the issue type.
    string description?;
    # The URL of the issue type's avatar.
    string iconUrl?;
    # The name of the issue type.
    string name?;
    # Whether this issue type is used to create subtasks.
    boolean subtask?;
    # The ID of the issue type's avatar.
    int avatarId?;
    # Unique ID for next-gen projects.
    string entityId?;
    # Hierarchy level of the issue type.
    int:Signed32 hierarchyLevel?;
    # Details of the next-gen projects the issue type is available in.
    Scope scope?;
    # Expand options that include additional issue type metadata details in the response.
    string expand?;
    # List of the fields available when creating an issue for the issue type.
    record {|FieldMetadata...;|} fields?;
|};

public type Group record {|
    # The name of group.
    string name?;
    # The URL for these group details.
    string self?;
    # A paginated list of the users that are members of the group. A maximum of 50 users is returned in the list, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 50 users, use`?expand=users[51:100]`.
    PagedListUserDetailsApplicationUser users?;
    # Expand options that include additional group details in the response.
    string expand?;
|};

# Represents the Queries record for the operation: getContextsForFieldDeprecated
public type GetContextsForFieldDeprecatedQueries record {
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 20;
    # The index of the first item to return in a page of results (page offset).
    int startAt = 0;
};

# Represents the Queries record for the operation: getAllIssueTypeSchemes
public type GetAllIssueTypeSchemesQueries record {
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 50;
    # The list of issue type schemes IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`.
    int[] id?;
    # The index of the first item to return in a page of results (page offset).
    int startAt = 0;
};

# Represents the Queries record for the operation: removeGroup
public type RemoveGroupQueries record {
    # The name of the group.
    string groupname;
    # The group to transfer restrictions to. Only comments and worklogs are transferred. If restrictions are not transferred, comments and worklogs are inaccessible after the deletion.
    string swapGroup?;
};

# Details about a field.
public type FieldDetails record {|
    # The ID of the field.
    string id?;
    # The key of the field.
    string 'key?;
    # The name of the field.
    string name?;
    # Whether the field is a custom field.
    boolean custom?;
    # Whether the content of the field can be used to order lists.
    boolean orderable?;
    # Whether the field can be used as a column on the issue navigator.
    boolean navigable?;
    # Whether the content of the field can be searched.
    boolean searchable?;
    # The names that can be used to reference the field in an advanced search. For more information, see [Advanced searching - fields reference](https://confluence.atlassian.com/x/gwORLQ).
    string[] clauseNames?;
    # The scope of the field.
    Scope scope?;
    # The data schema for the field.
    JsonTypeBean schema?;
|};

# Details of an issue type scheme and its associated issue types.
public type IssueTypeSchemeDetails record {|
    # The name of the issue type scheme. The name must be unique. The maximum length is 255 characters.
    string name;
    # The description of the issue type scheme. The maximum length is 4000 characters.
    string description?;
    # The ID of the default issue type of the issue type scheme. This ID must be included in `issueTypeIds`.
    string defaultIssueTypeId?;
    # The list of issue types IDs of the issue type scheme. At least one standard issue type ID is required.
    string[] issueTypeIds;
|};

# Represents the Queries record for the operation: getDynamicWebhooksForApp
public type GetDynamicWebhooksForAppQueries record {
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 100;
    # The index of the first item to return in a page of results (page offset).
    int startAt = 0;
};

# Represents the Queries record for the operation: getWorkflowTransitionProperties
public type GetWorkflowTransitionPropertiesQueries record {
    # The workflow status. Set to *live* for active and inactive workflows, or *draft* for draft workflows.
    "live"|"draft" workflowMode = "live";
    # The name of the workflow that the transition belongs to.
    string workflowName;
    # Some properties with keys that have the *jira.* prefix are reserved, which means they are not editable. To include these properties in the results, set this parameter to *true*.
    boolean includeReservedKeys = false;
    # The key of the property being returned, also known as the name of the property. If this parameter is not specified, all properties on the transition are returned.
    string 'key?;
};

# Represents the Queries record for the operation: createProjectAvatar
public type CreateProjectAvatarQueries record {
    # The length of each side of the crop region.
    int:Signed32 size?;
    # The X coordinate of the top-left corner of the crop region.
    int:Signed32 x = 0;
    # The Y coordinate of the top-left corner of the crop region.
    int:Signed32 y = 0;
};

public type CreateUpdateRoleRequestBean record {|
    # The name of the project role. Must be unique. Cannot begin or end with whitespace. The maximum length is 255 characters. Required when creating a project role. Optional when partially updating a project role.
    string name?;
    # A description of the project role. Required when fully updating a project role. Optional when creating or partially updating a project role.
    string description?;
|};

# A parsed JQL query.
public type JqlQuery record {|
    JqlQueryClause 'where?;
    JqlQueryOrderByClause orderBy?;
|};

# Represents the Queries record for the operation: getApplicationProperty
public type GetApplicationPropertyQueries record {
    # The permission level of all items being returned in the list.
    string permissionLevel?;
    # When a `key` isn't provided, this filters the list of results by the application property `key` using a regular expression. For example, using `jira.lf.*` will return all application properties with keys that start with *jira.lf.*.
    string keyFilter?;
    # The key of the application property.
    string 'key?;
};

# Represents the Queries record for the operation: getPermissionSchemeGrant
public type GetPermissionSchemeGrantQueries record {
    # Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are always included when you specify any value. Expand options include:
    #
    #  *  `all` Returns all expandable information.
    #  *  `field` Returns information about the custom field granted the permission.
    #  *  `group` Returns information about the group that is granted the permission.
    #  *  `permissions` Returns all permission grants for each permission scheme.
    #  *  `projectRole` Returns information about the project role granted the permission.
    #  *  `user` Returns information about the user who is granted the permission.
    string expand?;
};

public type DeleteAndReplaceVersionBean record {|
    # The ID of the version to update `fixVersion` to when the field contains the deleted version.
    int moveFixIssuesTo?;
    # The ID of the version to update `affectedVersion` to when the field contains the deleted version.
    int moveAffectedIssuesTo?;
    # An array of custom field IDs (`customFieldId`) and version IDs (`moveTo`) to update when the fields contain the deleted version.
    CustomFieldReplacement[] customFieldReplacementList?;
|};

# A change item.
public type ChangeDetails record {|
    # The name of the field changed.
    string 'field?;
    # The type of the field changed.
    string fieldtype?;
    # The ID of the field changed.
    string fieldId?;
    # The details of the original value.
    string 'from?;
    # The details of the original value as a string.
    string fromString?;
    # The details of the new value.
    string to?;
    # The details of the new value as a string.
    string toString?;
|};

# Represents the Queries record for the operation: deleteVersion
public type DeleteVersionQueries record {
    # The ID of the version to update `affectedVersion` to when the field contains the deleted version. The replacement version must be in the same project as the version being deleted and cannot be the version being deleted.
    string moveAffectedIssuesTo?;
    # The ID of the version to update `fixVersion` to when the field contains the deleted version. The replacement version must be in the same project as the version being deleted and cannot be the version being deleted.
    string moveFixIssuesTo?;
};

# Represents the Queries record for the operation: getScreenSchemes
public type GetScreenSchemesQueries record {
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 25;
    # The list of screen scheme IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`.
    int[] id?;
    # The index of the first item to return in a page of results (page offset).
    int startAt = 0;
};

# An element of the order-by JQL clause.
public type JqlQueryOrderByClauseElement record {|
    JqlQueryField 'field;
    # The direction in which to order the results.
    "asc"|"desc" direction?;
|};

# List of system avatars.
public type SystemAvatars record {|
    # A list of avatar details.
    Avatar[] system?;
|};

# Represents the Queries record for the operation: updatePermissionScheme
public type UpdatePermissionSchemeQueries record {
    # Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are always included when you specify any value. Expand options include:
    #
    #  *  `all` Returns all expandable information.
    #  *  `field` Returns information about the custom field granted the permission.
    #  *  `group` Returns information about the group that is granted the permission.
    #  *  `permissions` Returns all permission grants for each permission scheme.
    #  *  `projectRole` Returns information about the project role granted the permission.
    #  *  `user` Returns information about the user who is granted the permission.
    string expand?;
};

# The details of votes on an issue.
public type Votes record {|
    # The URL of these issue vote details.
    string self?;
    # The number of votes on the issue.
    int votes?;
    # Whether the user making this request has voted on the issue.
    boolean hasVoted?;
    # List of the users who have voted on this issue. An empty list is returned when the calling user doesn't have the *View voters and watchers* project permission.
    User[] voters?;
|};

# Details of the options to update for a custom field.
public type BulkCustomFieldOptionUpdateRequest record {|
    # Details of the options to update.
    CustomFieldOptionUpdate[] options?;
|};

# A list of issue type screen scheme mappings.
public type IssueTypeScreenSchemeMappingDetails record {|
    # The list of issue type to screen scheme mappings. A *default* entry cannot be specified because a default entry is added when an issue type screen scheme is created.
    IssueTypeScreenSchemeMapping[] issueTypeMappings;
|};

# Represents the Queries record for the operation: getAllScreenTabFields
public type GetAllScreenTabFieldsQueries record {
    # The key of the project.
    string projectKey?;
};

# A context.
public type Context record {|
    # The ID of the context.
    int id?;
    # The name of the context.
    string name?;
    # The scope of the context.
    Scope scope?;
|};

# Represents the Queries record for the operation: getUsersFromGroup
public type GetUsersFromGroupQueries record {
    # Include inactive users.
    boolean includeInactiveUsers = false;
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 50;
    # The name of the group.
    string groupname;
    # The index of the first item to return in a page of results (page offset).
    int startAt = 0;
};

# A page of items.
public type PageBeanFieldConfigurationIssueTypeItem record {|
    # The URL of the page.
    string self?;
    # If there is another page of results, the URL of the next page.
    string nextPage?;
    # The maximum number of items that could be returned.
    int:Signed32 maxResults?;
    # The index of the first item returned.
    int startAt?;
    # The number of items returned.
    int total?;
    # Whether this is the last page.
    boolean isLast?;
    # The list of items.
    FieldConfigurationIssueTypeItem[] values?;
|};

# A page of items.
public type PageBeanCustomFieldContextProjectMapping record {|
    # The URL of the page.
    string self?;
    # If there is another page of results, the URL of the next page.
    string nextPage?;
    # The maximum number of items that could be returned.
    int:Signed32 maxResults?;
    # The index of the first item returned.
    int startAt?;
    # The number of items returned.
    int total?;
    # Whether this is the last page.
    boolean isLast?;
    # The list of items.
    CustomFieldContextProjectMapping[] values?;
|};

public type IssueBean record {|
    # Expand options that include additional issue details in the response.
    string expand?;
    # The ID of the issue.
    string id?;
    # The URL of the issue details.
    string self?;
    # The key of the issue.
    string 'key?;
    # The rendered value of each field present on the issue.
    record {} renderedFields?;
    # Details of the issue properties identified in the request.
    record {} properties?;
    # The ID and name of each field present on the issue.
    record {|string...;|} names?;
    # The schema describing each field present on the issue.
    record {|JsonTypeBean...;|} schema?;
    # The transitions that can be performed on the issue.
    IssueTransition[] transitions?;
    # The operations that can be performed on the issue.
    Operations operations?;
    # The metadata for the fields on the issue that can be amended.
    IssueUpdateMetadata editmeta?;
    # Details of changelogs associated with the issue.
    PageOfChangelogs changelog?;
    # The versions of each field on the issue.
    record {|record {}...;|} versionedRepresentations?;
    IncludedFields fieldsToInclude?;
    record {} fields?;
|};

# Represents the Queries record for the operation: getAllLabels
public type GetAllLabelsQueries record {
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 1000;
    # The index of the first item to return in a page of results (page offset).
    int startAt = 0;
};

# The screen scheme for an issue type.
public type IssueTypeScreenSchemeItem record {|
    # The ID of the issue type screen scheme.
    string issueTypeScreenSchemeId;
    # The ID of the issue type or *default*. Only issue types used in classic projects are accepted. When creating an issue screen scheme, an entry for *default* must be provided and defines the mapping for all issue types without a screen scheme. Otherwise, a *default* entry can't be provided.
    string issueTypeId;
    # The ID of the screen scheme.
    string screenSchemeId;
|};

public type AddGroupBean record {
    # The name of the group.
    string name;
};

# Represents the Queries record for the operation: deleteIssue
public type DeleteIssueQueries record {
    # Whether the issue's subtasks are deleted when the issue is deleted.
    "true"|"false" deleteSubtasks = "false";
};

# Details of a user, group, field, or project role that holds a permission. See [Holder object](../api-group-permission-schemes/#holder-object) in *Get all permission schemes* for more information.
public type PermissionHolder record {|
    # The type of permission holder.
    string 'type;
    # The identifier of permission holder.
    string 'parameter?;
    # Expand options that include additional permission holder details in the response.
    string expand?;
|};

# A JQL query clause.
public type JqlQueryClause CompoundClause|FieldValueClause|FieldWasClause|FieldChangedClause;

# Represents the Queries record for the operation: getComments
public type GetCommentsQueries record {
    # Use [expand](#expansion) to include additional information about comments in the response. This parameter accepts `renderedBody`, which returns the comment body rendered in HTML.
    string expand?;
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 50;
    # [Order](#ordering) the results by a field. Accepts *created* to sort comments by their created date.
    "created"|"-created"|"+created" orderBy?;
    # The index of the first item to return in a page of results (page offset).
    int startAt = 0;
};

# Details about an issue type.
public type IssueTypeDetails record {|
    # The URL of these issue type details.
    string self?;
    # The ID of the issue type.
    string id?;
    # The description of the issue type.
    string description?;
    # The URL of the issue type's avatar.
    string iconUrl?;
    # The name of the issue type.
    string name?;
    # Whether this issue type is used to create subtasks.
    boolean subtask?;
    # The ID of the issue type's avatar.
    int avatarId?;
    # Unique ID for next-gen projects.
    string entityId?;
    # Hierarchy level of the issue type.
    int:Signed32 hierarchyLevel?;
    # Details of the next-gen projects the issue type is available in.
    Scope scope?;
|};

# A list of issues suggested for use in auto-completion.
public type IssuePickerSuggestions record {|
    # A list of issues for an issue type suggested for use in auto-completion.
    IssuePickerSuggestionsIssueType[] sections?;
|};

# The JQL specifying the issues available in the evaluated Jira expression under the `issues` context variable. Not all issues returned by the JQL query are loaded, only those described by the `startAt` and `maxResults` properties. To determine whether it is necessary to iterate to ensure all the issues returned by the JQL query are evaluated, inspect `meta.issues.jql.count` in the response.
public type JexpJqlIssues record {|
    # The JQL query.
    string query?;
    # The index of the first issue to return from the JQL query.
    int startAt?;
    # The maximum number of issues to return from the JQL query. Inspect `meta.issues.jql.maxResults` in the response to ensure the maximum value has not been exceeded.
    int:Signed32 maxResults?;
    # Determines how to validate the JQL query and treat the validation results.
    "strict"|"warn"|"none" validation = "strict";
|};

# Represents the Queries record for the operation: getScreens
public type GetScreensQueries record {
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 100;
    # The list of screen IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`.
    int[] id?;
    # The index of the first item to return in a page of results (page offset).
    int startAt = 0;
};

# A webhook.
public type Webhook record {|
    # The ID of the webhook.
    int id;
    # The JQL filter that specifies which issues the webhook is sent for.
    string jqlFilter;
    # The Jira events that trigger the webhook.
    ("jira:issue_created"|"jira:issue_updated"|"jira:issue_deleted"|"comment_created"|"comment_updated"|"comment_deleted"|"issue_property_set"|"issue_property_deleted")[] events;
    int expirationDate;
|};

# The wrapper for the issue creation metadata for a list of projects.
public type IssueCreateMetadata record {|
    # Expand options that include additional project details in the response.
    string expand?;
    # List of projects and their issue creation metadata.
    ProjectIssueCreateMetadata[] projects?;
|};

# Details of a permission and its availability to a user.
public type UserPermission record {
    # The ID of the permission. Either `id` or `key` must be specified. Use [Get all permissions](#api-rest-api-2-permissions-get) to get the list of permissions.
    string id?;
    # The key of the permission. Either `id` or `key` must be specified. Use [Get all permissions](#api-rest-api-2-permissions-get) to get the list of permissions.
    string 'key?;
    # The name of the permission.
    string name?;
    # The type of the permission.
    "GLOBAL"|"PROJECT" 'type?;
    # The description of the permission.
    string description?;
    # Whether the permission is available to the user in the queried context.
    boolean havePermission?;
    # Indicate whether the permission key is deprecated. Note that deprecated keys cannot be used in the `permissions parameter of Get my permissions. Deprecated keys are not returned by Get all permissions.`
    boolean deprecatedKey?;
};

public type MoveFieldBean record {|
    # The ID of the screen tab field after which to place the moved screen tab field. Required if `position` isn't provided.
    string after?;
    # The named position to which the screen tab field should be moved. Required if `after` isn't provided.
    "Earlier"|"Later"|"First"|"Last" position?;
|};

# Details about a group name.
public type GroupName record {|
    # The name of group.
    string name?;
    # The URL for these group details.
    string self?;
|};

# Represents the Queries record for the operation: findUsersWithAllPermissions
public type FindUsersWithAllPermissionsQueries record {
    # A query string that is matched exactly against user `accountId`. Required, unless `query` is specified.
    @constraint:String {maxLength: 128}
    string accountId?;
    # The project key for the project (case sensitive).
    string projectKey?;
    # The issue key for the issue.
    string issueKey?;
    # A comma separated list of permissions. Permissions can be specified as any:
    #
    #  *  permission returned by [Get all permissions](#api-rest-api-2-permissions-get).
    #  *  custom project permission added by Connect apps.
    #  *  (deprecated) one of the following:
    #
    #      *  ASSIGNABLE\_USER
    #      *  ASSIGN\_ISSUE
    #      *  ATTACHMENT\_DELETE\_ALL
    #      *  ATTACHMENT\_DELETE\_OWN
    #      *  BROWSE
    #      *  CLOSE\_ISSUE
    #      *  COMMENT\_DELETE\_ALL
    #      *  COMMENT\_DELETE\_OWN
    #      *  COMMENT\_EDIT\_ALL
    #      *  COMMENT\_EDIT\_OWN
    #      *  COMMENT\_ISSUE
    #      *  CREATE\_ATTACHMENT
    #      *  CREATE\_ISSUE
    #      *  DELETE\_ISSUE
    #      *  EDIT\_ISSUE
    #      *  LINK\_ISSUE
    #      *  MANAGE\_WATCHER\_LIST
    #      *  MODIFY\_REPORTER
    #      *  MOVE\_ISSUE
    #      *  PROJECT\_ADMIN
    #      *  RESOLVE\_ISSUE
    #      *  SCHEDULE\_ISSUE
    #      *  SET\_ISSUE\_SECURITY
    #      *  TRANSITION\_ISSUE
    #      *  VIEW\_VERSION\_CONTROL
    #      *  VIEW\_VOTERS\_AND\_WATCHERS
    #      *  VIEW\_WORKFLOW\_READONLY
    #      *  WORKLOG\_DELETE\_ALL
    #      *  WORKLOG\_DELETE\_OWN
    #      *  WORKLOG\_EDIT\_ALL
    #      *  WORKLOG\_EDIT\_OWN
    #      *  WORK\_ISSUE
    string permissions;
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 50;
    # A query string that is matched against user attributes, such as `displayName` and `emailAddress`, to find relevant users. The string can match the prefix of the attribute's value. For example, *query=john* matches a user with a `displayName` of *John Smith* and a user with an `emailAddress` of *johnson@example.com*. Required, unless `accountId` is specified.
    string query?;
    # The index of the first item to return in a page of results (page offset).
    int:Signed32 startAt = 0;
    # This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
    string username?;
};

# The metadata describing an issue field.
public type FieldMetadata record {|
    # Whether the field is required.
    boolean required;
    # The data type of the field.
    JsonTypeBean schema;
    # The name of the field.
    string name;
    # The key of the field.
    string 'key;
    # The URL that can be used to automatically complete the field.
    string autoCompleteUrl?;
    # Whether the field has a default value.
    boolean hasDefaultValue?;
    # The list of operations that can be performed on the field.
    string[] operations;
    # The list of values allowed in the field.
    anydata[] allowedValues?;
    # The default value of the field.
    anydata defaultValue?;
|};

# Details of an issue update request.
public type IssueUpdateDetails record {
    # Details of a transition. Required when performing a transition, optional when creating or editing an issue.
    IssueTransition transition?;
    # List of issue screen fields to update, specifying the sub-field to update and its value for each field. This field provides a straightforward option when setting a sub-field. When multiple sub-fields or other operations are required, use `update`. Fields included in here cannot be included in `update`.
    record {} fields?;
    # List of operations to perform on issue screen fields. Note that fields included in here cannot be included in `fields`.
    record {|FieldUpdateOperation[]...;|} update?;
    # Additional issue history details.
    HistoryMetadata historyMetadata?;
    # Details of issue properties to be add or update.
    EntityProperty[] properties?;
};

# An ordered list of custom field option IDs and information on where to move them.
public type OrderOfCustomFieldOptions record {|
    # A list of IDs of custom field options to move. The order of the custom field option IDs in the list is the order they are given after the move. The list must contain custom field options or cascading options, but not both.
    string[] customFieldOptionIds;
    # The ID of the custom field option or cascading option to place the moved options after. Required if `position` isn't provided.
    string after?;
    # The position the custom field options should be moved to. Required if `after` isn't provided.
    "First"|"Last" position?;
|};

# Details of a dashboard.
public type Dashboard record {|
    string description?;
    # The ID of the dashboard.
    string id?;
    # Whether the dashboard is selected as a favorite by the user.
    boolean isFavourite?;
    # The name of the dashboard.
    string name?;
    # The owner of the dashboard.
    UserBean owner?;
    # The number of users who have this dashboard as a favorite.
    int popularity?;
    # The rank of this dashboard.
    int:Signed32 rank?;
    # The URL of these dashboard details.
    string self?;
    # The details of any share permissions for the dashboard.
    SharePermission[] sharePermissions?;
    # The URL of the dashboard.
    string view?;
|};

# A list of issue link type beans.
public type IssueLinkTypes record {|
    # The issue link type bean.
    IssueLinkType[] issueLinkTypes?;
|};

# Represents the Queries record for the operation: getIssueTypeSchemesMapping
public type GetIssueTypeSchemesMappingQueries record {
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 50;
    # The list of issue type scheme IDs. To include multiple IDs, provide an ampersand-separated list. For example, `issueTypeSchemeId=10000&issueTypeSchemeId=10001`.
    int[] issueTypeSchemeId?;
    # The index of the first item to return in a page of results (page offset).
    int startAt = 0;
};

# Represents the Queries record for the operation: updateFilter
public type UpdateFilterQueries record {
    # Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:
    #
    #  *  `sharedUsers` Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don't specify `sharedUsers`, then the `sharedUsers` object is returned but it doesn't list any users. The list of users returned is limited to 1000, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 1000 users, use `?expand=sharedUsers[1001:2000]`.
    #  *  `subscriptions` Returns the users that are subscribed to the filter. If you don't specify `subscriptions`, the `subscriptions` object is returned but it doesn't list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append `[start-index:end-index]` to the expand request. For example, to access the next 1000 subscriptions, use `?expand=subscriptions[1001:2000]`.
    string expand?;
};

# List of security schemes.
public type SecuritySchemes record {|
    # List of security schemes.
    SecurityScheme[] issueSecuritySchemes?;
|};

# The result of a JQL search.
public type SearchResults record {|
    # Expand options that include additional search result details in the response.
    string expand?;
    # The index of the first item returned on the page.
    int:Signed32 startAt?;
    # The maximum number of results that could be on the page.
    int:Signed32 maxResults?;
    # The number of results on the page.
    int:Signed32 total?;
    # The list of issues found by the search.
    IssueBean[] issues?;
    # Any warnings related to the JQL query.
    string[] warningMessages?;
    # The ID and name of each field in the search results.
    record {|string...;|} names?;
    # The schema describing the field types in the search results.
    record {|JsonTypeBean...;|} schema?;
|};

# Represents the Queries record for the operation: setFavouriteForFilter
public type SetFavouriteForFilterQueries record {
    # Use [expand](#expansion) to include additional information about filter in the response. This parameter accepts a comma-separated list. Expand options include:
    #
    #  *  `sharedUsers` Returns the users that the filter is shared with. This includes users that can browse projects that the filter is shared with. If you don't specify `sharedUsers`, then the `sharedUsers` object is returned but it doesn't list any users. The list of users returned is limited to 1000, to access additional users append `[start-index:end-index]` to the expand request. For example, to access the next 1000 users, use `?expand=sharedUsers[1001:2000]`.
    #  *  `subscriptions` Returns the users that are subscribed to the filter. If you don't specify `subscriptions`, the `subscriptions` object is returned but it doesn't list any subscriptions. The list of subscriptions returned is limited to 1000, to access additional subscriptions append `[start-index:end-index]` to the expand request. For example, to access the next 1000 subscriptions, use `?expand=subscriptions[1001:2000]`.
    string expand?;
};

# Mapping of an issue type to a context.
public type IssueTypeToContextMapping record {|
    # The ID of the context.
    string contextId;
    # The ID of the issue type.
    string issueTypeId?;
    # Whether the context is mapped to any issue type.
    boolean isAnyIssueType?;
|};

# The results from a JQL query.
public type AutoCompleteSuggestions record {|
    # The list of suggested item.
    AutoCompleteSuggestion[] results?;
|};

public type ActorsMap record {|
    # The user account ID of the user to add.
    string[] user?;
    # The name of the group to add.
    string[] group?;
|};

# A time predicate for a temporal JQL clause.
public type JqlQueryClauseTimePredicate record {
    # The operator between the field and the operand.
    "before"|"after"|"from"|"to"|"on"|"during"|"by" operator;
    JqlQueryClauseOperand operand;
};

# Details about a workflow scheme.
public type WorkflowScheme record {|
    # The ID of the workflow scheme.
    int id?;
    # The name of the workflow scheme. The name must be unique. The maximum length is 255 characters. Required when creating a workflow scheme.
    string name?;
    # The description of the workflow scheme.
    string description?;
    # The name of the default workflow for the workflow scheme. The default workflow has *All Unassigned Issue Types* assigned to it in Jira. If `defaultWorkflow` is not specified when creating a workflow scheme, it is set to *Jira Workflow (jira)*.
    string defaultWorkflow?;
    # The issue type to workflow mappings, where each mapping is an issue type ID and workflow name pair. Note that an issue type can only be mapped to one workflow in a workflow scheme.
    record {|string...;|} issueTypeMappings?;
    # For draft workflow schemes, this property is the name of the default workflow for the original workflow scheme. The default workflow has *All Unassigned Issue Types* assigned to it in Jira.
    string originalDefaultWorkflow?;
    # For draft workflow schemes, this property is the issue type to workflow mappings for the original workflow scheme, where each mapping is an issue type ID and workflow name pair. Note that an issue type can only be mapped to one workflow in a workflow scheme.
    record {|string...;|} originalIssueTypeMappings?;
    # Whether the workflow scheme is a draft or not.
    boolean draft?;
    # The user that last modified the draft workflow scheme. A modification is a change to the issue type-project mappings only. This property does not apply to non-draft workflows.
    User lastModifiedUser?;
    # The date-time that the draft workflow scheme was last modified. A modification is a change to the issue type-project mappings only. This property does not apply to non-draft workflows.
    string lastModified?;
    string self?;
    # Whether to create or update a draft workflow scheme when updating an active workflow scheme. An active workflow scheme is a workflow scheme that is used by at least one project. The following examples show how this property works:
    #
    #  *  Update an active workflow scheme with `updateDraftIfNeeded` set to `true`: If a draft workflow scheme exists, it is updated. Otherwise, a draft workflow scheme is created.
    #  *  Update an active workflow scheme with `updateDraftIfNeeded` set to `false`: An error is returned, as active workflow schemes cannot be updated.
    #  *  Update an inactive workflow scheme with `updateDraftIfNeeded` set to `true`: The workflow scheme is updated, as inactive workflow schemes do not require drafts to update.
    #
    # Defaults to `false`.
    boolean updateDraftIfNeeded?;
    # The issue types available in Jira.
    record {|IssueTypeDetails...;|} issueTypes?;
|};

# A screen tab.
public type ScreenableTab record {|
    # The ID of the screen tab.
    int id?;
    # The name of the screen tab. The maximum length is 255 characters.
    string name;
|};

# Details of global permissions to look up and project permissions with associated projects and issues to look up.
public type BulkPermissionsRequestBean record {|
    # Project permissions with associated projects and issues to look up.
    BulkProjectPermissions[] projectPermissions?;
    # Global permissions to look up.
    string[] globalPermissions?;
    # The account ID of a user.
    string accountId?;
|};

# Details about permissions.
public type Permissions record {|
    # List of permissions.
    record {|UserPermission...;|} permissions?;
|};

public type SimpleApplicationPropertyBean record {|
    # The ID of the application property.
    string id?;
    # The new value.
    string value?;
|};

# Associated field configuration scheme and project.
public type FieldConfigurationSchemeProjectAssociation record {|
    # The ID of the field configuration scheme. If the field configuration scheme ID is `null`, the operation assigns the default field configuration scheme.
    string fieldConfigurationSchemeId?;
    # The ID of the project.
    string projectId;
|};

# A list of custom field options for a context.
public type CustomFieldCreatedContextOptionsList record {|
    # The created custom field options.
    CustomFieldContextOption[] options?;
|};

# A collection of transition rules.
public type WorkflowRules record {|
    # The workflow conditions.
    WorkflowTransitionRule[] conditions;
    WorkflowConditionBean conditionsTree?;
    # The workflow validators.
    WorkflowTransitionRule[] validators;
    # The workflow post functions.
    WorkflowTransitionRule[] postFunctions;
|};

# Value of a custom field option and the values of its cascading options.
public type CustomFieldOptionValue record {|
    # The value of the custom field option.
    @constraint:String {maxLength: 255}
    string value;
    # The cascading options.
    string[] cascadingOptions?;
|};

# A workflow transition compound condition rule.
public type WorkflowCompoundCondition record {
    # The conditions operator.
    "AND"|"OR" operator;
    # The list of workflow conditions.
    WorkflowConditionBean[] conditions;
    string nodeType;
};

# A paged list. To access additional details append `[start-index:end-index]` to the expand request. For example, `?expand=sharedUsers[10:40]` returns a list starting at item 10 and finishing at item 40.
public type PagedListUserDetailsApplicationUser record {|
    # The number of items on the page.
    int:Signed32 size?;
    # The list of items.
    UserDetails[] items?;
    # The maximum number of results that could be on the page.
    int:Signed32 max\-results?;
    # The index of the first item returned on the page.
    int:Signed32 start\-index?;
    # The index of the last item returned on the page.
    int:Signed32 end\-index?;
|};

# Represents the Queries record for the operation: findUserKeysByQuery
public type FindUserKeysByQueryQueries record {
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 100;
    # The search query.
    string query;
    # The index of the first item to return in a page of results (page offset).
    int startAt = 0;
};

# Represents the Queries record for the operation: findAssignableUsers
public type FindAssignableUsersQueries record {
    # A query string that is matched exactly against user `accountId`. Required, unless `query` is specified.
    @constraint:String {maxLength: 128}
    string accountId?;
    # The key of the issue. Required, unless `project` is specified.
    string issueKey?;
    # The maximum number of items to return. This operation may return less than the maximum number of items even if more are available. The operation fetches users up to the maximum and then, from the fetched users, returns only the users that can be assigned to the issue.
    int:Signed32 maxResults = 50;
    # A query string that is matched against user attributes, such as `displayName`, and `emailAddress`, to find relevant users. The string can match the prefix of the attribute's value. For example, *query=john* matches a user with a `displayName` of *John Smith* and a user with an `emailAddress` of *johnson@example.com*. Required, unless `username` or `accountId` is specified.
    string query?;
    # The project ID or project key (case sensitive). Required, unless `issueKey` is specified.
    string project?;
    boolean recommend = false;
    # The sessionId of this request. SessionId is the same until the assignee is set.
    string sessionId?;
    # The index of the first item to return in a page of results (page offset).
    int:Signed32 startAt = 0;
    # The ID of the transition.
    int:Signed32 actionDescriptorId?;
    # This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
    string username?;
};

# The project and issue type mapping with a matching custom field context.
public type ContextForProjectAndIssueType record {|
    # The ID of the project.
    string projectId;
    # The ID of the issue type.
    string issueTypeId;
    # The ID of the custom field context.
    string contextId;
|};

# Represents the Queries record for the operation: addComment
public type AddCommentQueries record {
    # Use [expand](#expansion) to include additional information about comments in the response. This parameter accepts `renderedBody`, which returns the comment body rendered in HTML.
    string expand?;
};

# The IDs of the screen schemes for the issue type IDs.
public type IssueTypeScreenSchemeMapping record {|
    # The ID of the issue type or *default*. Only issue types used in classic projects are accepted. An entry for *default* must be provided and defines the mapping for all issue types without a screen scheme.
    string issueTypeId;
    # The ID of the screen scheme. Only screen schemes used in classic projects are accepted.
    string screenSchemeId;
|};

# Details about a project type.
public type ProjectType record {|
    # The key of the project type.
    string 'key?;
    # The formatted key of the project type.
    string formattedKey?;
    # The key of the project type's description.
    string descriptionI18nKey?;
    # The icon of the project type.
    string icon?;
    # The color of the project type.
    string color?;
|};

# A page of items.
public type PageBeanIssueTypeScreenScheme record {|
    # The URL of the page.
    string self?;
    # If there is another page of results, the URL of the next page.
    string nextPage?;
    # The maximum number of items that could be returned.
    int:Signed32 maxResults?;
    # The index of the first item returned.
    int startAt?;
    # The number of items returned.
    int total?;
    # Whether this is the last page.
    boolean isLast?;
    # The list of items.
    IssueTypeScreenScheme[] values?;
|};

# Represents the Queries record for the operation: getFailedWebhooks
public type GetFailedWebhooksQueries record {
    # The maximum number of webhooks to return per page. If obeying the maxResults directive would result in records with the same failure time being split across pages, the directive is ignored and all records with the same failure time included on the page.
    int:Signed32 maxResults?;
    # The time after which any webhook failure must have occurred for the record to be returned, expressed as milliseconds since the UNIX epoch.
    int after?;
};

# Lists of JQL reference data.
public type JQLReferenceData record {|
    # List of fields usable in JQL queries.
    FieldReferenceData[] visibleFieldNames?;
    # List of functions usable in JQL queries.
    FunctionReferenceData[] visibleFunctionNames?;
    # List of JQL query reserved words.
    string[] jqlReservedWords?;
|};

# Details of the options to update for a custom field.
public type UpdateCustomFieldOption record {|
    # Details of the options to update.
    RenamedOption[] options?;
|};

# Details of an issue type screen scheme.
public type IssueTypeScreenScheme record {|
    # The ID of the issue type screen scheme.
    string id;
    # The name of the issue type screen scheme.
    string name;
    # The description of the issue type screen scheme.
    string description?;
|};

public type ProjectRoleActorsUpdateBean record {|
    # The ID of the project role. Use [Get all project roles](#api-rest-api-2-role-get) to get a list of project role IDs.
    int id?;
    # The actors to add to the project role. Add groups using `atlassian-group-role-actor` and a list of group names. For example, `"atlassian-group-role-actor":["another","administrators"]}`. Add users using `atlassian-user-role-actor` and a list of account IDs. For example, `"atlassian-user-role-actor":["12345678-9abc-def1-2345-6789abcdef12", "abcdef12-3456-789a-bcde-f123456789ab"]`.
    record {|string[]...;|} categorisedActors?;
|};

# Details of a custom field cascading option to rename.
public type RenamedCascadingOption record {|
    # The value of the cascading option.
    string value;
    # The new value of the cascading option.
    @constraint:String {maxLength: 255}
    string newValue;
|};

# Represents the Queries record for the operation: getCreateIssueMeta
public type GetCreateIssueMetaQueries record {
    # Use [expand](#expansion) to include additional information about issue metadata in the response. This parameter accepts `projects.issuetypes.fields`, which returns information about the fields in the issue creation screen for each issue type. Fields hidden from the screen are not returned. Use the information to populate the `fields` and `update` fields in [Create issue](#api-rest-api-2-issue-post) and [Create issues](#api-rest-api-2-issue-bulk-post).
    string expand?;
    # List of issue type names. This parameter accepts a comma-separated list. Multiple issue type names can also be provided using an ampersand-separated list. For example, `issuetypeNames=name1,name2&issuetypeNames=name3`. This parameter may be provided with `issuetypeIds`.
    string[] issuetypeNames?;
    # List of project IDs. This parameter accepts a comma-separated list. Multiple project IDs can also be provided using an ampersand-separated list. For example, `projectIds=10000,10001&projectIds=10020,10021`. This parameter may be provided with `projectKeys`.
    string[] projectIds?;
    # List of project keys. This parameter accepts a comma-separated list. Multiple project keys can also be provided using an ampersand-separated list. For example, `projectKeys=proj1,proj2&projectKeys=proj3`. This parameter may be provided with `projectIds`.
    string[] projectKeys?;
    # List of issue type IDs. This parameter accepts a comma-separated list. Multiple issue type IDs can also be provided using an ampersand-separated list. For example, `issuetypeIds=10000,10001&issuetypeIds=10020,10021`. This parameter may be provided with `issuetypeNames`.
    string[] issuetypeIds?;
};

# Identifiers for a project.
public type ProjectIdentifiers record {|
    # The URL of the created project.
    string self;
    # The ID of the created project.
    int id;
    # The key of the created project.
    string 'key;
|};

# Details of a screen.
public type ScreenDetails record {|
    # The name of the screen. The name must be unique. The maximum length is 255 characters.
    string name;
    # The description of the screen. The maximum length is 255 characters.
    string description?;
|};

# Details of a remote issue link.
public type RemoteIssueLinkRequest record {
    # An identifier for the remote item in the remote system. For example, the global ID for a remote item in Confluence would consist of the app ID and page ID, like this: `appId=456&pageId=123`.
    #
    # Setting this field enables the remote issue link details to be updated or deleted using remote system and item details as the record identifier, rather than using the record's Jira ID.
    #
    # The maximum length is 255 characters.
    string globalId?;
    # Details of the remote application the linked item is in. For example, trello.
    Application application?;
    # Description of the relationship between the issue and the linked item. If not set, the relationship description "links to" is used in Jira.
    string relationship?;
    # Details of the item linked to.
    RemoteObject 'object;
};

# Represents the Queries record for the operation: getUserPropertyKeys
public type GetUserPropertyKeysQueries record {
    # The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
    @constraint:String {maxLength: 128}
    string accountId?;
    # This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
    string userKey?;
    # This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
    string username?;
};

public type JiraExpressionsComplexityValueBean record {|
    # The complexity value of the current expression.
    int:Signed32 value;
    # The maximum allowed complexity. The evaluation will fail if this value is exceeded.
    int:Signed32 'limit;
|};

# Represents the Queries record for the operation: getProjectContextMapping
public type GetProjectContextMappingQueries record {
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 50;
    # The list of context IDs. To include multiple context, separate IDs with ampersand: `contextId=10000&contextId=10001`.
    int[] contextId?;
    # The index of the first item to return in a page of results (page offset).
    int startAt = 0;
};

# A rule configuration.
public type RuleConfiguration record {|
    # Configuration of the rule, as it is stored by the Connect app on the rule configuration page.
    string value;
|};

# Represents the Queries record for the operation: getFieldConfigurationSchemeProjectMapping
public type GetFieldConfigurationSchemeProjectMappingQueries record {
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 50;
    # The list of project IDs. To include multiple projects, separate IDs with ampersand: `projectId=10000&projectId=10001`.
    int[] projectId;
    # The index of the first item to return in a page of results (page offset).
    int startAt = 0;
};

# Details about syntax and type errors. The error details apply to the entire expression, unless the object includes:
#
#  *  `line` and `column`
#  *  `expression`
public type JiraExpressionValidationError record {|
    # The text line in which the error occurred.
    int:Signed32 line?;
    # The text column in which the error occurred.
    int:Signed32 column?;
    # The part of the expression in which the error occurred.
    string expression?;
    # Details about the error.
    string message;
    # The error type.
    "syntax"|"type"|"other" 'type;
|};

# ID of a registered webhook or error messages explaining why a webhook wasn't registered.
public type RegisteredWebhook record {|
    # The ID of the webhook. Returned if the webhook is created.
    int createdWebhookId?;
    # Error messages specifying why the webhook creation failed.
    string[] errors?;
|};

# Details of functions that can be used in advanced searches.
public type FunctionReferenceData record {|
    # The function identifier.
    string value?;
    # The display name of the function.
    string displayName?;
    # Whether the function can take a list of arguments.
    "true"|"false" isList?;
    # The data types returned by the function.
    string[] types?;
|};

# Details of context to project associations.
public type CustomFieldContextProjectMapping record {|
    # The ID of the context.
    string contextId;
    # The ID of the project.
    string projectId?;
    # Whether context is global.
    boolean isGlobalContext?;
|};

# Represents the Queries record for the operation: getUserEmail
public type GetUserEmailQueries record {
    # The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, `5b10ac8d82e05b22cc7d4ef5`.
    @constraint:String {maxLength: 128}
    string accountId;
};

public type JiraExpressionEvalContextBean record {|
    # The issue that is available under the `issue` variable when evaluating the expression.
    IdOrKeyBean issue?;
    # The collection of issues that is available under the `issues` variable when evaluating the expression.
    JexpIssues issues?;
    # The project that is available under the `project` variable when evaluating the expression.
    IdOrKeyBean project?;
    # The ID of the sprint that is available under the `sprint` variable when evaluating the expression.
    int sprint?;
    # The ID of the board that is available under the `board` variable when evaluating the expression.
    int board?;
    # The ID of the service desk that is available under the `serviceDesk` variable when evaluating the expression.
    int serviceDesk?;
    # The ID of the customer request that is available under the `customerRequest` variable when evaluating the expression. This is the same as the ID of the underlying Jira issue, but the customer request context variable will have a different type.
    int customerRequest?;
|};

# Represents the Queries record for the operation: getCustomFieldContextsForProjectsAndIssueTypes
public type GetCustomFieldContextsForProjectsAndIssueTypesQueries record {
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 50;
    # The index of the first item to return in a page of results (page offset).
    int startAt = 0;
};

# Details of the order-by JQL clause.
public type JqlQueryOrderByClause record {|
    # The list of order-by clause fields and their ordering directives.
    JqlQueryOrderByClauseElement[] fields;
|};

# A page of items.
public type PageBeanString record {|
    # The URL of the page.
    string self?;
    # If there is another page of results, the URL of the next page.
    string nextPage?;
    # The maximum number of items that could be returned.
    int:Signed32 maxResults?;
    # The index of the first item returned.
    int startAt?;
    # The number of items returned.
    int total?;
    # Whether this is the last page.
    boolean isLast?;
    # The list of items.
    string[] values?;
|};

# Details about the replacement for a deleted version.
public type CustomFieldReplacement record {|
    # The ID of the custom field in which to replace the version number.
    int customFieldId?;
    # The version number to use as a replacement for the deleted version.
    int moveTo?;
|};

# Represents the Queries record for the operation: bulkGetUsersMigration
public type BulkGetUsersMigrationQueries record {
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 10;
    # The index of the first item to return in a page of results (page offset).
    int startAt = 0;
    # Key of a user. To specify multiple users, pass multiple copies of this parameter. For example, `key=fred&key=barney`. Required if `username` isn't provided. Cannot be provided if `username` is present.
    string[] 'key?;
    # Username of a user. To specify multiple users, pass multiple copies of this parameter. For example, `username=fred&username=barney`. Required if `key` isn't provided. Cannot be provided if `key` is present.
    string[] username?;
};

# Represents the Queries record for the operation: getProjectVersionsPaginated
public type GetProjectVersionsPaginatedQueries record {
    # Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:
    #
    #  *  `issuesstatus` Returns the number of issues in each status category for each version.
    #  *  `operations` Returns actions that can be performed on the specified version.
    string expand?;
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 50;
    # Filter the results using a literal string. Versions with matching `name` or `description` are returned (case insensitive).
    string query?;
    # [Order](#ordering) the results by a field:
    #
    #  *  `description` Sorts by version description.
    #  *  `name` Sorts by version name.
    #  *  `releaseDate` Sorts by release date, starting with the oldest date. Versions with no release date are listed last.
    #  *  `sequence` Sorts by the order of appearance in the user interface.
    #  *  `startDate` Sorts by start date, starting with the oldest date. Versions with no start date are listed last.
    "description"|"-description"|"+description"|"name"|"-name"|"+name"|"releaseDate"|"-releaseDate"|"+releaseDate"|"sequence"|"-sequence"|"+sequence"|"startDate"|"-startDate"|"+startDate" orderBy?;
    # The index of the first item to return in a page of results (page offset).
    int startAt = 0;
    # A list of status values used to filter the results by version status. This parameter accepts a comma-separated list. The status values are `released`, `unreleased`, and `archived`.
    string status?;
};

# Details of an issue navigator column item.
public type ColumnItem record {|
    # The issue navigator column label.
    string label?;
    # The issue navigator column value.
    string value?;
|};

# A [Connect module](https://developer.atlassian.com/cloud/jira/platform/about-jira-modules/) in the same format as in the
# [app descriptor](https://developer.atlassian.com/cloud/jira/platform/app-descriptor/).
public type ConnectModule record {
};

# A page of items.
public type PageBeanVersion record {|
    # The URL of the page.
    string self?;
    # If there is another page of results, the URL of the next page.
    string nextPage?;
    # The maximum number of items that could be returned.
    int:Signed32 maxResults?;
    # The index of the first item returned.
    int startAt?;
    # The number of items returned.
    int total?;
    # Whether this is the last page.
    boolean isLast?;
    # The list of items.
    Version[] values?;
|};

# Represents the Queries record for the operation: deleteWorkflowSchemeIssueType
public type DeleteWorkflowSchemeIssueTypeQueries record {
    # Set to true to create or update the draft of a workflow scheme and update the mapping in the draft, when the workflow scheme cannot be edited. Defaults to `false`.
    boolean updateDraftIfNeeded?;
};

# Information about the most recent use of a field.
public type FieldLastUsed record {|
    # Last used value type:
    #
    #  *  *TRACKED*: field is tracked and a last used date is available.
    #  *  *NOT\_TRACKED*: field is not tracked, last used date is not available.
    #  *  *NO\_INFORMATION*: field is tracked, but no last used date is available.
    "TRACKED"|"NOT_TRACKED"|"NO_INFORMATION" 'type?;
    # The date when the value of the field last changed.
    string value?;
|};

public type CustomFieldDefinitionJsonBean record {|
    # The name of the custom field, which is displayed in Jira. This is not the unique identifier.
    string name;
    # The description of the custom field, which is displayed in Jira.
    string description?;
    # The type of the custom field. For example, *com.atlassian.jira.plugin.system.customfieldtypes:grouppicker*.
    #
    #  *  `cascadingselect`: Allows multiple values to be selected using two select lists
    #  *  `datepicker`: Stores a date using a picker control
    #  *  `datetime`: Stores a date with a time component
    #  *  `float`: Stores and validates a numeric (floating point) input
    #  *  `grouppicker`: Stores a user group using a picker control
    #  *  `importid`: A read-only field that stores the previous ID of the issue from the system that it was imported from
    #  *  `labels`: Stores labels
    #  *  `multicheckboxes`: Stores multiple values using checkboxes
    #  *  `multigrouppicker`: Stores multiple user groups using a picker control
    #  *  `multiselect`: Stores multiple values using a select list
    #  *  `multiuserpicker`: Stores multiple users using a picker control
    #  *  `multiversion`: Stores multiple versions from the versions available in a project using a picker control
    #  *  `project`: Stores a project from a list of projects that the user is permitted to view
    #  *  `radiobuttons`: Stores a value using radio buttons
    #  *  `readonlyfield`: Stores a read-only text value, which can only be populated via the API
    #  *  `select`: Stores a value from a configurable list of options
    #  *  `textarea`: Stores a long text string using a multiline text area
    #  *  `textfield`: Stores a text string using a single-line text box
    #  *  `url`: Stores a URL
    #  *  `userpicker`: Stores a user using a picker control
    #  *  `version`: Stores a version using a picker control
    "com.atlassian.jira.plugin.system.customfieldtypes:cascadingselect"|"com.atlassian.jira.plugin.system.customfieldtypes:datepicker"|"com.atlassian.jira.plugin.system.customfieldtypes:datetime"|"com.atlassian.jira.plugin.system.customfieldtypes:float"|"com.atlassian.jira.plugin.system.customfieldtypes:grouppicker"|"com.atlassian.jira.plugin.system.customfieldtypes:importid"|"com.atlassian.jira.plugin.system.customfieldtypes:labels"|"com.atlassian.jira.plugin.system.customfieldtypes:multicheckboxes"|"com.atlassian.jira.plugin.system.customfieldtypes:multigrouppicker"|"com.atlassian.jira.plugin.system.customfieldtypes:multiselect"|"com.atlassian.jira.plugin.system.customfieldtypes:multiuserpicker"|"com.atlassian.jira.plugin.system.customfieldtypes:multiversion"|"com.atlassian.jira.plugin.system.customfieldtypes:project"|"com.atlassian.jira.plugin.system.customfieldtypes:radiobuttons"|"com.atlassian.jira.plugin.system.customfieldtypes:readonlyfield"|"com.atlassian.jira.plugin.system.customfieldtypes:select"|"com.atlassian.jira.plugin.system.customfieldtypes:textarea"|"com.atlassian.jira.plugin.system.customfieldtypes:textfield"|"com.atlassian.jira.plugin.system.customfieldtypes:url"|"com.atlassian.jira.plugin.system.customfieldtypes:userpicker"|"com.atlassian.jira.plugin.system.customfieldtypes:version" 'type;
    # The searcher defines the way the field is searched in Jira. For example, *com.atlassian.jira.plugin.system.customfieldtypes:grouppickersearcher*.
    # The search UI (basic search and JQL search) will display different operations and values for the field, based on the field searcher. You must specify a searcher that is valid for the field type, as listed below (abbreviated values shown):
    #
    #  *  `cascadingselect`: `cascadingselectsearcher`
    #  *  `datepicker`: `daterange`
    #  *  `datetime`: `datetimerange`
    #  *  `float`: `exactnumber` or `numberrange`
    #  *  `grouppicker`: `grouppickersearcher`
    #  *  `importid`: `exactnumber` or `numberrange`
    #  *  `labels`: `labelsearcher`
    #  *  `multicheckboxes`: `multiselectsearcher`
    #  *  `multigrouppicker`: `multiselectsearcher`
    #  *  `multiselect`: `multiselectsearcher`
    #  *  `multiuserpicker`: `userpickergroupsearcher`
    #  *  `multiversion`: `versionsearcher`
    #  *  `project`: `projectsearcher`
    #  *  `radiobuttons`: `multiselectsearcher`
    #  *  `readonlyfield`: `textsearcher`
    #  *  `select`: `multiselectsearcher`
    #  *  `textarea`: `textsearcher`
    #  *  `textfield`: `textsearcher`
    #  *  `url`: `exacttextsearcher`
    #  *  `userpicker`: `userpickergroupsearcher`
    #  *  `version`: `versionsearcher`
    "com.atlassian.jira.plugin.system.customfieldtypes:cascadingselectsearcher"|"com.atlassian.jira.plugin.system.customfieldtypes:daterange"|"com.atlassian.jira.plugin.system.customfieldtypes:datetimerange"|"com.atlassian.jira.plugin.system.customfieldtypes:exactnumber"|"com.atlassian.jira.plugin.system.customfieldtypes:exacttextsearcher"|"com.atlassian.jira.plugin.system.customfieldtypes:grouppickersearcher"|"com.atlassian.jira.plugin.system.customfieldtypes:labelsearcher"|"com.atlassian.jira.plugin.system.customfieldtypes:multiselectsearcher"|"com.atlassian.jira.plugin.system.customfieldtypes:numberrange"|"com.atlassian.jira.plugin.system.customfieldtypes:projectsearcher"|"com.atlassian.jira.plugin.system.customfieldtypes:textsearcher"|"com.atlassian.jira.plugin.system.customfieldtypes:userpickergroupsearcher"|"com.atlassian.jira.plugin.system.customfieldtypes:versionsearcher" searcherKey?;
|};

# A page of items.
public type PageBeanUserKey record {|
    # The URL of the page.
    string self?;
    # If there is another page of results, the URL of the next page.
    string nextPage?;
    # The maximum number of items that could be returned.
    int:Signed32 maxResults?;
    # The index of the first item returned.
    int startAt?;
    # The number of items returned.
    int total?;
    # Whether this is the last page.
    boolean isLast?;
    # The list of items.
    UserKey[] values?;
|};

# A page of items.
public type PageBeanScreenScheme record {|
    # The URL of the page.
    string self?;
    # If there is another page of results, the URL of the next page.
    string nextPage?;
    # The maximum number of items that could be returned.
    int:Signed32 maxResults?;
    # The index of the first item returned.
    int startAt?;
    # The number of items returned.
    int total?;
    # Whether this is the last page.
    boolean isLast?;
    # The list of items.
    ScreenScheme[] values?;
|};

# The projects the item is associated with. Indicated for items associated with [next-gen projects](https://confluence.atlassian.com/x/loMyO).
public type Scope record {
    # The type of scope.
    "PROJECT"|"TEMPLATE" 'type?;
    # The project the item has scope in.
    ProjectForScope project?;
};

# Represents the Queries record for the operation: getIssueTypeScreenSchemes
public type GetIssueTypeScreenSchemesQueries record {
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 50;
    # The list of issue type screen scheme IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`.
    int[] id?;
    # The index of the first item to return in a page of results (page offset).
    int startAt = 0;
};

# Details about a permission granted to a user or group.
public type PermissionGrant record {|
    # The ID of the permission granted details.
    int id?;
    # The URL of the permission granted details.
    string self?;
    # The user or group being granted the permission. It consists of a `type` and a type-dependent `parameter`. See [Holder object](../api-group-permission-schemes/#holder-object) in *Get all permission schemes* for more information.
    PermissionHolder holder?;
    # The permission to grant. This permission can be one of the built-in permissions or a custom permission added by an app. See [Built-in permissions](../api-group-permission-schemes/#built-in-permissions) in *Get all permission schemes* for more information about the built-in permissions. See the [project permission](https://developer.atlassian.com/cloud/jira/platform/modules/project-permission/) and [global permission](https://developer.atlassian.com/cloud/jira/platform/modules/global-permission/) module documentation for more information about custom permissions.
    string permission?;
|};

# Details about a filter.
public type Filter record {|
    # The URL of the filter.
    string self?;
    # The unique identifier for the filter.
    string id?;
    # The name of the filter. Must be unique.
    string name;
    # A description of the filter.
    string description?;
    # The user who owns the filter. This is defaulted to the creator of the filter, however Jira administrators can change the owner of a shared filter in the admin settings.
    User owner?;
    # The JQL query for the filter. For example, *project = SSP AND issuetype = Bug*.
    string jql?;
    # A URL to view the filter results in Jira, using the ID of the filter. For example, *https://your-domain.atlassian.net/issues/?filter=10100*.
    string viewUrl?;
    # A URL to view the filter results in Jira, using the [Search for issues using JQL](#api-rest-api-2-filter-search-get) operation with the filter's JQL string to return the filter results. For example, *https://your-domain.atlassian.net/rest/api/2/search?jql=project+%3D+SSP+AND+issuetype+%3D+Bug*.
    string searchUrl?;
    # Whether the filter is selected as a favorite.
    boolean favourite?;
    # The count of how many users have selected this filter as a favorite, including the filter owner.
    int favouritedCount?;
    # The groups and projects that the filter is shared with.
    SharePermission[] sharePermissions?;
    # A paginated list of the users that the filter is shared with. This includes users that are members of the groups or can browse the projects that the filter is shared with.
    UserList sharedUsers?;
    # A paginated list of the users that are subscribed to the filter.
    FilterSubscriptionsList subscriptions?;
|};

# Default value for a single select custom field.
public type CustomFieldContextDefaultValueSingleOption record {
    # The ID of the context.
    string contextId;
    # The ID of the default option.
    string optionId;
    string 'type;
};

# Represents the Queries record for the operation: findUsersByQuery
public type FindUsersByQueryQueries record {
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 100;
    # The search query.
    string query;
    # The index of the first item to return in a page of results (page offset).
    int startAt = 0;
};

# Represents the Queries record for the operation: createWorkflowTransitionProperty
public type CreateWorkflowTransitionPropertyQueries record {
    # The workflow status. Set to *live* for inactive workflows or *draft* for draft workflows. Active workflows cannot be edited.
    "live"|"draft" workflowMode = "live";
    # The name of the workflow that the transition belongs to.
    string workflowName;
    # The key of the property being added, also known as the name of the property. Set this to the same value as the `key` defined in the request body.
    string 'key;
};

# The list of issue type IDs.
public type IssueTypeIds record {|
    # The list of issue type IDs.
    string[] issueTypeIds;
|};

# Represents the Queries record for the operation: getAssignedPermissionScheme
public type GetAssignedPermissionSchemeQueries record {
    # Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are included when you specify any value. Expand options include:
    #
    #  *  `all` Returns all expandable information.
    #  *  `field` Returns information about the custom field granted the permission.
    #  *  `group` Returns information about the group that is granted the permission.
    #  *  `permissions` Returns all permission grants for each permission scheme.
    #  *  `projectRole` Returns information about the project role granted the permission.
    #  *  `user` Returns information about the user who is granted the permission.
    string expand?;
};

# Represents the Queries record for the operation: createIssue
public type CreateIssueQueries record {
    # Whether the project in which the issue is created is added to the user's **Recently viewed** project list, as shown under **Projects** in Jira. When provided, the issue type and request type are added to the user's history for a project. These values are then used to provide defaults on the issue create screen.
    boolean updateHistory = false;
};

# A page of items.
public type PageBeanWorkflowTransitionRules record {|
    # The URL of the page.
    string self?;
    # If there is another page of results, the URL of the next page.
    string nextPage?;
    # The maximum number of items that could be returned.
    int:Signed32 maxResults?;
    # The index of the first item returned.
    int startAt?;
    # The number of items returned.
    int total?;
    # Whether this is the last page.
    boolean isLast?;
    # The list of items.
    WorkflowTransitionRules[] values?;
|};

# A workflow transition condition rule.
public type WorkflowSimpleCondition record {
    # The type of the transition rule.
    string 'type;
    # The configuration of the transition rule. This is currently returned only for some of the rule types. Availability of this property is subject to change.
    record {} configuration?;
    string nodeType;
};

# A page of items.
public type PageBeanWorkflow record {|
    # The URL of the page.
    string self?;
    # If there is another page of results, the URL of the next page.
    string nextPage?;
    # The maximum number of items that could be returned.
    int:Signed32 maxResults?;
    # The index of the first item returned.
    int startAt?;
    # The number of items returned.
    int total?;
    # Whether this is the last page.
    boolean isLast?;
    # The list of items.
    Workflow[] values?;
|};

# Represents the Queries record for the operation: getCommentsByIds
public type GetCommentsByIdsQueries record {
    # Use [expand](#expansion) to include additional information about comments in the response. This parameter accepts a comma-separated list. Expand options include:
    #
    #  *  `renderedBody` Returns the comment body rendered in HTML.
    #  *  `properties` Returns the comment's properties.
    string expand?;
};

# Represents the Queries record for the operation: setPreference
public type SetPreferenceQueries record {
    # The key of the preference. The maximum length is 255 characters.
    string 'key;
};

# Count of issues assigned to a component.
public type ComponentIssuesCount record {|
    # The URL for this count of issues for a component.
    string self?;
    # The count of issues assigned to a component.
    int issueCount?;
|};

# Represents the Queries record for the operation: searchProjects
public type SearchProjectsQueries record {
    # Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expanded options include:
    #
    #  *  `description` Returns the project description.
    #  *  `projectKeys` Returns all project keys associated with a project.
    #  *  `lead` Returns information about the project lead.
    #  *  `issueTypes` Returns all issue types associated with the project.
    #  *  `url` Returns the URL associated with the project.
    #  *  `insight` EXPERIMENTAL. Returns the insight details of total issue count and last issue update time for the project.
    string expand?;
    # Orders results by the [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes). This parameter accepts a comma-separated list. Valid values are `business`, `service_desk`, and `software`.
    string typeKey?;
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 50;
    # Filter the results using a literal string. Projects with a matching `key` or `name` are returned (case insensitive).
    string query?;
    # [Order](#ordering) the results by a field.
    #
    #  *  `category` Sorts by project category. A complete list of category IDs is found using [Get all project categories](#api-rest-api-2-projectCategory-get).
    #  *  `issueCount` Sorts by the total number of issues in each project.
    #  *  `key` Sorts by project key.
    #  *  `lastIssueUpdatedTime` Sorts by the last issue update time.
    #  *  `name` Sorts by project name.
    #  *  `owner` Sorts by project lead.
    #  *  `archivedDate` EXPERIMENTAL. Sorts by project archived date.
    #  *  `deletedDate` EXPERIMENTAL. Sorts by project deleted date.
    "category"|"-category"|"+category"|"key"|"-key"|"+key"|"name"|"-name"|"+name"|"owner"|"-owner"|"+owner"|"issueCount"|"-issueCount"|"+issueCount"|"lastIssueUpdatedDate"|"-lastIssueUpdatedDate"|"+lastIssueUpdatedDate"|"archivedDate"|"+archivedDate"|"-archivedDate"|"deletedDate"|"+deletedDate"|"-deletedDate" orderBy = "key";
    # Filter results by projects for which the user can:
    #
    #  *  `view` the project, meaning that they have one of the following permissions:
    #
    #      *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
    #      *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
    #      *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
    #  *  `browse` the project, meaning that they have the *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
    #  *  `edit` the project, meaning that they have one of the following permissions:
    #
    #      *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.
    #      *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).
    "view"|"browse"|"edit" action = "view";
    # EXPERIMENTAL. A query string used to search properties. The query string cannot be specified using a JSON object. For example, to search for the value of `nested` from `{"something":{"nested":1,"other":2}}` use `[thepropertykey].something.nested=1`. Note that the propertyQuery key is enclosed in square brackets to enable searching where the propertyQuery key includes dot (.) or equals (=) characters.
    string propertyQuery?;
    # The index of the first item to return in a page of results (page offset).
    int startAt = 0;
    # The ID of the project's category. A complete list of category IDs is found using the [Get all project categories](#api-rest-api-2-projectCategory-get) operation.
    int categoryId?;
    # EXPERIMENTAL. A list of project properties to return for the project. This parameter accepts a comma-separated list.
    StringList[] properties?;
    # EXPERIMENTAL. Filter results by project status:
    #
    #  *  `live` Search live projects.
    #  *  `archived` Search archived projects.
    #  *  `deleted` Search deleted projects, those in the recycle bin.
    ("live"|"archived"|"deleted")[] status?;
};

# Details of the name, description, and default issue type for an issue type scheme.
public type IssueTypeSchemeUpdateDetails record {|
    # The name of the issue type scheme. The name must be unique. The maximum length is 255 characters.
    string name?;
    # The description of the issue type scheme. The maximum length is 4000 characters.
    string description?;
    # The ID of the default issue type of the issue type scheme.
    string defaultIssueTypeId?;
|};

# Project feature.
public type ProjectFeature record {|
    # Project ID.
    int projectId?;
    # State of the feature.
    "ENABLED"|"DISABLED"|"COMING_SOON" state?;
    # Determines whether a feature can be toggled or not.
    boolean toggleLocked?;
    # Feature's key.
    string feature?;
    # Feature's category.
    string featureCategory?;
    # List of the keys of features required as prerequisites to enable this feature.
    string[] prerequisites?;
    # Name to display for this feature, localised.
    string localisedName?;
    # Description to display for this feature, localised.
    string localisedDescription?;
    # Uri to the image that should be used to display this feature.
    string imageUri?;
|};

public type IssueFieldOptionScopeBean record {|
    # DEPRECATED
    int[] projects?;
    # Defines the projects in which the option is available and the behavior of the option within each project. Specify one object per project. The behavior of the option in a project context overrides the behavior in the global context.
    ProjectScopeBean[] projects2?;
    # Defines the behavior of the option within the global context. If this property is set, even if set to an empty object, then the option is available in all projects.
    GlobalScopeBean global?;
|};

# Represents the Queries record for the operation: getAllWorkflows
public type GetAllWorkflowsQueries record {
    # The name of the workflow to be returned. Only one workflow can be specified.
    string workflowName?;
};

# Details of a screen.
public type UpdateScreenDetails record {|
    # The name of the screen. The name must be unique. The maximum length is 255 characters.
    string name?;
    # The description of the screen. The maximum length is 255 characters.
    string description?;
|};

# Represents the Queries record for the operation: getWorkflow
public type GetWorkflowQueries record {
    # The name of a workflow in the scheme. Limits the results to the workflow-issue type mapping for the specified workflow.
    string workflowName?;
    # Returns the mapping from the workflow scheme's draft rather than the workflow scheme, if set to true. If no draft exists, the mapping from the workflow scheme is returned.
    boolean returnDraftIfExists = false;
};

# Details of an entity property.
public type JqlQueryFieldEntityProperty record {
    # The object on which the property is set.
    string entity;
    # The key of the property.
    string 'key;
    # The path in the property value to query.
    string path;
    # The type of the property value extraction. Not available if the extraction for the property is not registered on the instance with the [Entity property](https://developer.atlassian.com/cloud/jira/platform/modules/entity-property/) module.
    "number"|"string"|"text"|"date"|"user" 'type?;
};

# Represents the Queries record for the operation: deleteComponent
public type DeleteComponentQueries record {
    # The ID of the component to replace the deleted component. If this value is null no replacement is made.
    string moveIssuesTo?;
};

# Details of a dashboard.
public type DashboardDetails record {|
    # The name of the dashboard.
    string name;
    # The description of the dashboard.
    string description?;
    # The details of any share permissions for the dashboard.
    SharePermission[] sharePermissions;
|};

# Represents the Queries record for the operation: findBulkAssignableUsers
public type FindBulkAssignableUsersQueries record {
    # A query string that is matched exactly against user `accountId`. Required, unless `query` is specified.
    @constraint:String {maxLength: 128}
    string accountId?;
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 50;
    # A query string that is matched against user attributes, such as `displayName` and `emailAddress`, to find relevant users. The string can match the prefix of the attribute's value. For example, *query=john* matches a user with a `displayName` of *John Smith* and a user with an `emailAddress` of *johnson@example.com*. Required, unless `accountId` is specified.
    string query?;
    # A list of project keys (case sensitive). This parameter accepts a comma-separated list.
    string projectKeys;
    # The index of the first item to return in a page of results (page offset).
    int:Signed32 startAt = 0;
    # This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
    string username?;
};

# A paginated list of subscriptions to a filter.
public type FilterSubscriptionsList record {|
    # The number of items on the page.
    int:Signed32 size?;
    # The list of items.
    FilterSubscription[] items?;
    # The maximum number of results that could be on the page.
    int:Signed32 max\-results?;
    # The index of the first item returned on the page.
    int:Signed32 start\-index?;
    # The index of the last item returned on the page.
    int:Signed32 end\-index?;
|};

# A page of items.
public type PageBeanWorkflowScheme record {|
    # The URL of the page.
    string self?;
    # If there is another page of results, the URL of the next page.
    string nextPage?;
    # The maximum number of items that could be returned.
    int:Signed32 maxResults?;
    # The index of the first item returned.
    int startAt?;
    # The number of items returned.
    int total?;
    # Whether this is the last page.
    boolean isLast?;
    # The list of items.
    WorkflowScheme[] values?;
|};

# Details of the group associated with the role.
public type ProjectRoleGroup record {|
    # The display name of the group.
    string displayName?;
    # The name of the group
    string name?;
|};

# Metadata for an archive (for example a zip) and its contents.
public type AttachmentArchiveMetadataReadable record {|
    # The ID of the attachment.
    int id?;
    # The name of the archive file.
    string name?;
    # The list of the items included in the archive.
    AttachmentArchiveItemReadable[] entries?;
    # The number of items included in the archive.
    int totalEntryCount?;
    # The MIME type of the attachment.
    string mediaType?;
|};

# Project list with assigned field configuration schema.
public type FieldConfigurationSchemeProjects record {|
    FieldConfigurationScheme fieldConfigurationScheme?;
    # The IDs of projects using the field configuration scheme.
    string[] projectIds;
|};

# Details of the operations that can be performed on the issue.
public type Operations record {
    # Details of the link groups defining issue operations.
    LinkGroup[] linkGroups?;
};

# Represents the Queries record for the operation: getIssueTypeScreenSchemeMappings
public type GetIssueTypeScreenSchemeMappingsQueries record {
    # The list of issue type screen scheme IDs. To include multiple issue type screen schemes, separate IDs with ampersand: `issueTypeScreenSchemeId=10000&issueTypeScreenSchemeId=10001`.
    int[] issueTypeScreenSchemeId?;
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 50;
    # The index of the first item to return in a page of results (page offset).
    int startAt = 0;
};

# Represents the Queries record for the operation: deleteWorkflowMapping
public type DeleteWorkflowMappingQueries record {
    # Set to true to create or update the draft of a workflow scheme and delete the mapping from the draft, when the workflow scheme cannot be edited. Defaults to `false`.
    boolean updateDraftIfNeeded?;
    # The name of the workflow.
    string workflowName;
};

# Details of user or system associated with a issue history metadata item.
public type HistoryMetadataParticipant record {
    # The ID of the user or system associated with a history record.
    string id?;
    # The display name of the user or system associated with a history record.
    string displayName?;
    # The key of the display name of the user or system associated with a history record.
    string displayNameKey?;
    # The type of the user or system associated with a history record.
    string 'type?;
    # The URL to an avatar for the user or system associated with a history record.
    string avatarUrl?;
    # The URL of the user or system associated with a history record.
    string url?;
};

# A project category.
public type ProjectCategory record {|
    # The URL of the project category.
    string self?;
    # The ID of the project category.
    string id?;
    # The name of the project category. Required on create, optional on update.
    string name?;
    # The description of the project category.
    string description?;
|};

# Issue security level member.
public type IssueSecurityLevelMember record {|
    # The ID of the issue security level member.
    int id;
    # The ID of the issue security level.
    int issueSecurityLevelId;
    # The user or group being granted the permission. It consists of a `type` and a type-dependent `parameter`. See [Holder object](../api-group-permission-schemes/#holder-object) in *Get all permission schemes* for more information.
    PermissionHolder holder;
|};

# Metadata for an issue attachment.
public type AttachmentMetadata record {|
    # The ID of the attachment.
    int id?;
    # The URL of the attachment metadata details.
    string self?;
    # The name of the attachment file.
    string filename?;
    # Details of the user who attached the file.
    User author?;
    # The datetime the attachment was created.
    string created?;
    # The size of the attachment.
    int size?;
    # The MIME type of the attachment.
    string mimeType?;
    # Additional properties of the attachment.
    record {} properties?;
    # The URL of the attachment.
    string content?;
    # The URL of a thumbnail representing the attachment.
    string thumbnail?;
|};

# Represents the Queries record for the operation: getAllUsersDefault
public type GetAllUsersDefaultQueries record {
    # The maximum number of items to return.
    int:Signed32 maxResults = 50;
    # The index of the first item to return.
    int:Signed32 startAt = 0;
};

# An issue suggested for use in the issue picker auto-completion.
public type SuggestedIssue record {|
    # The ID of the issue.
    int id?;
    # The key of the issue.
    string 'key?;
    # The key of the issue in HTML format.
    string keyHtml?;
    # The URL of the issue type's avatar.
    string img?;
    # The phrase containing the query string in HTML format, with the string highlighted with HTML bold tags.
    string summary?;
    # The phrase containing the query string, as plain text.
    string summaryText?;
|};

# Represents the Queries record for the operation: getUser
public type GetUserQueries record {
    # The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. Required.
    @constraint:String {maxLength: 128}
    string accountId?;
    # Use [expand](#expansion) to include additional information about users in the response. This parameter accepts a comma-separated list. Expand options include:
    #
    #  *  `groups` includes all groups and nested groups to which the user belongs.
    #  *  `applicationRoles` includes details of all the applications to which the user has access.
    string expand?;
    # This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide) for details.
    string 'key?;
    # This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide) for details.
    string username?;
};

# A page of items.
public type PageBeanCustomFieldContextOption record {|
    # The URL of the page.
    string self?;
    # If there is another page of results, the URL of the next page.
    string nextPage?;
    # The maximum number of items that could be returned.
    int:Signed32 maxResults?;
    # The index of the first item returned.
    int startAt?;
    # The number of items returned.
    int total?;
    # Whether this is the last page.
    boolean isLast?;
    # The list of items.
    CustomFieldContextOption[] values?;
|};

# Details about a group.
public type GroupDetails record {|
    # The name of the group.
    string name?;
    # The ID of the group, if available, which uniquely identifies the group across all Atlassian products. For example, *952d12c3-5b5b-4d04-bb32-44d383afc4b2*.
    string groupId?;
|};

# Details about a user assigned to a project role.
public type RoleActor record {|
    # The ID of the role actor.
    int id?;
    # The display name of the role actor. For users, depending on the user’s privacy setting, this may return an alternative value for the user's name.
    string displayName?;
    # The type of role actor.
    "atlassian-group-role-actor"|"atlassian-user-role-actor" 'type?;
    # This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
    string name?;
    # The avatar of the role actor.
    string avatarUrl?;
    ProjectRoleUser actorUser?;
    ProjectRoleGroup actorGroup?;
|};

public type UnrestrictedUserEmail record {|
    # The accountId of the user
    string accountId?;
    # The email of the user
    string email?;
|};

public type IssuesUpdateBean record {
    IssueUpdateDetails[] issueUpdates?;
};

# Permissions which a user has on a project.
public type ProjectPermissions record {|
    # Whether the logged user can edit the project.
    boolean canEdit?;
|};

public type AttachmentArchiveImpl record {|
    # The list of the items included in the archive.
    AttachmentArchiveEntry[] entries?;
    # The number of items in the archive.
    int:Signed32 totalEntryCount?;
|};

# Details about a component with a count of the issues it contains.
public type ComponentWithIssueCount record {|
    # Count of issues for the component.
    int issueCount?;
    # The URL for this count of the issues contained in the component.
    string self?;
    # The description for the component.
    string description?;
    # The user details for the component's lead user.
    User lead?;
    # The nominal user type used to determine the assignee for issues created with this component. See `realAssigneeType` for details on how the type of the user, and hence the user, assigned to issues is determined. Takes the following values:
    #
    #  *  `PROJECT_LEAD` the assignee to any issues created with this component is nominally the lead for the project the component is in.
    #  *  `COMPONENT_LEAD` the assignee to any issues created with this component is nominally the lead for the component.
    #  *  `UNASSIGNED` an assignee is not set for issues created with this component.
    #  *  `PROJECT_DEFAULT` the assignee to any issues created with this component is nominally the default assignee for the project that the component is in.
    "PROJECT_DEFAULT"|"COMPONENT_LEAD"|"PROJECT_LEAD"|"UNASSIGNED" assigneeType?;
    # The key of the project to which the component is assigned.
    string project?;
    # The details of the user associated with `assigneeType`, if any. See `realAssignee` for details of the user assigned to issues created with this component.
    User assignee?;
    # Not used.
    int projectId?;
    # The user assigned to issues created with this component, when `assigneeType` does not identify a valid assignee.
    User realAssignee?;
    # Whether a user is associated with `assigneeType`. For example, if the `assigneeType` is set to `COMPONENT_LEAD` but the component lead is not set, then `false` is returned.
    boolean isAssigneeTypeValid?;
    # The type of the assignee that is assigned to issues created with this component, when an assignee cannot be set from the `assigneeType`. For example, `assigneeType` is set to `COMPONENT_LEAD` but no component lead is set. This property is set to one of the following values:
    #
    #  *  `PROJECT_LEAD` when `assigneeType` is `PROJECT_LEAD` and the project lead has permission to be assigned issues in the project that the component is in.
    #  *  `COMPONENT_LEAD` when `assignee`Type is `COMPONENT_LEAD` and the component lead has permission to be assigned issues in the project that the component is in.
    #  *  `UNASSIGNED` when `assigneeType` is `UNASSIGNED` and Jira is configured to allow unassigned issues.
    #  *  `PROJECT_DEFAULT` when none of the preceding cases are true.
    "PROJECT_DEFAULT"|"COMPONENT_LEAD"|"PROJECT_LEAD"|"UNASSIGNED" realAssigneeType?;
    # The name for the component.
    string name?;
    # The unique identifier for the component.
    string id?;
|};

# Represents the Queries record for the operation: getAllScreenTabs
public type GetAllScreenTabsQueries record {
    # The key of the project.
    string projectKey?;
};

# A list of custom field options for a context.
public type CustomFieldUpdatedContextOptionsList record {|
    # The updated custom field options.
    CustomFieldOptionUpdate[] options?;
|};

# Details about system and custom avatars.
public type Avatars record {|
    # System avatars list.
    Avatar[] system?;
    # Custom avatars list.
    Avatar[] custom?;
|};

# A page of items.
public type PageBeanGroupDetails record {|
    # The URL of the page.
    string self?;
    # If there is another page of results, the URL of the next page.
    string nextPage?;
    # The maximum number of items that could be returned.
    int:Signed32 maxResults?;
    # The index of the first item returned.
    int startAt?;
    # The number of items returned.
    int total?;
    # Whether this is the last page.
    boolean isLast?;
    # The list of items.
    GroupDetails[] values?;
|};

# Details of a field configuration scheme.
public type FieldConfigurationScheme record {|
    # The ID of the field configuration scheme.
    string id;
    # The name of the field configuration scheme.
    string name;
    # The description of the field configuration scheme.
    string description?;
|};

# A user found in a search.
public type UserPickerUser record {|
    # The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
    string accountId?;
    # This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
    string name?;
    # This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
    string 'key?;
    # The display name, email address, and key of the user with the matched query string highlighted with the HTML bold tag.
    string html?;
    # The display name of the user. Depending on the user’s privacy setting, this may be returned as null.
    string displayName?;
    # The avatar URL of the user.
    string avatarUrl?;
|};

public type UserMigrationBean record {|
    string 'key?;
    string username?;
    string accountId?;
|};

# An entity property, for more information see [Entity properties](https://developer.atlassian.com/cloud/jira/platform/jira-entity-properties/).
public type EntityProperty record {|
    # The key of the property. Required on create and update.
    string 'key?;
    # The value of the property. Required on create and update.
    anydata value?;
|};

# Represents the Queries record for the operation: getOptionsForField
public type GetOptionsForFieldQueries record {
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 1000;
    # The index of the first item to return in a page of results (page offset).
    int startAt = 0;
};

# Represents the Queries record for the operation: updateWorkflowMapping
public type UpdateWorkflowMappingQueries record {
    # The name of the workflow.
    string workflowName;
};

# Meta data describing the `issues` context variable.
public type IssuesMetaBean record {|
    IssuesJqlMetaDataBean jql?;
|};

# The details of a custom field context.
public type CustomFieldContext record {|
    # The ID of the context.
    string id;
    # The name of the context.
    string name;
    # The description of the context.
    string description;
    # Whether the context is global.
    boolean isGlobalContext;
    # Whether the context apply to all issue types.
    boolean isAnyIssueType;
|};

# Details of a user or group subscribing to a filter.
public type FilterSubscription record {|
    # The ID of the filter subscription.
    int id?;
    # The user subscribing to filter.
    User user?;
    # The group subscribing to filter.
    GroupName group?;
|};

# Represents the Queries record for the operation: getWorklog
public type GetWorklogQueries record {
    # Use [expand](#expansion) to include additional information about work logs in the response. This parameter accepts
    #
    # `properties`, which returns worklog properties.
    string expand = "";
};

public type JiraExpressionEvalRequestBean record {|
    # The Jira expression to evaluate.
    string expression;
    # The context in which the Jira expression is evaluated.
    JiraExpressionEvalContextBean context?;
|};

# Represents the Queries record for the operation: getRemoteIssueLinks
public type GetRemoteIssueLinksQueries record {
    # The global ID of the remote issue link.
    string globalId?;
};

# A changelog.
public type Changelog record {|
    # The ID of the changelog.
    string id?;
    # The user who made the change.
    UserDetails author?;
    # The date on which the change took place.
    string created?;
    # The list of items changed.
    ChangeDetails[] items?;
    # The history metadata associated with the changed.
    HistoryMetadata historyMetadata?;
|};

public type SharePermissionInputBean record {|
    # The type of the share permission.Specify the type as follows:
    #
    #  *  `group` Share with a group. Specify `groupname` as well.
    #  *  `project` Share with a project. Specify `projectId` as well.
    #  *  `projectRole` Share with a project role in a project. Specify `projectId` and `projectRoleId` as well.
    #  *  `global` Share globally, including anonymous users. If set, this type overrides all existing share permissions and must be deleted before any non-global share permissions is set.
    #  *  `authenticated` Share with all logged-in users. This shows as `loggedin` in the response. If set, this type overrides all existing share permissions and must be deleted before any non-global share permissions is set.
    "project"|"group"|"projectRole"|"global"|"authenticated" 'type;
    # The ID of the project to share the filter with. Set `type` to `project`.
    string projectId?;
    # The name of the group to share the filter with. Set `type` to `group`.
    string groupname?;
    # The ID of the project role to share the filter with. Set `type` to `projectRole` and the `projectId` for the project that the role is in.
    string projectRoleId?;
|};

# A page of items.
public type PageBeanCustomFieldContext record {|
    # The URL of the page.
    string self?;
    # If there is another page of results, the URL of the next page.
    string nextPage?;
    # The maximum number of items that could be returned.
    int:Signed32 maxResults?;
    # The index of the first item returned.
    int startAt?;
    # The number of items returned.
    int total?;
    # Whether this is the last page.
    boolean isLast?;
    # The list of items.
    CustomFieldContext[] values?;
|};

# Time tracking details.
public type TimeTrackingDetails record {|
    # The original estimate of time needed for this issue in readable format.
    string originalEstimate?;
    # The remaining estimate of time needed for this issue in readable format.
    string remainingEstimate?;
    # Time worked on this issue in readable format.
    string timeSpent?;
    # The original estimate of time needed for this issue in seconds.
    int originalEstimateSeconds?;
    # The remaining estimate of time needed for this issue in seconds.
    int remainingEstimateSeconds?;
    # Time worked on this issue in seconds.
    int timeSpentSeconds?;
|};

# Represents the Queries record for the operation: getEditIssueMeta
public type GetEditIssueMetaQueries record {
    # Whether hidden fields should be returned. Available to connect app users with admin permissions.
    boolean overrideScreenSecurity = false;
    # Whether non-editable fields should be returned. Available to connect app users with admin permissions.
    boolean overrideEditableFlag = false;
};

# Details of an issue transition.
public type IssueTransition record {
    # The ID of the issue transition. Required when specifying a transition to undertake.
    string id?;
    # The name of the issue transition.
    string name?;
    # Details of the issue status after the transition.
    StatusDetails to?;
    # Whether there is a screen associated with the issue transition.
    boolean hasScreen?;
    # Whether the issue transition is global, that is, the transition is applied to issues regardless of their status.
    boolean isGlobal?;
    # Whether this is the initial issue transition for the workflow.
    boolean isInitial?;
    # Whether the transition is available to be performed.
    boolean isAvailable?;
    # Whether the issue has to meet criteria before the issue transition is applied.
    boolean isConditional?;
    # Details of the fields associated with the issue transition screen. Use this information to populate `fields` and `update` in a transition request.
    record {|FieldMetadata...;|} fields?;
    # Expand options that include additional transition details in the response.
    string expand?;
    boolean looped?;
};

# The result of evaluating a Jira expression.
public type JiraExpressionResult record {|
    # The value of the evaluated expression. It may be a primitive JSON value or a Jira REST API object. (Some expressions do not produce any meaningful results—for example, an expression that returns a lambda function—if that's the case a simple string representation is returned. These string representations should not be relied upon and may change without notice.)
    anydata value;
    # Contains various characteristics of the performed expression evaluation.
    JiraExpressionEvaluationMetaDataBean meta?;
|};

# Represents the Queries record for the operation: getNotificationScheme
public type GetNotificationSchemeQueries record {
    # Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:
    #
    #  *  `all` Returns all expandable information.
    #  *  `field` Returns information about any custom fields assigned to receive an event.
    #  *  `group` Returns information about any groups assigned to receive an event.
    #  *  `notificationSchemeEvents` Returns a list of event associations. This list is returned for all expandable information.
    #  *  `projectRole` Returns information about any project roles assigned to receive an event.
    #  *  `user` Returns information about any users assigned to receive an event.
    string expand?;
};

# The IDs of the screens for the screen types of the screen scheme.
public type ScreenTypes record {|
    # The ID of the edit screen.
    int edit?;
    # The ID of the create screen.
    int create?;
    # The ID of the view screen.
    int view?;
    # The ID of the default screen. Required when creating a screen scheme.
    int default?;
|};

# A workflow with transition rules.
public type WorkflowTransitionRules record {|
    WorkflowId workflowId;
    # The list of post functions within the workflow.
    ConnectWorkflowTransitionRule[] postFunctions;
    # The list of conditions within the workflow.
    ConnectWorkflowTransitionRule[] conditions;
    # The list of validators within the workflow.
    ConnectWorkflowTransitionRule[] validators;
|};

# Represents the Queries record for the operation: getFieldsPaginated
public type GetFieldsPaginatedQueries record {
    # Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:
    #
    #  *  `key` Returns the key for each field.
    #  *  `lastUsed` Returns the date when the value of the field last changed.
    #  *  `screensCount` Returns the number of screens related to a field.
    #  *  `contextsCount` Returns the number of contexts related to a field.
    #  *  `isLocked` Returns information about whether the field is [locked](https://confluence.atlassian.com/x/ZSN7Og).
    #  *  `searcherKey` Returns the searcher key for each custom field.
    string expand?;
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 50;
    # String used to perform a case-insensitive partial match with field names or descriptions.
    string query?;
    # [Order](#ordering) the results by a field:
    #
    #  *  `contextsCount` Sorts by the number of contexts related to a field.
    #  *  `lastUsed` Sorts by the date when the value of the field last changed.
    #  *  `name` Sorts by the field name.
    #  *  `screensCount` Sorts by the number of screens related to a field.
    "contextsCount"|"-contextsCount"|"+contextsCount"|"lastUsed"|"-lastUsed"|"+lastUsed"|"name"|"-name"|"+name"|"screensCount"|"-screensCount"|"+screensCount" orderBy?;
    # The IDs of the custom fields to return or, where `query` is specified, filter.
    string[] id?;
    # The type of fields to search.
    ("custom"|"system")[] 'type?;
    # The index of the first item to return in a page of results (page offset).
    int startAt = 0;
};

# The project and issue type mappings.
public type ProjectIssueTypeMappings record {|
    # The project and issue type mappings.
    ProjectIssueTypeMapping[] mappings;
|};

# Represents the Queries record for the operation: setUserProperty
public type SetUserPropertyQueries record {
    # The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
    @constraint:String {maxLength: 128}
    string accountId?;
    # This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
    string userKey?;
    # This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
    string username?;
};

# Details of any errors encountered while updating workflow transition rules.
public type WorkflowTransitionRulesUpdateErrors record {|
    # A list of workflows.
    WorkflowTransitionRulesUpdateErrorDetails[] updateResults;
|};

# A screen tab field.
public type ScreenableField record {|
    # The ID of the screen tab field.
    string id?;
    # The name of the screen tab field. Required on create and update. The maximum length is 255 characters.
    string name?;
|};

# Details about a notification scheme event.
public type NotificationSchemeEvent record {|
    NotificationEvent event?;
    EventNotification[] notifications?;
|};

# Represents the Queries record for the operation: getComment
public type GetCommentQueries record {
    # Use [expand](#expansion) to include additional information about comments in the response. This parameter accepts `renderedBody`, which returns the comment body rendered in HTML.
    string expand?;
};

# A field auto-complete suggestion.
public type AutoCompleteSuggestion record {|
    # The value of a suggested item.
    string value?;
    # The display name of a suggested item. If `fieldValue` or `predicateValue` are provided, the matching text is highlighted with the HTML bold tag.
    string displayName?;
|};

# A page of items.
public type PageBeanCustomFieldOptionDetails record {|
    # The URL of the page.
    string self?;
    # If there is another page of results, the URL of the next page.
    string nextPage?;
    # The maximum number of items that could be returned.
    int:Signed32 maxResults?;
    # The index of the first item returned.
    int startAt?;
    # The number of items returned.
    int total?;
    # Whether this is the last page.
    boolean isLast?;
    # The list of items.
    CustomFieldOptionDetails[] values?;
|};

# Details about the server Jira is running on.
public type WorkflowTransitionProperty record {
    # The key of the transition property. Also known as the name of the transition property.
    string 'key?;
    # The value of the transition property.
    string value;
    # The ID of the transition property.
    string id?;
};

# Details of issue history metadata.
public type HistoryMetadata record {
    # The type of the history record.
    string 'type?;
    # The description of the history record.
    string description?;
    # The description key of the history record.
    string descriptionKey?;
    # The activity described in the history record.
    string activityDescription?;
    # The key of the activity described in the history record.
    string activityDescriptionKey?;
    # The description of the email address associated the history record.
    string emailDescription?;
    # The description key of the email address associated the history record.
    string emailDescriptionKey?;
    # Details of the user whose action created the history record.
    HistoryMetadataParticipant actor?;
    # Details of the system that generated the history record.
    HistoryMetadataParticipant generator?;
    # Details of the cause that triggered the creation the history record.
    HistoryMetadataParticipant cause?;
    # Additional arbitrary information about the history record.
    record {|string...;|} extraData?;
};

# A page of failed webhooks.
public type FailedWebhooks record {|
    # The list of webhooks.
    FailedWebhook[] values;
    # The maximum number of items on the page. If the list of values is shorter than this number, then there are no more pages.
    int:Signed32 maxResults;
    # The URL to the next page of results. Present only if the request returned at least one result.The next page may be empty at the time of receiving the response, but new failed webhooks may appear in time. You can save the URL to the next page and query for new results periodically (for example, every hour).
    string next?;
|};

# A page of items.
public type PageBeanComment record {|
    # The URL of the page.
    string self?;
    # If there is another page of results, the URL of the next page.
    string nextPage?;
    # The maximum number of items that could be returned.
    int:Signed32 maxResults?;
    # The index of the first item returned.
    int startAt?;
    # The number of items returned.
    int total?;
    # Whether this is the last page.
    boolean isLast?;
    # The list of items.
    Comment[] values?;
|};

# Represents the Queries record for the operation: searchForIssuesUsingJql
public type SearchForIssuesUsingJqlQueries record {
    # Use [expand](#expansion) to include additional information about issues in the response. This parameter accepts a comma-separated list. Expand options include:
    #
    #  *  `renderedFields` Returns field values rendered in HTML format.
    #  *  `names` Returns the display name of each field.
    #  *  `schema` Returns the schema describing a field type.
    #  *  `transitions` Returns all possible transitions for the issue.
    #  *  `operations` Returns all possible operations for the issue.
    #  *  `editmeta` Returns information about how each field can be edited.
    #  *  `changelog` Returns a list of recent updates to an issue, sorted by date, starting from the most recent.
    #  *  `versionedRepresentations` Instead of `fields`, returns `versionedRepresentations` a JSON array containing each version of a field's value, with the highest numbered item representing the most recent version.
    string expand?;
    # The [JQL](https://confluence.atlassian.com/x/egORLQ) that defines the search. Note:
    #
    #  *  If no JQL expression is provided, all issues are returned.
    #  *  `username` and `userkey` cannot be used as search terms due to privacy reasons. Use `accountId` instead.
    #  *  If a user has hidden their email address in their user profile, partial matches of the email address will not find the user. An exact match is required.
    string jql?;
    # The maximum number of items to return per page. To manage page size, Jira may return fewer items per page where a large number of fields are requested. The greatest number of items returned per page is achieved when requesting `id` or `key` only.
    int:Signed32 maxResults = 50;
    # Determines how to validate the JQL query and treat the validation results. Supported values are:
    #
    #  *  `strict` Returns a 400 response code if any errors are found, along with a list of all errors (and warnings).
    #  *  `warn` Returns all errors as warnings.
    #  *  `none` No validation is performed.
    #  *  `true` *Deprecated* A legacy synonym for `strict`.
    #  *  `false` *Deprecated* A legacy synonym for `warn`.
    #
    # Note: If the JQL is not correctly formed a 400 response code is returned, regardless of the `validateQuery` value.
    "strict"|"warn"|"none"|"true"|"false" validateQuery = "strict";
    # Reference fields by their key (rather than ID).
    boolean fieldsByKeys = false;
    # A list of fields to return for each issue, use it to retrieve a subset of fields. This parameter accepts a comma-separated list. Expand options include:
    #
    #  *  `*all` Returns all fields.
    #  *  `*navigable` Returns navigable fields.
    #  *  Any issue field, prefixed with a minus to exclude.
    #
    # Examples:
    #
    #  *  `summary,comment` Returns only the summary and comments fields.
    #  *  `-description` Returns all navigable (default) fields except description.
    #  *  `*all,-comment` Returns all fields except comments.
    #
    # This parameter may be specified multiple times. For example, `fields=field1,field2&fields=field3`.
    #
    # Note: All navigable fields are returned by default. This differs from [GET issue](#api-rest-api-2-issue-issueIdOrKey-get) where the default is all fields.
    string[] fields?;
    # The index of the first item to return in a page of results (page offset).
    int:Signed32 startAt = 0;
    # A list of issue property keys for issue properties to include in the results. This parameter accepts a comma-separated list. Multiple properties can also be provided using an ampersand separated list. For example, `properties=prop1,prop2&properties=prop3`. A maximum of 5 issue property keys can be specified.
    string[] properties?;
};

public type ListWrapperCallbackApplicationRole record {|
|};

# Represents the Queries record for the operation: getFieldConfigurationSchemeMappings
public type GetFieldConfigurationSchemeMappingsQueries record {
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 50;
    # The list of field configuration scheme IDs. To include multiple field configuration schemes separate IDs with ampersand: `fieldConfigurationSchemeId=10000&fieldConfigurationSchemeId=10001`.
    @constraint:Array {maxLength: 50, minLength: 1}
    int[] fieldConfigurationSchemeId?;
    # The index of the first item to return in a page of results (page offset).
    int startAt = 0;
};

# Associated issue type screen scheme and project.
public type IssueTypeScreenSchemeProjectAssociation record {|
    # The ID of the issue type screen scheme.
    string issueTypeScreenSchemeId?;
    # The ID of the project.
    string projectId?;
|};

# Issue type scheme with a list of the projects that use it.
public type IssueTypeSchemeProjects record {|
    # Details of an issue type scheme.
    IssueTypeScheme issueTypeScheme;
    # The IDs of the projects using the issue type scheme.
    string[] projectIds;
|};

# The project issue type hierarchy.
public type Hierarchy record {|
    # The ID of the base level. This property is deprecated, see [Change notice: Removing hierarchy level IDs from next-gen APIs](https://developer.atlassian.com/cloud/jira/platform/change-notice-removing-hierarchy-level-ids-from-next-gen-apis/).
    int baseLevelId?;
    # Details about the hierarchy level.
    HierarchyLevel[] levels?;
|};

# Details of a screen scheme.
public type UpdateScreenSchemeDetails record {|
    # The name of the screen scheme. The name must be unique. The maximum length is 255 characters.
    string name?;
    # The description of the screen scheme. The maximum length is 255 characters.
    string description?;
    # The IDs of the screens for the screen types of the screen scheme. Only screens used in classic projects are accepted.
    UpdateScreenTypes screens?;
|};

public type IssueCommentListRequestBean record {|
    # The list of comment IDs. A maximum of 1000 IDs can be specified.
    int[] ids;
|};

# A page of items.
public type PageBeanFieldConfiguration record {|
    # The URL of the page.
    string self?;
    # If there is another page of results, the URL of the next page.
    string nextPage?;
    # The maximum number of items that could be returned.
    int:Signed32 maxResults?;
    # The index of the first item returned.
    int startAt?;
    # The number of items returned.
    int total?;
    # Whether this is the last page.
    boolean isLast?;
    # The list of items.
    FieldConfiguration[] values?;
|};

# Container for the list of features on the project.
public type ProjectFeaturesResponse record {|
    # The list of features on the project.
    ProjectFeature[] features?;
|};

# Represents the Queries record for the operation: getFieldConfigurationItems
public type GetFieldConfigurationItemsQueries record {
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 50;
    # The index of the first item to return in a page of results (page offset).
    int startAt = 0;
};

# Details of updates for a custom field.
public type CustomFieldValueUpdateRequest record {|
    # The list of custom field update details.
    CustomFieldValueUpdate[] updates?;
|};

# Represents the Queries record for the operation: getAllPermissionSchemes
public type GetAllPermissionSchemesQueries record {
    # Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are included when you specify any value. Expand options include:
    #
    #  *  `all` Returns all expandable information.
    #  *  `field` Returns information about the custom field granted the permission.
    #  *  `group` Returns information about the group that is granted the permission.
    #  *  `permissions` Returns all permission grants for each permission scheme.
    #  *  `projectRole` Returns information about the project role granted the permission.
    #  *  `user` Returns information about the user who is granted the permission.
    string expand?;
};

# Represents the Queries record for the operation: getAllDashboards
public type GetAllDashboardsQueries record {
    # The filter applied to the list of dashboards. Valid values are:
    #
    #  *  `favourite` Returns dashboards the user has marked as favorite.
    #  *  `my` Returns dashboards owned by the user.
    "my"|"favourite" filter?;
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 20;
    # The index of the first item to return in a page of results (page offset).
    int:Signed32 startAt = 0;
};

# Various counts of issues within a version.
public type VersionIssueCounts record {|
    # The URL of these count details.
    string self?;
    # Count of issues where the `fixVersion` is set to the version.
    int issuesFixedCount?;
    # Count of issues where the `affectedVersion` is set to the version.
    int issuesAffectedCount?;
    # Count of issues where a version custom field is set to the version.
    int issueCountWithCustomFieldsShowingVersion?;
    # List of custom fields using the version.
    VersionUsageInCustomField[] customFieldUsage?;
|};

# An issue priority.
public type Priority record {
    # The URL of the issue priority.
    string self?;
    # The color used to indicate the issue priority.
    string statusColor?;
    # The description of the issue priority.
    string description?;
    # The URL of the icon for the issue priority.
    string iconUrl?;
    # The name of the issue priority.
    string name?;
    # The ID of the issue priority.
    string id?;
};

# Details of project permissions and associated issues and projects to look up.
public type BulkProjectPermissions record {|
    # List of issue IDs.
    int[] issues?;
    # List of project IDs.
    int[] projects?;
    # List of project permissions.
    string[] permissions;
|};

# The ID of an issue type screen scheme.
public type IssueTypeScreenSchemeId record {|
    # The ID of the issue type screen scheme.
    string id;
|};

# Represents the Queries record for the operation: bulkGetUsers
public type BulkGetUsersQueries record {
    # The account ID of a user. To specify multiple users, pass multiple `accountId` parameters. For example, `accountId=5b10a2844c20165700ede21g&accountId=5b10ac8d82e05b22cc7d4ef5`.
    BulkGetUsersQueriesAccountIdItemsString[] accountId;
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 10;
    # The index of the first item to return in a page of results (page offset).
    int startAt = 0;
    # This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
    string[] 'key?;
    # This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
    string[] username?;
};

# Counts of the number of issues in various statuses.
public type VersionIssuesStatus record {
    # Count of issues with a status other than *to do*, *in progress*, and *done*.
    int unmapped?;
    # Count of issues with status *to do*.
    int toDo?;
    # Count of issues with status *in progress*.
    int inProgress?;
    # Count of issues with status *done*.
    int done?;
};

# The JQL specifying the issues available in the evaluated Jira expression under the `issues` context variable.
public type JexpIssues record {|
    # The JQL query that specifies the set of issues available in the Jira expression.
    JexpJqlIssues jql?;
|};

public type AvatarUrlsBean record {|
    # The URL of the item's 16x16 pixel avatar.
    string '16x16?;
    # The URL of the item's 24x24 pixel avatar.
    string '24x24?;
    # The URL of the item's 32x32 pixel avatar.
    string '32x32?;
    # The URL of the item's 48x48 pixel avatar.
    string '48x48?;
|};

public type IdOrKeyBean record {|
    # The ID of the referenced item.
    int id?;
    # The key of the referenced item.
    string 'key?;
|};

# Key fields from the linked issue.
public type Fields record {|
    # The summary description of the linked issue.
    string summary?;
    # The status of the linked issue.
    StatusDetails status?;
    # The priority of the linked issue.
    Priority priority?;
    # The assignee of the linked issue.
    UserDetails assignee?;
    # The time tracking of the linked issue.
    TimeTrackingDetails timetracking?;
    IssueTypeDetails issuetype?;
    # The type of the linked issue.
    IssueTypeDetails issueType?;
|};

# Details about a task.
public type TaskProgressBeanObject record {|
    # The URL of the task.
    string self;
    # The ID of the task.
    string id;
    # The description of the task.
    string description?;
    # The status of the task.
    "ENQUEUED"|"RUNNING"|"COMPLETE"|"FAILED"|"CANCEL_REQUESTED"|"CANCELLED"|"DEAD" status;
    # Information about the progress of the task.
    string message?;
    # The result of the task execution.
    anydata result?;
    # The ID of the user who submitted the task.
    int submittedBy;
    # The progress of the task, as a percentage complete.
    int progress;
    # The execution time of the task, in milliseconds.
    int elapsedRuntime;
    # A timestamp recording when the task was submitted.
    int submitted;
    # A timestamp recording when the task was started.
    int started?;
    # A timestamp recording when the task was finished.
    int finished?;
    # A timestamp recording when the task progress was last updated.
    int lastUpdate;
|};

# Represents the Queries record for the operation: getVersion
public type GetVersionQueries record {
    # Use [expand](#expansion) to include additional information about version in the response. This parameter accepts a comma-separated list. Expand options include:
    #
    #  *  `operations` Returns the list of operations available for this version.
    #  *  `issuesstatus` Returns the count of issues in this version for each of the status categories *to do*, *in progress*, *done*, and *unmapped*. The *unmapped* property represents the number of issues with a status other than *to do*, *in progress*, and *done*.
    string expand?;
};

# List of property keys.
public type PropertyKeys record {|
    # Property key details.
    PropertyKey[] keys?;
|};

# Represents the Queries record for the operation: editIssue
public type EditIssueQueries record {
    # Whether screen security should be overridden to enable hidden fields to be edited. Available to Connect app users with admin permissions.
    boolean overrideScreenSecurity = false;
    # Whether screen security should be overridden to enable uneditable fields to be edited. Available to Connect app users with admin permissions.
    boolean overrideEditableFlag = false;
    # Whether a notification email about the issue update is sent to all watchers. To disable the notification, administer Jira or administer project permissions are required. If the user doesn't have the necessary permission the request is ignored.
    boolean notifyUsers = true;
};

# Represents the Queries record for the operation: getWorkflowScheme
public type GetWorkflowSchemeQueries record {
    # Returns the workflow scheme's draft rather than scheme itself, if set to true. If the workflow scheme does not have a draft, then the workflow scheme is returned.
    boolean returnDraftIfExists = false;
};

# A status.
public type StatusDetails record {
    # The URL of the status.
    string self?;
    # The description of the status.
    string description?;
    # The URL of the icon used to represent the status.
    string iconUrl?;
    # The name of the status.
    string name?;
    # The ID of the status.
    string id?;
    # The category assigned to the status.
    StatusCategory statusCategory?;
};

public type OperationMessage record {|
    # The human-readable message that describes the result.
    string message;
    # The status code of the response.
    int statusCode;
|};

# Details of an issue resolution.
public type Resolution record {|
    # The URL of the issue resolution.
    string self?;
    # The ID of the issue resolution.
    string id?;
    # The description of the issue resolution.
    string description?;
    # The name of the issue resolution.
    string name?;
|};

# A user with details as permitted by the user's Atlassian Account privacy settings. However, be aware of these exceptions:
#
#  *  User record deleted from Atlassian: This occurs as the result of a right to be forgotten request. In this case, `displayName` provides an indication and other parameters have default values or are blank (for example, email is blank).
#  *  User record corrupted: This occurs as a results of events such as a server import and can only happen to deleted users. In this case, `accountId` returns *unknown* and all other parameters have fallback values.
#  *  User record unavailable: This usually occurs due to an internal service outage. In this case, all parameters have fallback values.
public type User record {|
    # The URL of the user.
    string self?;
    # This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
    string 'key?;
    # The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. Required in requests.
    @constraint:String {maxLength: 128}
    string accountId?;
    # The user account type. Can take the following values:
    #
    #  *  `atlassian` regular Atlassian user account
    #  *  `app` system account used for Connect applications and OAuth to represent external systems
    #  *  `customer` Jira Service Desk account representing an external service desk
    "atlassian"|"app"|"customer"|"unknown" accountType?;
    # This property is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
    string name?;
    # The email address of the user. Depending on the user’s privacy setting, this may be returned as null.
    string emailAddress?;
    # The avatars of the user.
    AvatarUrlsBean avatarUrls?;
    # The display name of the user. Depending on the user’s privacy setting, this may return an alternative value.
    string displayName?;
    # Whether the user is active.
    boolean active?;
    # The time zone specified in the user's profile. Depending on the user’s privacy setting, this may be returned as null.
    string timeZone?;
    # The locale of the user. Depending on the user’s privacy setting, this may be returned as null.
    string locale?;
    # The groups that the user belongs to.
    SimpleListWrapperGroupName groups?;
    # The application roles the user is assigned to.
    SimpleListWrapperApplicationRole applicationRoles?;
    # Expand options that include additional user details in the response.
    string expand?;
|};

public type ActorInputBean record {|
    # The account IDs of the users to add as default actors. This parameter accepts a comma-separated list. For example, `"user":["5b10a2844c20165700ede21g", "5b109f2e9729b51b54dc274d"]`.
    string[] user?;
    # The name of the group to add as a default actor. This parameter accepts a comma-separated list. For example, `"group":["project-admin", "jira-developers"]`.
    string[] group?;
|};

# A screen.
public type Screen record {|
    # The ID of the screen.
    int id?;
    # The name of the screen.
    string name?;
    # The description of the screen.
    string description?;
    # The scope of the screen.
    Scope scope?;
|};

# Represents the Queries record for the operation: getAllFieldConfigurations
public type GetAllFieldConfigurationsQueries record {
    # If *true* returns the default field configuration only.
    boolean isDefault = false;
    # The maximum number of items to return per page.
    int:Signed32 maxResults = 50;
    # String object used for filtering the items by name or description (the string is used for both fields)
    string query = "";
    # The list of field configuration IDs. To include multiple IDs, provide an ampersand-separated list. For example, `id=10000&id=10001`.
    int[] id?;
    # The index of the first item to return in a page of results (page offset).
    int startAt = 0;
};

# Details a link group, which defines issue operations.
public type LinkGroup record {|
    string id?;
    string styleClass?;
    SimpleLink header?;
    int:Signed32 weight?;
    SimpleLink[] links?;
    LinkGroup[] groups?;
|};

# A list of editable field details.
public type IssueUpdateMetadata record {
    record {|FieldMetadata...;|} fields?;
};

# Details of an issue type hierarchy level.
public type ProjectIssueTypesHierarchyLevel record {|
    # The ID of the issue type hierarchy level. This property is deprecated, see [Change notice: Removing hierarchy level IDs from next-gen APIs](https://developer.atlassian.com/cloud/jira/platform/change-notice-removing-hierarchy-level-ids-from-next-gen-apis/).
    string entityId?;
    # The level of the issue type hierarchy level.
    int:Signed32 level?;
    # The name of the issue type hierarchy level.
    string name?;
    # The list of issue types in the hierarchy level.
    IssueTypeInfo[] issueTypes?;
|};

# Represents the Queries record for the operation: getProject
public type GetProjectQueries record {
    # Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Note that the project description, issue types, and project lead are included in all responses by default. Expand options include:
    #
    #  *  `description` The project description.
    #  *  `issueTypes` The issue types associated with the project.
    #  *  `lead` The project lead.
    #  *  `projectKeys` All project keys associated with the project.
    #  *  `issueTypeHierarchy` The project issue type hierarchy.
    string expand?;
    # A list of project properties to return for the project. This parameter accepts a comma-separated list.
    string[] properties?;
};

# Details about a project role.
public type ProjectRoleDetails record {|
    # The URL the project role details.
    string self?;
    # The name of the project role.
    string name?;
    # The ID of the project role.
    int id?;
    # The description of the project role.
    string description?;
    # Whether this role is the admin role for the project.
    boolean admin?;
    # The scope of the role. Indicated for roles associated with [next-gen projects](https://confluence.atlassian.com/x/loMyO).
    Scope scope?;
    # Whether the roles are configurable for this project.
    boolean roleConfigurable?;
    # The translated name of the project role.
    string translatedName?;
    # Whether this role is the default role for the project.
    boolean default?;
|};

# Represents the Queries record for the operation: resetUserColumns
public type ResetUserColumnsQueries record {
    # The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.
    @constraint:String {maxLength: 128}
    string accountId?;
    # This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
    string username?;
};

# Lists of issues and entity properties. See [Entity properties](https://developer.atlassian.com/cloud/jira/platform/jira-entity-properties/) for more information.
public type IssueEntityProperties record {|
    # A list of entity property IDs.
    @constraint:Array {maxLength: 10000, minLength: 1}
    int[] entitiesIds?;
    # A list of entity property keys and values.
    record {|JsonNode...;|} properties?;
|};

# Represents the Queries record for the operation: findUsersForPicker
public type FindUsersForPickerQueries record {
    # A list of account IDs to exclude from the search results. This parameter accepts a comma-separated list. Multiple account IDs can also be provided using an ampersand-separated list. For example, `excludeAccountIds=5b10a2844c20165700ede21g,5b10a0effa615349cb016cd8&excludeAccountIds=5b10ac8d82e05b22cc7d4ef5`. Cannot be provided with `exclude`.
    string[] excludeAccountIds?;
    # The maximum number of items to return. The total number of matched users is returned in `total`.
    int:Signed32 maxResults = 50;
    # A query string that is matched against user attributes, such as `displayName`, and `emailAddress`, to find relevant users. The string can match the prefix of the attribute's value. For example, *query=john* matches a user with a `displayName` of *John Smith* and a user with an `emailAddress` of *johnson@example.com*.
    string query;
    # This parameter is no longer available and will be removed from the documentation soon. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.
    string[] exclude?;
    # Include the URI to the user's avatar.
    boolean showAvatar = false;
    boolean excludeConnectUsers = false;
    string avatarSize?;
};

# Additional details about a project.
public type ProjectInsight record {|
    # Total issue count.
    int totalIssueCount?;
    # The last issue update time.
    string lastIssueUpdateTime?;
|};

# An operand that is a JQL keyword. See [Advanced searching - keywords reference](https://confluence.atlassian.com/jiracorecloud/advanced-searching-keywords-reference-765593717.html#Advancedsearching-keywordsreference-EMPTYEMPTY) for more information about operand keywords.
public type KeywordOperand record {
    # The keyword that is the operand value.
    "empty" keyword;
};

public type CustomFieldContextDefaultValue CustomFieldContextDefaultValueCascadingOption|CustomFieldContextDefaultValueMultipleOption|CustomFieldContextDefaultValueSingleOption;

# The schema of a field.
public type JsonTypeBean record {|
    # The data type of the field.
    string 'type;
    # When the data type is an array, the name of the field items within the array.
    string items?;
    # If the field is a system field, the name of the field.
    string system?;
    # If the field is a custom field, the URI of the field.
    string custom?;
    # If the field is a custom field, the custom ID of the field.
    int customId?;
    # If the field is a custom field, the configuration of the field.
    record {} configuration?;
|};

# Details about a notification event.
public type NotificationEvent record {|
    # The ID of the event. The event can be a [Jira system event](https://confluence.atlassian.com/x/8YdKLg#Creatinganotificationscheme-eventsEvents) or a [custom event](https://confluence.atlassian.com/x/AIlKLg).
    int id?;
    # The name of the event.
    string name?;
    # The description of the event.
    string description?;
    # The template of the event. Only custom events configured by Jira administrators have template.
    NotificationEvent templateEvent?;
|};

# A list of matched issues or errors for each JQL query, in the order the JQL queries were passed.
public type IssueMatches record {|
    IssueMatchesForJQL[] matches;
|};

public type ListWrapperCallbackGroupName record {|
|};

public type VersionMoveBean record {|
    # The URL (self link) of the version after which to place the moved version. Cannot be used with `position`.
    string after?;
    # An absolute position in which to place the moved version. Cannot be used with `after`.
    "Earlier"|"Later"|"First"|"Last" position?;
|};

# The classic workflow identifiers.
public type WorkflowIDs record {|
    # The name of the workflow.
    string name;
    # The entity ID of the workflow.
    string entityId?;
|};

# Details of an application role.
public type ApplicationRole record {|
    # The key of the application role.
    string 'key?;
    # The groups associated with the application role.
    string[] groups?;
    # The display name of the application role.
    string name?;
    # The groups that are granted default access for this application role.
    string[] defaultGroups?;
    # Determines whether this application role should be selected by default on user creation.
    boolean selectedByDefault?;
    # Deprecated.
    boolean defined?;
    # The maximum count of users on your license.
    int:Signed32 numberOfSeats?;
    # The count of users remaining on your license.
    int:Signed32 remainingSeats?;
    # The number of users counting against your license.
    int:Signed32 userCount?;
    # The [type of users](https://confluence.atlassian.com/x/lRW3Ng) being counted against your license.
    string userCountDescription?;
    boolean hasUnlimitedSeats?;
    # Indicates if the application role belongs to Jira platform (`jira-core`).
    boolean platform?;
|};
